"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCardActivities = exports.GetCard = exports.GetBeneficiaries = exports.GetBatchPayments = exports.GetBatchPayment = exports.GetAsyncTasks = exports.GetAsyncTask = exports.GetAspsProviders = exports.GetAllPartnerNotifications = exports.GetAllCustomerNotifications = exports.GetAccountsByCustomer = exports.GetAccounts = exports.GetAccount = exports.GetAccessGroups = exports.GetAccessGroup = exports.GenerateCsv = exports.GenerateCardHolderToken = exports.ExpireAuthorisation = exports.EditPartnerNotification = exports.EditCustomerNotification = exports.EditCustomer = exports.EditAccount = exports.DeleteBeneficiaries = exports.CreateStandingOrderInitiation = exports.CreateRule = exports.CreatePhysicalCard = exports.CreatePayments = exports.CreatePaymentInitiation = exports.CreateOutboundCop = exports.CreateMandate = exports.CreateCustomer = exports.CreateCollectionSchedule = exports.CreateCard = exports.CreateBeneficiary = exports.CreateAuthorisation = exports.CreateAccount = exports.CreateAccessGroup = exports.CloseAccount = exports.CardEnquiry = exports.CancelMandate = exports.CancelDdosMandate = exports.CancelCollectionSchedule = exports.CancelCollection = exports.CancelCard = exports.CancelBatchPayments = exports.BlockCard = exports.BlockAccount = exports.AddPartnerNotification = exports.AddCustomerNotification = exports.ActivateCard = void 0;
exports.UploadPaymentFile = exports.Upload = exports.UpdateSecuredFundingLimit = exports.UpdateCardAuthentication = exports.UpdateAccessGroup = exports.Update = exports.UnsuspendCard = exports.UnblockPin = exports.UnblockCard = exports.UnblockAccount = exports.SuspendMandate = exports.SuspendCard = exports.SubmitBatchPayments = exports.Status = exports.SettleAuthorisation = exports.SendPayment = exports.SecureResetPin = exports.ReverseAuthorisation = exports.RetrievePin = exports.RetrieveMandates = exports.ResetPin = exports.ReplaceCard = exports.RemoveRules = exports.RejectCollection = exports.ReinstateMandate = exports.Proceed = exports.ModifyRule = exports.MigrateMandate = exports.GetTransactionsByAccount = exports.GetStandingOrderInitiation = exports.GetSrdAccounts = exports.GetSecureCardDetails = exports.GetRules = exports.GetRule = exports.GetPayments = exports.GetPaymentInitiation = exports.GetPartnerNotification = exports.GetMandates = exports.GetLocks = exports.GetFailedWebHooks = exports.GetCustomers = exports.GetCustomerNotification = exports.GetCustomer = exports.GetCreatePhysicalCardAsyncTasksByAccount = exports.GetCollections = exports.GetCollectionSchedules = exports.GetCardsByAccount = exports.GetCards = void 0;
const ActivateCard = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the physical card which should be activated.',
                    },
                },
                required: ['id'],
            },
            {
                type: 'object',
                properties: {
                    'X-MOD-CARD-MGMT-TOKEN': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Card Management Token required for API users for additional security when managing sensitive card data',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.ActivateCard = ActivateCard;
const AddCustomerNotification = {
    body: {
        required: ['channel', 'config', 'destinations', 'type'],
        type: 'object',
        properties: {
            type: {
                type: 'string',
                description: 'Type of the notification.',
                enum: [
                    'PAYIN',
                    'PAYOUT',
                    'BALANCE_LOW',
                    'BALANCE_HIGH',
                    'BALANCE',
                    'DDMANDATE',
                    'CUSTVSTAT',
                    'ACCOUNT_STATEMENT',
                    'PENDING_PAYMENTS',
                    'DD_INCOMING_DEBIT',
                    'DD_FAILED_CLAIM',
                    'DD_FUNDS_RETURNED',
                    'CARD_AUTH',
                    'CARD_CREATION',
                    'UPCOMING_CREDIT',
                    'UPCOMING_COLLECTION_CREDIT',
                    'UPCOMING_COLLECTION_DEBIT',
                    'CARD_STATUS_UPDATE',
                    'CARD_TOKEN_PROVISIONING',
                    'PAYMENT_COMPLIANCE_STATUS',
                    'DD_COLLECTION_STATUS',
                    'ACCOUNT_SWITCH_UPDATE',
                    'PAYMENT_FILE_UPLOAD',
                    'ACCOUNT_STATUS_CHANGE',
                ],
            },
            channel: {
                type: 'string',
                description: 'Channel used for sending the notification',
                enum: ['EMAIL', 'WEBHOOK'],
            },
            destinations: {
                type: 'array',
                description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                items: {
                    type: 'string',
                    description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                },
            },
            config: {
                type: 'object',
                properties: {
                    threshold: {
                        minimum: 0,
                        type: 'number',
                        description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                    },
                    timesToRun: {
                        type: 'array',
                        description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['AM', 'PM'],
                        },
                    },
                    daysToRun: {
                        type: 'array',
                        description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
                        },
                    },
                    retry: {
                        type: 'boolean',
                        description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    secret: {
                        maxLength: 32,
                        minLength: 32,
                        type: 'string',
                        description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    hmacAlgorithm: {
                        type: 'string',
                        description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.",
                        enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                    },
                },
                description: 'Configuration information for this Notification entity.',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['customerId'],
            },
        ],
    },
    response: {
        '201': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.AddCustomerNotification = AddCustomerNotification;
const AddPartnerNotification = {
    body: {
        required: ['channel', 'config', 'destinations', 'type'],
        type: 'object',
        properties: {
            type: {
                type: 'string',
                description: 'Type of the notification.',
                enum: [
                    'PAYIN',
                    'PAYOUT',
                    'BALANCE_LOW',
                    'BALANCE_HIGH',
                    'BALANCE',
                    'DDMANDATE',
                    'CUSTVSTAT',
                    'ACCOUNT_STATEMENT',
                    'PENDING_PAYMENTS',
                    'DD_INCOMING_DEBIT',
                    'DD_FAILED_CLAIM',
                    'DD_FUNDS_RETURNED',
                    'CARD_AUTH',
                    'CARD_CREATION',
                    'UPCOMING_CREDIT',
                    'UPCOMING_COLLECTION_CREDIT',
                    'UPCOMING_COLLECTION_DEBIT',
                    'CARD_STATUS_UPDATE',
                    'CARD_TOKEN_PROVISIONING',
                    'PAYMENT_COMPLIANCE_STATUS',
                    'DD_COLLECTION_STATUS',
                    'ACCOUNT_SWITCH_UPDATE',
                    'PAYMENT_FILE_UPLOAD',
                    'ACCOUNT_STATUS_CHANGE',
                ],
            },
            channel: {
                type: 'string',
                description: 'Channel used for sending the notification',
                enum: ['EMAIL', 'WEBHOOK'],
            },
            destinations: {
                type: 'array',
                description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                items: {
                    type: 'string',
                    description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                },
            },
            config: {
                type: 'object',
                properties: {
                    threshold: {
                        minimum: 0,
                        type: 'number',
                        description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                    },
                    timesToRun: {
                        type: 'array',
                        description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['AM', 'PM'],
                        },
                    },
                    daysToRun: {
                        type: 'array',
                        description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
                        },
                    },
                    retry: {
                        type: 'boolean',
                        description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    secret: {
                        maxLength: 32,
                        minLength: 32,
                        type: 'string',
                        description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    hmacAlgorithm: {
                        type: 'string',
                        description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.",
                        enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                    },
                },
                description: 'Configuration information for this Notification entity.',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    partnerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['partnerId'],
            },
        ],
    },
    response: {
        '201': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.AddPartnerNotification = AddPartnerNotification;
const BlockAccount = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of account to block',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.BlockAccount = BlockAccount;
const BlockCard = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card which should be blocked',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.BlockCard = BlockCard;
const CancelBatchPayments = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    batchPaymentId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Batch payment request id',
                    },
                },
                required: ['batchPaymentId'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CancelBatchPayments = CancelBatchPayments;
const CancelCard = {
    body: {
        type: 'object',
        properties: {
            reason: {
                type: 'string',
                description: 'The reason for cancelling the card. Can be one of DESTROYED, LOST, STOLEN',
                enum: ['STOLEN', 'DESTROYED', 'LOST'],
            },
        },
        description: 'Reason for cancellation',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card which should be cancelled',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CancelCard = CancelCard;
const CancelCollection = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of the collection to cancel',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CancelCollection = CancelCollection;
const CancelCollectionSchedule = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of the collectionSchedule to cancel',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CancelCollectionSchedule = CancelCollectionSchedule;
const CancelDdosMandate = {
    body: {
        required: ['accountId', 'cancellationCode', 'mandateId', 'merchantNumber'],
        type: 'object',
        properties: {
            mandateId: { type: 'string', description: 'Mandate Id' },
            accountId: { type: 'string', description: 'Account Id' },
            cancellationCode: {
                type: 'string',
                description: 'Cancellation Code',
                enum: [
                    'REFER_TO_PAYER',
                    'INSTRUCTION_CANCELLED_BY_PAYER',
                    'PAYER_DECEASED',
                    'ACCOUNT_TRANSFERRED',
                    'ACCOUNT_CLOSED',
                    'ACCOUNT_OR_INSTRUCTION_TRANSFERRED',
                    'ADVANCE_NOTICE_DISPUTED',
                    'INSTRUCTION_AMENDED',
                    'INSTRUCTION_REINSTATED',
                ],
            },
            merchantNumber: { type: 'string', description: 'Merchant Number' },
        },
        description: 'Details of the Mandate Cancel Request',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CancelDdosMandate = CancelDdosMandate;
const CancelMandate = {
    body: {
        required: ['reason'],
        type: 'object',
        properties: {
            reason: {
                type: 'string',
                description: 'Reason to cancel the mandate',
                enum: ['INSTRUCTION_CANCELLED_PAYER', 'INSTRUCTION_CANCELLED_PAYEE', 'SERVICE_ENDED'],
            },
        },
        description: 'Details of Mandate cancellation.',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of Mandate to cancel.',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CancelMandate = CancelMandate;
const CardEnquiry = {
    body: {
        type: 'object',
        properties: {
            pan: { type: 'string', description: 'pan' },
            providerSuppliedId: { type: 'string', description: 'providerSuppliedId' },
        },
        description: 'Enquiry',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '200': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Card identifier. Maximum of 10 alphanumeric characters',
                    examples: ['V000000001'],
                },
                holder: {
                    required: ['billingAddress', 'dateOfBirth', 'firstName', 'lastName', 'mobileNumber'],
                    type: 'object',
                    properties: {
                        title: {
                            pattern: '^[0-9a-zA-Z]{1,4}$',
                            type: 'string',
                            description: 'Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.',
                            examples: ['Mr'],
                        },
                        firstName: {
                            pattern: '[\\x20-\\x7e]{1,20}',
                            type: 'string',
                            description: 'Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                            examples: ['Joe'],
                        },
                        lastName: {
                            pattern: '[\\x20-\\x7e]{1,20}',
                            type: 'string',
                            description: 'Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                            examples: ['Bloggs'],
                        },
                        billingAddress: {
                            required: ['addressLine1', 'country', 'postCode', 'postTown'],
                            type: 'object',
                            properties: {
                                addressLine1: {
                                    maxLength: 50,
                                    minLength: 1,
                                    type: 'string',
                                    description: 'First line of address',
                                    examples: ['Floor 10'],
                                },
                                addressLine2: {
                                    maxLength: 50,
                                    minLength: 0,
                                    type: 'string',
                                    description: 'Second line of address',
                                    examples: ['80 George Street'],
                                },
                                postTown: {
                                    maxLength: 20,
                                    minLength: 1,
                                    type: 'string',
                                    description: 'Post town',
                                    examples: ['EDINBURGH'],
                                },
                                postCode: {
                                    maxLength: 10,
                                    minLength: 1,
                                    type: 'string',
                                    description: 'Postcode',
                                    examples: ['EH2 3BU'],
                                },
                                country: {
                                    type: 'string',
                                    description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                                    enum: [
                                        'AT',
                                        'BE',
                                        'BG',
                                        'CY',
                                        'CZ',
                                        'DK',
                                        'EE',
                                        'FI',
                                        'FR',
                                        'DE',
                                        'GR',
                                        'HR',
                                        'HU',
                                        'IS',
                                        'IE',
                                        'IT',
                                        'LV',
                                        'LI',
                                        'LT',
                                        'LU',
                                        'MT',
                                        'NL',
                                        'NO',
                                        'PL',
                                        'PT',
                                        'RO',
                                        'SK',
                                        'SI',
                                        'ES',
                                        'SE',
                                        'AX',
                                        'AW',
                                        'BL',
                                        'CW',
                                        'GF',
                                        'GL',
                                        'GP',
                                        'ME',
                                        'MF',
                                        'MQ',
                                        'NC',
                                        'PF',
                                        'PM',
                                        'RE',
                                        'SX',
                                        'TF',
                                        'WF',
                                        'YT',
                                        'AI',
                                        'BM',
                                        'FK',
                                        'GB',
                                        'GG',
                                        'GI',
                                        'GS',
                                        'IO',
                                        'JE',
                                        'KY',
                                        'MS',
                                        'PN',
                                        'SH',
                                        'TC',
                                        'VG',
                                    ],
                                    examples: ['GB'],
                                },
                            },
                            description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                        },
                        dateOfBirth: {
                            type: 'string',
                            description: 'Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.',
                            format: 'date',
                            examples: ['2001-01-01'],
                        },
                        mobileNumber: {
                            type: 'string',
                            description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.",
                            examples: ['+447123456000'],
                        },
                        email: {
                            maxLength: 50,
                            minLength: 0,
                            type: 'string',
                            description: 'Cardholder email',
                            examples: ['cardholder@example.com'],
                        },
                    },
                    description: 'CardHolder',
                },
                expiry: {
                    type: 'string',
                    description: 'An ISO 8601 date with year & month components only',
                    examples: ['2018-12'],
                },
                status: {
                    type: 'string',
                    description: 'The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`',
                    enum: ['CREATED', 'ACTIVE', 'BLOCKED', 'SUSPENDED', 'CANCELLED', 'EXPIRED'],
                },
                currency: {
                    type: 'string',
                    description: 'A 3 letter ISO 4217 code representing the card currency',
                    examples: ['GBP'],
                },
                limit: {
                    type: 'string',
                    description: 'Total card authorisation limit',
                    examples: ['1000.0'],
                },
                maxLimit: {
                    type: 'string',
                    description: 'Maximum limit which can be set on this card and is the maximum lifetime spend the card can have',
                    examples: ['4000.0'],
                },
                spend: {
                    type: 'string',
                    description: 'Current total of all authorisations on this card',
                    examples: ['250.0'],
                },
                externalRef: {
                    type: 'string',
                    description: 'Client reference for the newly created card. Maximum of 50 characters.',
                    examples: ['TTQ_51211'],
                },
                maskedPan: {
                    type: 'string',
                    description: 'Masked card PAN',
                    examples: ['527095******3544'],
                },
                cardType: { type: 'string', description: 'Card product type', examples: ['Business'] },
                cardScheme: {
                    type: 'string',
                    description: 'Card scheme. MASTERCARD or VISA',
                    examples: ['MASTERCARD'],
                },
                accountBid: { type: 'string', description: 'Account identifier', examples: ['A020N8PD'] },
                format: {
                    type: 'string',
                    description: 'The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`',
                    enum: ['PHYSICAL', 'VIRTUAL'],
                    examples: ['PHYSICAL'],
                },
                constraints: {
                    required: ['mccWhitelist'],
                    type: 'object',
                    properties: {
                        mccWhitelist: {
                            type: 'array',
                            description: 'mccWhitelist',
                            items: {
                                type: 'string',
                                description: 'mccWhitelist',
                                examples: ['["1000","1002-3000","5060"]'],
                            },
                            examples: ['1000', '1002-3000', '5060'],
                        },
                        authorisation: {
                            type: 'object',
                            properties: {
                                spend: {
                                    type: 'array',
                                    description: 'Spending constraints',
                                    items: {
                                        required: ['currency'],
                                        type: 'object',
                                        properties: {
                                            currency: {
                                                type: 'string',
                                                description: 'A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`',
                                                enum: [
                                                    'GBP',
                                                    'EUR',
                                                    'AED',
                                                    'AFN',
                                                    'ALL',
                                                    'AMD',
                                                    'ANG',
                                                    'AOA',
                                                    'ARS',
                                                    'AUD',
                                                    'AWG',
                                                    'AZN',
                                                    'BAM',
                                                    'BBD',
                                                    'BDT',
                                                    'BGN',
                                                    'BHD',
                                                    'BIF',
                                                    'BMD',
                                                    'BND',
                                                    'BOB',
                                                    'BOV',
                                                    'BRL',
                                                    'BSD',
                                                    'BTN',
                                                    'BWP',
                                                    'BYN',
                                                    'BZD',
                                                    'CAD',
                                                    'CDF',
                                                    'CHE',
                                                    'CHF',
                                                    'CHW',
                                                    'CLF',
                                                    'CLP',
                                                    'CNY',
                                                    'COP',
                                                    'COU',
                                                    'CRC',
                                                    'CUC',
                                                    'CUP',
                                                    'CVE',
                                                    'CZK',
                                                    'DJF',
                                                    'DKK',
                                                    'DOP',
                                                    'DZD',
                                                    'EGP',
                                                    'ERN',
                                                    'ETB',
                                                    'FJD',
                                                    'FKP',
                                                    'GEL',
                                                    'GHS',
                                                    'GIP',
                                                    'GMD',
                                                    'GNF',
                                                    'GTQ',
                                                    'GYD',
                                                    'HKD',
                                                    'HNL',
                                                    'HRK',
                                                    'HTG',
                                                    'HUF',
                                                    'IDR',
                                                    'ILS',
                                                    'INR',
                                                    'IQD',
                                                    'IRR',
                                                    'ISK',
                                                    'JMD',
                                                    'JOD',
                                                    'JPY',
                                                    'KES',
                                                    'KGS',
                                                    'KHR',
                                                    'KMF',
                                                    'KPW',
                                                    'KRW',
                                                    'KWD',
                                                    'KYD',
                                                    'KZT',
                                                    'LAK',
                                                    'LBP',
                                                    'LKR',
                                                    'LRD',
                                                    'LSL',
                                                    'LYD',
                                                    'MAD',
                                                    'MDL',
                                                    'MGA',
                                                    'MKD',
                                                    'MMK',
                                                    'MNT',
                                                    'MOP',
                                                    'MRU',
                                                    'MUR',
                                                    'MVR',
                                                    'MWK',
                                                    'MXN',
                                                    'MXV',
                                                    'MYR',
                                                    'MZN',
                                                    'NAD',
                                                    'NGN',
                                                    'NIO',
                                                    'NOK',
                                                    'NPR',
                                                    'NZD',
                                                    'OMR',
                                                    'PAB',
                                                    'PEN',
                                                    'PGK',
                                                    'PHP',
                                                    'PKR',
                                                    'PLN',
                                                    'PYG',
                                                    'QAR',
                                                    'RON',
                                                    'RSD',
                                                    'RUB',
                                                    'RWF',
                                                    'SAR',
                                                    'SBD',
                                                    'SCR',
                                                    'SDG',
                                                    'SEK',
                                                    'SGD',
                                                    'SLE',
                                                    'SLL',
                                                    'SOS',
                                                    'SRD',
                                                    'SSP',
                                                    'STN',
                                                    'SVC',
                                                    'SYP',
                                                    'SZL',
                                                    'SHP',
                                                    'THB',
                                                    'TJS',
                                                    'TMT',
                                                    'TND',
                                                    'TOP',
                                                    'TRY',
                                                    'TTD',
                                                    'TWD',
                                                    'TZS',
                                                    'UAH',
                                                    'UGX',
                                                    'USD',
                                                    'USN',
                                                    'UYI',
                                                    'UYU',
                                                    'UYW',
                                                    'UZS',
                                                    'VES',
                                                    'VND',
                                                    'VUV',
                                                    'WST',
                                                    'XAF',
                                                    'XAG',
                                                    'XAU',
                                                    'XBA',
                                                    'XBB',
                                                    'XBC',
                                                    'XBD',
                                                    'XCD',
                                                    'XDR',
                                                    'XOF',
                                                    'XPD',
                                                    'XPF',
                                                    'XPT',
                                                    'XSU',
                                                    'XTS',
                                                    'XUA',
                                                    'XXX',
                                                    'YER',
                                                    'ZAR',
                                                    'ZMW',
                                                    'ZWL',
                                                ],
                                                examples: ['GBP'],
                                            },
                                            min: {
                                                type: 'number',
                                                description: 'Minimum spend amount (inclusive)',
                                                examples: [5],
                                            },
                                            max: {
                                                type: 'number',
                                                description: 'Maximum spend amount (inclusive)',
                                                examples: [2000],
                                            },
                                        },
                                        description: 'Spending constraints',
                                    },
                                },
                            },
                            description: 'Authorisation constraints',
                        },
                    },
                    description: 'CardConstraints',
                },
                design: {
                    required: ['cardRef', 'packagingRef'],
                    type: 'object',
                    properties: {
                        cardRef: { type: 'string', description: 'Design reference for card' },
                        packagingRef: { type: 'string', description: 'Design reference for card packaging' },
                    },
                    description: 'Design references for physical card and packaging',
                },
                printedName: {
                    type: 'string',
                    description: 'Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)',
                },
                createdDate: { type: 'string', format: 'date-time' },
                threeDSecureStatus: {
                    type: 'string',
                    description: 'The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                    deprecated: true,
                    enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                    examples: ['ENROLLED'],
                },
                authentication: {
                    type: 'object',
                    properties: {
                        otpSmsStatus: {
                            type: 'string',
                            description: 'The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                            enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                            examples: ['ENROLLED'],
                        },
                        knowledgeBaseStatus: {
                            type: 'string',
                            description: 'The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                            enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                            examples: ['ENROLLED'],
                        },
                    },
                    description: 'The 3DS authentication method statuses',
                },
                shippingAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: {
                            maxLength: 50,
                            minLength: 1,
                            type: 'string',
                            description: 'First line of address',
                            examples: ['Floor 10'],
                        },
                        addressLine2: {
                            maxLength: 50,
                            minLength: 0,
                            type: 'string',
                            description: 'Second line of address',
                            examples: ['80 George Street'],
                        },
                        postTown: {
                            maxLength: 20,
                            minLength: 1,
                            type: 'string',
                            description: 'Post town',
                            examples: ['EDINBURGH'],
                        },
                        postCode: {
                            maxLength: 10,
                            minLength: 1,
                            type: 'string',
                            description: 'Postcode',
                            examples: ['EH2 3BU'],
                        },
                        country: {
                            type: 'string',
                            description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                            enum: [
                                'AT',
                                'BE',
                                'BG',
                                'CY',
                                'CZ',
                                'DK',
                                'EE',
                                'FI',
                                'FR',
                                'DE',
                                'GR',
                                'HR',
                                'HU',
                                'IS',
                                'IE',
                                'IT',
                                'LV',
                                'LI',
                                'LT',
                                'LU',
                                'MT',
                                'NL',
                                'NO',
                                'PL',
                                'PT',
                                'RO',
                                'SK',
                                'SI',
                                'ES',
                                'SE',
                                'AX',
                                'AW',
                                'BL',
                                'CW',
                                'GF',
                                'GL',
                                'GP',
                                'ME',
                                'MF',
                                'MQ',
                                'NC',
                                'PF',
                                'PM',
                                'RE',
                                'SX',
                                'TF',
                                'WF',
                                'YT',
                                'AI',
                                'BM',
                                'FK',
                                'GB',
                                'GG',
                                'GI',
                                'GS',
                                'IO',
                                'JE',
                                'KY',
                                'MS',
                                'PN',
                                'SH',
                                'TC',
                                'VG',
                            ],
                            examples: ['GB'],
                        },
                    },
                    description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CardEnquiry = CardEnquiry;
const CloseAccount = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of account to close',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CloseAccount = CloseAccount;
const CreateAccessGroup = {
    body: {
        required: ['accountIds', 'action', 'beneficiaryIds', 'name'],
        type: 'object',
        properties: {
            action: {
                type: 'string',
                description: 'Action to apply for the supplied account bid',
                enum: ['ADD', 'REMOVE'],
            },
            accountIds: {
                type: 'array',
                description: 'Bids of the accounts to be added/removed',
                items: { type: 'string', description: 'Bids of the accounts to be added/removed' },
            },
            beneficiaryIds: {
                type: 'array',
                description: 'Bids of the beneficiaries to be added/removed',
                items: { type: 'string', description: 'Bids of the beneficiaries to be added/removed' },
            },
            name: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w \\-]*',
                type: 'string',
                description: 'The name of the account group to create. Must match: [\\w \\-]*',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            required: ['countOfAccounts', 'id', 'name', 'status', 'type', 'typeId'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique ID for the access group',
                    examples: ['G0000001'],
                },
                name: { type: 'string', description: 'Access group name' },
                type: {
                    type: 'string',
                    description: 'The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`',
                    enum: ['SERVICE_PARTNER', 'SERVICE_CUSTOMER', 'DELEGATE', 'USER_DEFINED'],
                },
                typeId: {
                    type: 'string',
                    description: 'The identifier of the linked entity implied by the type, e.g. the partner ID',
                },
                status: {
                    type: 'string',
                    description: 'Status of the access group\n\n`ACTIVE` `DELETED`',
                    enum: ['ACTIVE', 'DELETED'],
                },
                countOfAccounts: {
                    type: 'integer',
                    description: 'The number of accounts in this group',
                    format: 'int64',
                    deprecated: true,
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
            },
            description: 'AccessGroup',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateAccessGroup = CreateAccessGroup;
const CreateAccount = {
    body: {
        required: ['currency'],
        type: 'object',
        properties: {
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w \\-]*',
                type: 'string',
                description: 'External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long',
            },
            currency: {
                type: 'string',
                enum: [
                    'GBP',
                    'EUR',
                    'AED',
                    'AFN',
                    'ALL',
                    'AMD',
                    'ANG',
                    'AOA',
                    'ARS',
                    'AUD',
                    'AWG',
                    'AZN',
                    'BAM',
                    'BBD',
                    'BDT',
                    'BGN',
                    'BHD',
                    'BIF',
                    'BMD',
                    'BND',
                    'BOB',
                    'BOV',
                    'BRL',
                    'BSD',
                    'BTN',
                    'BWP',
                    'BYN',
                    'BZD',
                    'CAD',
                    'CDF',
                    'CHE',
                    'CHF',
                    'CHW',
                    'CLF',
                    'CLP',
                    'CNY',
                    'COP',
                    'COU',
                    'CRC',
                    'CUC',
                    'CUP',
                    'CVE',
                    'CZK',
                    'DJF',
                    'DKK',
                    'DOP',
                    'DZD',
                    'EGP',
                    'ERN',
                    'ETB',
                    'FJD',
                    'FKP',
                    'GEL',
                    'GHS',
                    'GIP',
                    'GMD',
                    'GNF',
                    'GTQ',
                    'GYD',
                    'HKD',
                    'HNL',
                    'HRK',
                    'HTG',
                    'HUF',
                    'IDR',
                    'ILS',
                    'INR',
                    'IQD',
                    'IRR',
                    'ISK',
                    'JMD',
                    'JOD',
                    'JPY',
                    'KES',
                    'KGS',
                    'KHR',
                    'KMF',
                    'KPW',
                    'KRW',
                    'KWD',
                    'KYD',
                    'KZT',
                    'LAK',
                    'LBP',
                    'LKR',
                    'LRD',
                    'LSL',
                    'LYD',
                    'MAD',
                    'MDL',
                    'MGA',
                    'MKD',
                    'MMK',
                    'MNT',
                    'MOP',
                    'MRU',
                    'MUR',
                    'MVR',
                    'MWK',
                    'MXN',
                    'MXV',
                    'MYR',
                    'MZN',
                    'NAD',
                    'NGN',
                    'NIO',
                    'NOK',
                    'NPR',
                    'NZD',
                    'OMR',
                    'PAB',
                    'PEN',
                    'PGK',
                    'PHP',
                    'PKR',
                    'PLN',
                    'PYG',
                    'QAR',
                    'RON',
                    'RSD',
                    'RUB',
                    'RWF',
                    'SAR',
                    'SBD',
                    'SCR',
                    'SDG',
                    'SEK',
                    'SGD',
                    'SLE',
                    'SLL',
                    'SOS',
                    'SRD',
                    'SSP',
                    'STN',
                    'SVC',
                    'SYP',
                    'SZL',
                    'SHP',
                    'THB',
                    'TJS',
                    'TMT',
                    'TND',
                    'TOP',
                    'TRY',
                    'TTD',
                    'TWD',
                    'TZS',
                    'UAH',
                    'UGX',
                    'USD',
                    'USN',
                    'UYI',
                    'UYU',
                    'UYW',
                    'UZS',
                    'VES',
                    'VND',
                    'VUV',
                    'WST',
                    'XAF',
                    'XAG',
                    'XAU',
                    'XBA',
                    'XBB',
                    'XBC',
                    'XBD',
                    'XCD',
                    'XDR',
                    'XOF',
                    'XPD',
                    'XPF',
                    'XPT',
                    'XSU',
                    'XTS',
                    'XUA',
                    'XXX',
                    'YER',
                    'ZAR',
                    'ZMW',
                    'ZWL',
                ],
            },
            productCode: {
                type: 'string',
                description: 'Product associated with the account. Contact your account manager for correct code to use.',
            },
            identifier: {
                required: ['accountNumber', 'sortCode', 'type'],
                type: 'object',
                properties: {
                    type: { type: 'string', enum: ['SCAN'] },
                    sortCode: { pattern: '^\\d{6}$', type: 'string' },
                    accountNumber: { pattern: '^\\d{8}$', type: 'string' },
                },
                description: 'The identifier to assign to the account. Only available to selected partners.',
            },
        },
        description: 'Details of account to create',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of customer to create account for',
                    },
                },
                required: ['customerId'],
            },
        ],
    },
    response: {
        '201': {
            required: [
                'availableBalance',
                'balance',
                'createdDate',
                'currency',
                'customerId',
                'id',
                'identifiers',
                'name',
                'status',
            ],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique id for the account', examples: ['A0000001'] },
                name: { type: 'string', description: 'Name for the account' },
                balance: {
                    type: 'string',
                    description: "Balance of the account in format 'NN.NN'",
                    examples: ['10000.0'],
                },
                availableBalance: {
                    type: 'string',
                    description: 'The current available balance of the Account. Calculated by subtracting any pending payments from the current balance',
                    examples: ['10000.0'],
                },
                currency: {
                    type: 'string',
                    description: 'Currency of the account in ISO 4217 format',
                    examples: ['GBP'],
                },
                status: {
                    type: 'string',
                    description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`",
                    enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                    examples: ['ACTIVE'],
                },
                identifiers: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                description: '`SCAN` `IBAN` `DD` `INTL`',
                            },
                            accountNumber: {
                                type: 'string',
                                description: 'Bank account Sort Code',
                                examples: ['12345678'],
                            },
                            sortCode: {
                                type: 'string',
                                description: 'Bank account Sort Code',
                                examples: ['000000'],
                            },
                            iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                            bic: { type: 'string', examples: ['MODRGB21'] },
                            currency: { type: 'string', examples: ['GBP'] },
                            countrySpecificDetails: {
                                type: 'object',
                                properties: {
                                    bankName: {
                                        type: 'string',
                                        description: 'The name of the destination bank.',
                                        examples: ['Apple Bank'],
                                    },
                                    bankAddress: {
                                        type: 'string',
                                        description: 'The address of the destination bank.',
                                        examples: ['2100 Broadway'],
                                    },
                                    bankCity: {
                                        type: 'string',
                                        description: 'The city in which the destination bank resides.',
                                        examples: ['New York City'],
                                    },
                                    bankBranchName: {
                                        type: 'string',
                                        description: "The name of the destination bank's branch.",
                                        examples: ['New York'],
                                    },
                                    bankBranchCode: {
                                        type: 'string',
                                        description: "The code of the destination bank's branch.",
                                        examples: ['44-04'],
                                    },
                                    bankCode: {
                                        type: 'string',
                                        description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                    },
                                    chineseId: {
                                        type: 'string',
                                        description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                        examples: ['01101201901018889'],
                                    },
                                    province: {
                                        type: 'string',
                                        description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                        examples: ['Zhejiang'],
                                    },
                                    business: {
                                        type: 'boolean',
                                        description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                        examples: [true],
                                    },
                                    bankCodeType: {
                                        type: 'string',
                                        description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                        enum: ['ABA', 'CHIPS'],
                                        examples: ['ABA'],
                                    },
                                    bankCountry: {
                                        type: 'string',
                                        description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                        enum: [
                                            'AT',
                                            'BE',
                                            'BG',
                                            'CY',
                                            'CZ',
                                            'DK',
                                            'EE',
                                            'FI',
                                            'FR',
                                            'DE',
                                            'GR',
                                            'HR',
                                            'HU',
                                            'IS',
                                            'IE',
                                            'IT',
                                            'LV',
                                            'LI',
                                            'LT',
                                            'LU',
                                            'MT',
                                            'NL',
                                            'NO',
                                            'PL',
                                            'PT',
                                            'RO',
                                            'SK',
                                            'SI',
                                            'ES',
                                            'SE',
                                            'GB',
                                            'MQ',
                                            'YT',
                                            'GP',
                                            'GF',
                                            'RE',
                                            'MF',
                                            'GI',
                                            'GG',
                                            'IM',
                                            'JE',
                                            'MC',
                                            'CH',
                                            'AD',
                                            'SM',
                                            'VA',
                                            'AX',
                                            'PM',
                                            'BL',
                                            'AF',
                                            'AL',
                                            'DZ',
                                            'AS',
                                            'AO',
                                            'AI',
                                            'AQ',
                                            'AG',
                                            'AR',
                                            'AM',
                                            'AW',
                                            'AU',
                                            'AZ',
                                            'BS',
                                            'BH',
                                            'BD',
                                            'BB',
                                            'BY',
                                            'BZ',
                                            'BJ',
                                            'BM',
                                            'BT',
                                            'BO',
                                            'BQ',
                                            'BA',
                                            'BW',
                                            'BV',
                                            'BR',
                                            'IO',
                                            'VG',
                                            'BN',
                                            'BF',
                                            'BI',
                                            'KH',
                                            'CM',
                                            'CA',
                                            'CV',
                                            'KY',
                                            'CF',
                                            'TD',
                                            'CL',
                                            'CN',
                                            'CX',
                                            'CC',
                                            'CO',
                                            'KM',
                                            'CK',
                                            'CR',
                                            'CU',
                                            'CW',
                                            'CD',
                                            'DJ',
                                            'DM',
                                            'DO',
                                            'TL',
                                            'EC',
                                            'EG',
                                            'SV',
                                            'GQ',
                                            'ER',
                                            'SZ',
                                            'ET',
                                            'FK',
                                            'FO',
                                            'FJ',
                                            'PF',
                                            'TF',
                                            'GA',
                                            'GM',
                                            'GE',
                                            'GH',
                                            'GL',
                                            'GD',
                                            'GU',
                                            'GT',
                                            'GN',
                                            'GW',
                                            'GY',
                                            'HT',
                                            'HM',
                                            'HN',
                                            'HK',
                                            'IN',
                                            'ID',
                                            'IR',
                                            'IQ',
                                            'IL',
                                            'CI',
                                            'JM',
                                            'JP',
                                            'JO',
                                            'KZ',
                                            'KE',
                                            'KI',
                                            'XK',
                                            'KW',
                                            'KG',
                                            'LA',
                                            'LB',
                                            'LS',
                                            'LR',
                                            'LY',
                                            'MO',
                                            'MG',
                                            'MW',
                                            'MY',
                                            'MV',
                                            'ML',
                                            'MH',
                                            'MR',
                                            'MU',
                                            'MX',
                                            'FM',
                                            'MD',
                                            'MN',
                                            'ME',
                                            'MS',
                                            'MA',
                                            'MZ',
                                            'MM',
                                            'NA',
                                            'NR',
                                            'NP',
                                            'AN',
                                            'NC',
                                            'NZ',
                                            'NI',
                                            'NE',
                                            'NG',
                                            'NU',
                                            'NF',
                                            'KP',
                                            'MK',
                                            'MP',
                                            'OM',
                                            'PK',
                                            'PW',
                                            'PS',
                                            'PA',
                                            'PG',
                                            'PY',
                                            'PE',
                                            'PH',
                                            'PN',
                                            'PR',
                                            'QA',
                                            'CG',
                                            'RU',
                                            'RW',
                                            'SH',
                                            'KN',
                                            'LC',
                                            'VC',
                                            'WS',
                                            'ST',
                                            'SA',
                                            'SN',
                                            'RS',
                                            'SC',
                                            'SL',
                                            'SG',
                                            'SX',
                                            'SB',
                                            'SO',
                                            'ZA',
                                            'KR',
                                            'GS',
                                            'SS',
                                            'LK',
                                            'SD',
                                            'SR',
                                            'SY',
                                            'SJ',
                                            'TW',
                                            'TJ',
                                            'TZ',
                                            'TH',
                                            'TG',
                                            'TK',
                                            'TO',
                                            'TT',
                                            'TN',
                                            'TR',
                                            'TM',
                                            'TC',
                                            'TV',
                                            'UG',
                                            'UA',
                                            'AE',
                                            'UM',
                                            'US',
                                            'UY',
                                            'UZ',
                                            'VU',
                                            'VE',
                                            'VN',
                                            'VI',
                                            'WF',
                                            'EH',
                                            'YE',
                                            'ZM',
                                            'ZW',
                                        ],
                                        examples: ['US'],
                                    },
                                },
                            },
                        },
                        description: 'Account Identifier',
                    },
                },
                customerId: {
                    type: 'string',
                    description: 'Unique id of the Customer',
                    examples: ['C0000001'],
                },
                customerName: { type: 'string', description: 'Customer Name' },
                externalReference: {
                    type: 'string',
                    description: 'Your reference for an account',
                    examples: ['aReference_00001'],
                },
                accessGroups: {
                    type: 'array',
                    description: 'Ids of Access Groups this account belongs to',
                    items: { type: 'string', description: 'Ids of Access Groups this account belongs to' },
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                directDebit: { type: 'boolean', description: 'Direct Debit Enabled' },
                securedFundingLimit: {
                    type: 'string',
                    description: 'Limit of funds available below a balance of zero',
                },
            },
            description: 'Account',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateAccount = CreateAccount;
const CreateAuthorisation = {
    body: {
        required: ['mcc', 'transactionAmount'],
        type: 'object',
        properties: {
            transactionAmount: {
                type: 'number',
                description: 'The transaction amount',
                examples: [5.45],
            },
            transactionCurrency: {
                type: 'string',
                description: "The transaction currency. Defaults to the card's billing currency",
                enum: [
                    'GBP',
                    'EUR',
                    'AED',
                    'AFN',
                    'ALL',
                    'AMD',
                    'ANG',
                    'AOA',
                    'ARS',
                    'AUD',
                    'AWG',
                    'AZN',
                    'BAM',
                    'BBD',
                    'BDT',
                    'BGN',
                    'BHD',
                    'BIF',
                    'BMD',
                    'BND',
                    'BOB',
                    'BOV',
                    'BRL',
                    'BSD',
                    'BTN',
                    'BWP',
                    'BYN',
                    'BZD',
                    'CAD',
                    'CDF',
                    'CHE',
                    'CHF',
                    'CHW',
                    'CLF',
                    'CLP',
                    'CNY',
                    'COP',
                    'COU',
                    'CRC',
                    'CUC',
                    'CUP',
                    'CVE',
                    'CZK',
                    'DJF',
                    'DKK',
                    'DOP',
                    'DZD',
                    'EGP',
                    'ERN',
                    'ETB',
                    'FJD',
                    'FKP',
                    'GEL',
                    'GHS',
                    'GIP',
                    'GMD',
                    'GNF',
                    'GTQ',
                    'GYD',
                    'HKD',
                    'HNL',
                    'HRK',
                    'HTG',
                    'HUF',
                    'IDR',
                    'ILS',
                    'INR',
                    'IQD',
                    'IRR',
                    'ISK',
                    'JMD',
                    'JOD',
                    'JPY',
                    'KES',
                    'KGS',
                    'KHR',
                    'KMF',
                    'KPW',
                    'KRW',
                    'KWD',
                    'KYD',
                    'KZT',
                    'LAK',
                    'LBP',
                    'LKR',
                    'LRD',
                    'LSL',
                    'LYD',
                    'MAD',
                    'MDL',
                    'MGA',
                    'MKD',
                    'MMK',
                    'MNT',
                    'MOP',
                    'MRU',
                    'MUR',
                    'MVR',
                    'MWK',
                    'MXN',
                    'MXV',
                    'MYR',
                    'MZN',
                    'NAD',
                    'NGN',
                    'NIO',
                    'NOK',
                    'NPR',
                    'NZD',
                    'OMR',
                    'PAB',
                    'PEN',
                    'PGK',
                    'PHP',
                    'PKR',
                    'PLN',
                    'PYG',
                    'QAR',
                    'RON',
                    'RSD',
                    'RUB',
                    'RWF',
                    'SAR',
                    'SBD',
                    'SCR',
                    'SDG',
                    'SEK',
                    'SGD',
                    'SLE',
                    'SLL',
                    'SOS',
                    'SRD',
                    'SSP',
                    'STN',
                    'SVC',
                    'SYP',
                    'SZL',
                    'SHP',
                    'THB',
                    'TJS',
                    'TMT',
                    'TND',
                    'TOP',
                    'TRY',
                    'TTD',
                    'TWD',
                    'TZS',
                    'UAH',
                    'UGX',
                    'USD',
                    'USN',
                    'UYI',
                    'UYU',
                    'UYW',
                    'UZS',
                    'VES',
                    'VND',
                    'VUV',
                    'WST',
                    'XAF',
                    'XAG',
                    'XAU',
                    'XBA',
                    'XBB',
                    'XBC',
                    'XBD',
                    'XCD',
                    'XDR',
                    'XOF',
                    'XPD',
                    'XPF',
                    'XPT',
                    'XSU',
                    'XTS',
                    'XUA',
                    'XXX',
                    'YER',
                    'ZAR',
                    'ZMW',
                    'ZWL',
                ],
                examples: ['GBP'],
            },
            fxRate: {
                type: 'number',
                description: 'The foreign exchange rate to use, when transaction currency differs from billing currency. Defaults to 1.0',
                examples: [0.8],
            },
            mcc: { type: 'string', description: 'Merchant Category Code', examples: ['5812'] },
        },
        description: 'Details of the authorisation to create',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    cardId: {
                        type: 'string',
                        examples: ['V000000001'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Card ID to create an authorisation for this card',
                    },
                },
                required: ['cardId'],
            },
        ],
    },
    response: {
        '201': {
            required: [
                'authorisationId',
                'billingAmount',
                'billingCurrency',
                'cardId',
                'fxRate',
                'mcc',
                'status',
                'transactionAmount',
                'transactionCurrency',
            ],
            type: 'object',
            properties: {
                authorisationId: {
                    type: 'string',
                    description: 'Authorisation Id',
                    examples: ['A00000000X'],
                },
                cardId: { type: 'string', description: 'Card Id', examples: ['V000000001'] },
                status: {
                    type: 'string',
                    description: 'Authorisation Status [APPROVED, REVERSED, SETTLED]\n\n`APPROVED` `REVERSED` `SETTLED`',
                    enum: ['APPROVED', 'REVERSED', 'SETTLED'],
                    examples: ['APPROVED'],
                },
                transactionAmount: {
                    type: 'number',
                    description: 'Authorisation Transaction Amount',
                    examples: [100],
                },
                transactionCurrency: {
                    type: 'string',
                    description: 'Currency for this transaction\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`',
                    enum: [
                        'GBP',
                        'EUR',
                        'AED',
                        'AFN',
                        'ALL',
                        'AMD',
                        'ANG',
                        'AOA',
                        'ARS',
                        'AUD',
                        'AWG',
                        'AZN',
                        'BAM',
                        'BBD',
                        'BDT',
                        'BGN',
                        'BHD',
                        'BIF',
                        'BMD',
                        'BND',
                        'BOB',
                        'BOV',
                        'BRL',
                        'BSD',
                        'BTN',
                        'BWP',
                        'BYN',
                        'BZD',
                        'CAD',
                        'CDF',
                        'CHE',
                        'CHF',
                        'CHW',
                        'CLF',
                        'CLP',
                        'CNY',
                        'COP',
                        'COU',
                        'CRC',
                        'CUC',
                        'CUP',
                        'CVE',
                        'CZK',
                        'DJF',
                        'DKK',
                        'DOP',
                        'DZD',
                        'EGP',
                        'ERN',
                        'ETB',
                        'FJD',
                        'FKP',
                        'GEL',
                        'GHS',
                        'GIP',
                        'GMD',
                        'GNF',
                        'GTQ',
                        'GYD',
                        'HKD',
                        'HNL',
                        'HRK',
                        'HTG',
                        'HUF',
                        'IDR',
                        'ILS',
                        'INR',
                        'IQD',
                        'IRR',
                        'ISK',
                        'JMD',
                        'JOD',
                        'JPY',
                        'KES',
                        'KGS',
                        'KHR',
                        'KMF',
                        'KPW',
                        'KRW',
                        'KWD',
                        'KYD',
                        'KZT',
                        'LAK',
                        'LBP',
                        'LKR',
                        'LRD',
                        'LSL',
                        'LYD',
                        'MAD',
                        'MDL',
                        'MGA',
                        'MKD',
                        'MMK',
                        'MNT',
                        'MOP',
                        'MRU',
                        'MUR',
                        'MVR',
                        'MWK',
                        'MXN',
                        'MXV',
                        'MYR',
                        'MZN',
                        'NAD',
                        'NGN',
                        'NIO',
                        'NOK',
                        'NPR',
                        'NZD',
                        'OMR',
                        'PAB',
                        'PEN',
                        'PGK',
                        'PHP',
                        'PKR',
                        'PLN',
                        'PYG',
                        'QAR',
                        'RON',
                        'RSD',
                        'RUB',
                        'RWF',
                        'SAR',
                        'SBD',
                        'SCR',
                        'SDG',
                        'SEK',
                        'SGD',
                        'SLE',
                        'SLL',
                        'SOS',
                        'SRD',
                        'SSP',
                        'STN',
                        'SVC',
                        'SYP',
                        'SZL',
                        'SHP',
                        'THB',
                        'TJS',
                        'TMT',
                        'TND',
                        'TOP',
                        'TRY',
                        'TTD',
                        'TWD',
                        'TZS',
                        'UAH',
                        'UGX',
                        'USD',
                        'USN',
                        'UYI',
                        'UYU',
                        'UYW',
                        'UZS',
                        'VES',
                        'VND',
                        'VUV',
                        'WST',
                        'XAF',
                        'XAG',
                        'XAU',
                        'XBA',
                        'XBB',
                        'XBC',
                        'XBD',
                        'XCD',
                        'XDR',
                        'XOF',
                        'XPD',
                        'XPF',
                        'XPT',
                        'XSU',
                        'XTS',
                        'XUA',
                        'XXX',
                        'YER',
                        'ZAR',
                        'ZMW',
                        'ZWL',
                    ],
                    examples: ['EUR'],
                },
                billingAmount: {
                    type: 'number',
                    description: 'Authorisation billing amount',
                    examples: [80],
                },
                billingCurrency: {
                    type: 'string',
                    description: 'Currency of the card\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`',
                    enum: [
                        'GBP',
                        'EUR',
                        'AED',
                        'AFN',
                        'ALL',
                        'AMD',
                        'ANG',
                        'AOA',
                        'ARS',
                        'AUD',
                        'AWG',
                        'AZN',
                        'BAM',
                        'BBD',
                        'BDT',
                        'BGN',
                        'BHD',
                        'BIF',
                        'BMD',
                        'BND',
                        'BOB',
                        'BOV',
                        'BRL',
                        'BSD',
                        'BTN',
                        'BWP',
                        'BYN',
                        'BZD',
                        'CAD',
                        'CDF',
                        'CHE',
                        'CHF',
                        'CHW',
                        'CLF',
                        'CLP',
                        'CNY',
                        'COP',
                        'COU',
                        'CRC',
                        'CUC',
                        'CUP',
                        'CVE',
                        'CZK',
                        'DJF',
                        'DKK',
                        'DOP',
                        'DZD',
                        'EGP',
                        'ERN',
                        'ETB',
                        'FJD',
                        'FKP',
                        'GEL',
                        'GHS',
                        'GIP',
                        'GMD',
                        'GNF',
                        'GTQ',
                        'GYD',
                        'HKD',
                        'HNL',
                        'HRK',
                        'HTG',
                        'HUF',
                        'IDR',
                        'ILS',
                        'INR',
                        'IQD',
                        'IRR',
                        'ISK',
                        'JMD',
                        'JOD',
                        'JPY',
                        'KES',
                        'KGS',
                        'KHR',
                        'KMF',
                        'KPW',
                        'KRW',
                        'KWD',
                        'KYD',
                        'KZT',
                        'LAK',
                        'LBP',
                        'LKR',
                        'LRD',
                        'LSL',
                        'LYD',
                        'MAD',
                        'MDL',
                        'MGA',
                        'MKD',
                        'MMK',
                        'MNT',
                        'MOP',
                        'MRU',
                        'MUR',
                        'MVR',
                        'MWK',
                        'MXN',
                        'MXV',
                        'MYR',
                        'MZN',
                        'NAD',
                        'NGN',
                        'NIO',
                        'NOK',
                        'NPR',
                        'NZD',
                        'OMR',
                        'PAB',
                        'PEN',
                        'PGK',
                        'PHP',
                        'PKR',
                        'PLN',
                        'PYG',
                        'QAR',
                        'RON',
                        'RSD',
                        'RUB',
                        'RWF',
                        'SAR',
                        'SBD',
                        'SCR',
                        'SDG',
                        'SEK',
                        'SGD',
                        'SLE',
                        'SLL',
                        'SOS',
                        'SRD',
                        'SSP',
                        'STN',
                        'SVC',
                        'SYP',
                        'SZL',
                        'SHP',
                        'THB',
                        'TJS',
                        'TMT',
                        'TND',
                        'TOP',
                        'TRY',
                        'TTD',
                        'TWD',
                        'TZS',
                        'UAH',
                        'UGX',
                        'USD',
                        'USN',
                        'UYI',
                        'UYU',
                        'UYW',
                        'UZS',
                        'VES',
                        'VND',
                        'VUV',
                        'WST',
                        'XAF',
                        'XAG',
                        'XAU',
                        'XBA',
                        'XBB',
                        'XBC',
                        'XBD',
                        'XCD',
                        'XDR',
                        'XOF',
                        'XPD',
                        'XPF',
                        'XPT',
                        'XSU',
                        'XTS',
                        'XUA',
                        'XXX',
                        'YER',
                        'ZAR',
                        'ZMW',
                        'ZWL',
                    ],
                    examples: ['GBP'],
                },
                fxRate: {
                    type: 'number',
                    description: 'Foreign exchange rate used between transaction and billing currencies',
                    examples: [0.8],
                },
                mcc: { type: 'string', description: 'Merchant Category Code', examples: ['5812'] },
            },
            description: 'CardAuthorisationResponse',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateAuthorisation = CreateAuthorisation;
const CreateBeneficiary = {
    body: {
        required: ['defaultReference', 'destinationIdentifier', 'name'],
        type: 'object',
        properties: {
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w \\-]*',
                type: 'string',
                description: 'External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long',
            },
            name: {
                maxLength: 100,
                minLength: 0,
                pattern: "^([^\\p{L}0-9]*?[\\p{L}0-9]){1,}['\\.\\-\\/&\\s]*",
                type: 'string',
            },
            birthdate: {
                type: 'string',
                description: "The destination beneficiary's date of birth. Date in yyyy-MM-dd format",
                format: 'date',
            },
            emailAddress: { type: 'string', description: "The destination beneficiary's email address" },
            phoneNumber: {
                type: 'string',
                description: "The destination beneficiary's phone number, will be formatted into international number pattern",
            },
            destinationIdentifier: {
                type: 'object',
                properties: {
                    type: { type: 'string', enum: ['SCAN', 'IBAN', 'DD', 'INTL'] },
                    accountNumber: { type: 'string', examples: ['12345678'] },
                    sortCode: { pattern: '^\\d{6}', type: 'string', examples: ['000000'] },
                    iban: {
                        pattern: '[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{4}([a-zA-Z0-9]?){0,26}',
                        type: 'string',
                        examples: ['GB20MODR00000000000001'],
                    },
                    bic: {
                        pattern: '([a-zA-Z]{6,6}[a-zA-Z2-9][a-nA-Np-zP-Z0-9]([a-zA-Z0-9]{3})?)',
                        type: 'string',
                        examples: ['MODRGB21'],
                    },
                    currency: { pattern: '[a-zA-Z]{3}', type: 'string', examples: ['GBP'] },
                    countrySpecificDetails: {
                        type: 'object',
                        properties: {
                            bankName: {
                                maxLength: 140,
                                minLength: 0,
                                type: 'string',
                                description: 'The name of the destination bank.',
                                examples: ['Apple Bank'],
                            },
                            bankAddress: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'The address of the destination bank.',
                                examples: ['2100 Broadway'],
                            },
                            bankCity: {
                                maxLength: 35,
                                minLength: 0,
                                type: 'string',
                                description: 'The city in which the destination bank resides.',
                                examples: ['New York City'],
                            },
                            bankBranchName: {
                                type: 'string',
                                description: "The name of the destination bank's branch.",
                                examples: ['New York'],
                            },
                            bankBranchCode: {
                                maxLength: 35,
                                minLength: 0,
                                type: 'string',
                                description: "The code of the destination bank's branch.",
                                examples: ['44-04'],
                            },
                            bankCode: {
                                maxLength: 35,
                                minLength: 0,
                                type: 'string',
                                description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                            },
                            chineseId: {
                                type: 'string',
                                description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                examples: ['01101201901018889'],
                            },
                            province: {
                                type: 'string',
                                description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                examples: ['Zhejiang'],
                            },
                            business: {
                                type: 'boolean',
                                description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                examples: [true],
                            },
                            bankCodeType: {
                                type: 'string',
                                description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                enum: ['ABA', 'CHIPS'],
                                examples: ['ABA'],
                            },
                            bankCountry: {
                                type: 'string',
                                description: 'The country in which the destination bank resides.',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'GB',
                                    'MQ',
                                    'YT',
                                    'GP',
                                    'GF',
                                    'RE',
                                    'MF',
                                    'GI',
                                    'GG',
                                    'IM',
                                    'JE',
                                    'MC',
                                    'CH',
                                    'AD',
                                    'SM',
                                    'VA',
                                    'AX',
                                    'PM',
                                    'BL',
                                    'AF',
                                    'AL',
                                    'DZ',
                                    'AS',
                                    'AO',
                                    'AI',
                                    'AQ',
                                    'AG',
                                    'AR',
                                    'AM',
                                    'AW',
                                    'AU',
                                    'AZ',
                                    'BS',
                                    'BH',
                                    'BD',
                                    'BB',
                                    'BY',
                                    'BZ',
                                    'BJ',
                                    'BM',
                                    'BT',
                                    'BO',
                                    'BQ',
                                    'BA',
                                    'BW',
                                    'BV',
                                    'BR',
                                    'IO',
                                    'VG',
                                    'BN',
                                    'BF',
                                    'BI',
                                    'KH',
                                    'CM',
                                    'CA',
                                    'CV',
                                    'KY',
                                    'CF',
                                    'TD',
                                    'CL',
                                    'CN',
                                    'CX',
                                    'CC',
                                    'CO',
                                    'KM',
                                    'CK',
                                    'CR',
                                    'CU',
                                    'CW',
                                    'CD',
                                    'DJ',
                                    'DM',
                                    'DO',
                                    'TL',
                                    'EC',
                                    'EG',
                                    'SV',
                                    'GQ',
                                    'ER',
                                    'SZ',
                                    'ET',
                                    'FK',
                                    'FO',
                                    'FJ',
                                    'PF',
                                    'TF',
                                    'GA',
                                    'GM',
                                    'GE',
                                    'GH',
                                    'GL',
                                    'GD',
                                    'GU',
                                    'GT',
                                    'GN',
                                    'GW',
                                    'GY',
                                    'HT',
                                    'HM',
                                    'HN',
                                    'HK',
                                    'IN',
                                    'ID',
                                    'IR',
                                    'IQ',
                                    'IL',
                                    'CI',
                                    'JM',
                                    'JP',
                                    'JO',
                                    'KZ',
                                    'KE',
                                    'KI',
                                    'XK',
                                    'KW',
                                    'KG',
                                    'LA',
                                    'LB',
                                    'LS',
                                    'LR',
                                    'LY',
                                    'MO',
                                    'MG',
                                    'MW',
                                    'MY',
                                    'MV',
                                    'ML',
                                    'MH',
                                    'MR',
                                    'MU',
                                    'MX',
                                    'FM',
                                    'MD',
                                    'MN',
                                    'ME',
                                    'MS',
                                    'MA',
                                    'MZ',
                                    'MM',
                                    'NA',
                                    'NR',
                                    'NP',
                                    'AN',
                                    'NC',
                                    'NZ',
                                    'NI',
                                    'NE',
                                    'NG',
                                    'NU',
                                    'NF',
                                    'KP',
                                    'MK',
                                    'MP',
                                    'OM',
                                    'PK',
                                    'PW',
                                    'PS',
                                    'PA',
                                    'PG',
                                    'PY',
                                    'PE',
                                    'PH',
                                    'PN',
                                    'PR',
                                    'QA',
                                    'CG',
                                    'RU',
                                    'RW',
                                    'SH',
                                    'KN',
                                    'LC',
                                    'VC',
                                    'WS',
                                    'ST',
                                    'SA',
                                    'SN',
                                    'RS',
                                    'SC',
                                    'SL',
                                    'SG',
                                    'SX',
                                    'SB',
                                    'SO',
                                    'ZA',
                                    'KR',
                                    'GS',
                                    'SS',
                                    'LK',
                                    'SD',
                                    'SR',
                                    'SY',
                                    'SJ',
                                    'TW',
                                    'TJ',
                                    'TZ',
                                    'TH',
                                    'TG',
                                    'TK',
                                    'TO',
                                    'TT',
                                    'TN',
                                    'TR',
                                    'TM',
                                    'TC',
                                    'TV',
                                    'UG',
                                    'UA',
                                    'AE',
                                    'UM',
                                    'US',
                                    'UY',
                                    'UZ',
                                    'VU',
                                    'VE',
                                    'VN',
                                    'VI',
                                    'WF',
                                    'EH',
                                    'YE',
                                    'ZM',
                                    'ZW',
                                ],
                                examples: ['US'],
                            },
                        },
                    },
                },
            },
            defaultReference: { type: 'string' },
            idToReplace: { type: 'string' },
            address: {
                required: ['addressLine1', 'postTown'],
                type: 'object',
                properties: {
                    addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                    addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                    postTown: { maxLength: 50, minLength: 0, type: 'string' },
                    postCode: { maxLength: 10, type: 'string' },
                    country: {
                        type: 'string',
                        enum: [
                            'AT',
                            'BE',
                            'BG',
                            'CY',
                            'CZ',
                            'DK',
                            'EE',
                            'FI',
                            'FR',
                            'DE',
                            'GR',
                            'HR',
                            'HU',
                            'IS',
                            'IE',
                            'IT',
                            'LV',
                            'LI',
                            'LT',
                            'LU',
                            'MT',
                            'NL',
                            'NO',
                            'PL',
                            'PT',
                            'RO',
                            'SK',
                            'SI',
                            'ES',
                            'SE',
                            'GB',
                            'MQ',
                            'YT',
                            'GP',
                            'GF',
                            'RE',
                            'MF',
                            'GI',
                            'GG',
                            'IM',
                            'JE',
                            'MC',
                            'CH',
                            'AD',
                            'SM',
                            'VA',
                            'AX',
                            'PM',
                            'BL',
                            'AF',
                            'AL',
                            'DZ',
                            'AS',
                            'AO',
                            'AI',
                            'AQ',
                            'AG',
                            'AR',
                            'AM',
                            'AW',
                            'AU',
                            'AZ',
                            'BS',
                            'BH',
                            'BD',
                            'BB',
                            'BY',
                            'BZ',
                            'BJ',
                            'BM',
                            'BT',
                            'BO',
                            'BQ',
                            'BA',
                            'BW',
                            'BV',
                            'BR',
                            'IO',
                            'VG',
                            'BN',
                            'BF',
                            'BI',
                            'KH',
                            'CM',
                            'CA',
                            'CV',
                            'KY',
                            'CF',
                            'TD',
                            'CL',
                            'CN',
                            'CX',
                            'CC',
                            'CO',
                            'KM',
                            'CK',
                            'CR',
                            'CU',
                            'CW',
                            'CD',
                            'DJ',
                            'DM',
                            'DO',
                            'TL',
                            'EC',
                            'EG',
                            'SV',
                            'GQ',
                            'ER',
                            'SZ',
                            'ET',
                            'FK',
                            'FO',
                            'FJ',
                            'PF',
                            'TF',
                            'GA',
                            'GM',
                            'GE',
                            'GH',
                            'GL',
                            'GD',
                            'GU',
                            'GT',
                            'GN',
                            'GW',
                            'GY',
                            'HT',
                            'HM',
                            'HN',
                            'HK',
                            'IN',
                            'ID',
                            'IR',
                            'IQ',
                            'IL',
                            'CI',
                            'JM',
                            'JP',
                            'JO',
                            'KZ',
                            'KE',
                            'KI',
                            'XK',
                            'KW',
                            'KG',
                            'LA',
                            'LB',
                            'LS',
                            'LR',
                            'LY',
                            'MO',
                            'MG',
                            'MW',
                            'MY',
                            'MV',
                            'ML',
                            'MH',
                            'MR',
                            'MU',
                            'MX',
                            'FM',
                            'MD',
                            'MN',
                            'ME',
                            'MS',
                            'MA',
                            'MZ',
                            'MM',
                            'NA',
                            'NR',
                            'NP',
                            'AN',
                            'NC',
                            'NZ',
                            'NI',
                            'NE',
                            'NG',
                            'NU',
                            'NF',
                            'KP',
                            'MK',
                            'MP',
                            'OM',
                            'PK',
                            'PW',
                            'PS',
                            'PA',
                            'PG',
                            'PY',
                            'PE',
                            'PH',
                            'PN',
                            'PR',
                            'QA',
                            'CG',
                            'RU',
                            'RW',
                            'SH',
                            'KN',
                            'LC',
                            'VC',
                            'WS',
                            'ST',
                            'SA',
                            'SN',
                            'RS',
                            'SC',
                            'SL',
                            'SG',
                            'SX',
                            'SB',
                            'SO',
                            'ZA',
                            'KR',
                            'GS',
                            'SS',
                            'LK',
                            'SD',
                            'SR',
                            'SY',
                            'SJ',
                            'TW',
                            'TJ',
                            'TZ',
                            'TH',
                            'TG',
                            'TK',
                            'TO',
                            'TT',
                            'TN',
                            'TR',
                            'TM',
                            'TC',
                            'TV',
                            'UG',
                            'UA',
                            'AE',
                            'UM',
                            'US',
                            'UY',
                            'UZ',
                            'VU',
                            'VE',
                            'VN',
                            'VI',
                            'WF',
                            'EH',
                            'YE',
                            'ZM',
                            'ZW',
                        ],
                    },
                    countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                },
                description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'",
            },
            qualifier: {
                maxLength: 100,
                minLength: 0,
                type: 'string',
                description: 'Optional qualifier. Only to be supplied if multiple beneficiaries with same destination need to be supplied',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of customer to create beneficiary for',
                    },
                },
                required: ['customerId'],
            },
        ],
    },
    response: {
        '201': {
            required: [
                'created',
                'customerId',
                'defaultReference',
                'destinationIdentifier',
                'id',
                'name',
                'status',
                'updated',
            ],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique reference for the Beneficiary.',
                    examples: ['B00000001A'],
                },
                name: { type: 'string', description: 'Name for the Beneficiary' },
                birthdate: {
                    type: 'string',
                    description: 'Date of birth for the Beneficiary in yyyy-MM-dd format',
                    format: 'date',
                },
                emailAddress: { type: 'string', description: 'Email address for the Beneficiary' },
                phoneNumber: {
                    type: 'string',
                    description: 'Phone number for the Beneficiary in international pattern',
                },
                destinationIdentifier: {
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                            description: '`SCAN` `IBAN` `DD` `INTL`',
                        },
                        accountNumber: {
                            type: 'string',
                            description: 'Bank account Sort Code',
                            examples: ['12345678'],
                        },
                        sortCode: {
                            type: 'string',
                            description: 'Bank account Sort Code',
                            examples: ['000000'],
                        },
                        iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                        bic: { type: 'string', examples: ['MODRGB21'] },
                        currency: { type: 'string', examples: ['GBP'] },
                        countrySpecificDetails: {
                            type: 'object',
                            properties: {
                                bankName: {
                                    type: 'string',
                                    description: 'The name of the destination bank.',
                                    examples: ['Apple Bank'],
                                },
                                bankAddress: {
                                    type: 'string',
                                    description: 'The address of the destination bank.',
                                    examples: ['2100 Broadway'],
                                },
                                bankCity: {
                                    type: 'string',
                                    description: 'The city in which the destination bank resides.',
                                    examples: ['New York City'],
                                },
                                bankBranchName: {
                                    type: 'string',
                                    description: "The name of the destination bank's branch.",
                                    examples: ['New York'],
                                },
                                bankBranchCode: {
                                    type: 'string',
                                    description: "The code of the destination bank's branch.",
                                    examples: ['44-04'],
                                },
                                bankCode: {
                                    type: 'string',
                                    description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                },
                                chineseId: {
                                    type: 'string',
                                    description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                    examples: ['01101201901018889'],
                                },
                                province: {
                                    type: 'string',
                                    description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                    examples: ['Zhejiang'],
                                },
                                business: {
                                    type: 'boolean',
                                    description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                    examples: [true],
                                },
                                bankCodeType: {
                                    type: 'string',
                                    description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                    enum: ['ABA', 'CHIPS'],
                                    examples: ['ABA'],
                                },
                                bankCountry: {
                                    type: 'string',
                                    description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                    enum: [
                                        'AT',
                                        'BE',
                                        'BG',
                                        'CY',
                                        'CZ',
                                        'DK',
                                        'EE',
                                        'FI',
                                        'FR',
                                        'DE',
                                        'GR',
                                        'HR',
                                        'HU',
                                        'IS',
                                        'IE',
                                        'IT',
                                        'LV',
                                        'LI',
                                        'LT',
                                        'LU',
                                        'MT',
                                        'NL',
                                        'NO',
                                        'PL',
                                        'PT',
                                        'RO',
                                        'SK',
                                        'SI',
                                        'ES',
                                        'SE',
                                        'GB',
                                        'MQ',
                                        'YT',
                                        'GP',
                                        'GF',
                                        'RE',
                                        'MF',
                                        'GI',
                                        'GG',
                                        'IM',
                                        'JE',
                                        'MC',
                                        'CH',
                                        'AD',
                                        'SM',
                                        'VA',
                                        'AX',
                                        'PM',
                                        'BL',
                                        'AF',
                                        'AL',
                                        'DZ',
                                        'AS',
                                        'AO',
                                        'AI',
                                        'AQ',
                                        'AG',
                                        'AR',
                                        'AM',
                                        'AW',
                                        'AU',
                                        'AZ',
                                        'BS',
                                        'BH',
                                        'BD',
                                        'BB',
                                        'BY',
                                        'BZ',
                                        'BJ',
                                        'BM',
                                        'BT',
                                        'BO',
                                        'BQ',
                                        'BA',
                                        'BW',
                                        'BV',
                                        'BR',
                                        'IO',
                                        'VG',
                                        'BN',
                                        'BF',
                                        'BI',
                                        'KH',
                                        'CM',
                                        'CA',
                                        'CV',
                                        'KY',
                                        'CF',
                                        'TD',
                                        'CL',
                                        'CN',
                                        'CX',
                                        'CC',
                                        'CO',
                                        'KM',
                                        'CK',
                                        'CR',
                                        'CU',
                                        'CW',
                                        'CD',
                                        'DJ',
                                        'DM',
                                        'DO',
                                        'TL',
                                        'EC',
                                        'EG',
                                        'SV',
                                        'GQ',
                                        'ER',
                                        'SZ',
                                        'ET',
                                        'FK',
                                        'FO',
                                        'FJ',
                                        'PF',
                                        'TF',
                                        'GA',
                                        'GM',
                                        'GE',
                                        'GH',
                                        'GL',
                                        'GD',
                                        'GU',
                                        'GT',
                                        'GN',
                                        'GW',
                                        'GY',
                                        'HT',
                                        'HM',
                                        'HN',
                                        'HK',
                                        'IN',
                                        'ID',
                                        'IR',
                                        'IQ',
                                        'IL',
                                        'CI',
                                        'JM',
                                        'JP',
                                        'JO',
                                        'KZ',
                                        'KE',
                                        'KI',
                                        'XK',
                                        'KW',
                                        'KG',
                                        'LA',
                                        'LB',
                                        'LS',
                                        'LR',
                                        'LY',
                                        'MO',
                                        'MG',
                                        'MW',
                                        'MY',
                                        'MV',
                                        'ML',
                                        'MH',
                                        'MR',
                                        'MU',
                                        'MX',
                                        'FM',
                                        'MD',
                                        'MN',
                                        'ME',
                                        'MS',
                                        'MA',
                                        'MZ',
                                        'MM',
                                        'NA',
                                        'NR',
                                        'NP',
                                        'AN',
                                        'NC',
                                        'NZ',
                                        'NI',
                                        'NE',
                                        'NG',
                                        'NU',
                                        'NF',
                                        'KP',
                                        'MK',
                                        'MP',
                                        'OM',
                                        'PK',
                                        'PW',
                                        'PS',
                                        'PA',
                                        'PG',
                                        'PY',
                                        'PE',
                                        'PH',
                                        'PN',
                                        'PR',
                                        'QA',
                                        'CG',
                                        'RU',
                                        'RW',
                                        'SH',
                                        'KN',
                                        'LC',
                                        'VC',
                                        'WS',
                                        'ST',
                                        'SA',
                                        'SN',
                                        'RS',
                                        'SC',
                                        'SL',
                                        'SG',
                                        'SX',
                                        'SB',
                                        'SO',
                                        'ZA',
                                        'KR',
                                        'GS',
                                        'SS',
                                        'LK',
                                        'SD',
                                        'SR',
                                        'SY',
                                        'SJ',
                                        'TW',
                                        'TJ',
                                        'TZ',
                                        'TH',
                                        'TG',
                                        'TK',
                                        'TO',
                                        'TT',
                                        'TN',
                                        'TR',
                                        'TM',
                                        'TC',
                                        'TV',
                                        'UG',
                                        'UA',
                                        'AE',
                                        'UM',
                                        'US',
                                        'UY',
                                        'UZ',
                                        'VU',
                                        'VE',
                                        'VN',
                                        'VI',
                                        'WF',
                                        'EH',
                                        'YE',
                                        'ZM',
                                        'ZW',
                                    ],
                                    examples: ['US'],
                                },
                            },
                        },
                    },
                    description: 'Account Identifier',
                },
                redirectedDestination: {
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                            description: '`SCAN` `IBAN` `DD` `INTL`',
                        },
                        accountNumber: {
                            type: 'string',
                            description: 'Bank account Sort Code',
                            examples: ['12345678'],
                        },
                        sortCode: {
                            type: 'string',
                            description: 'Bank account Sort Code',
                            examples: ['000000'],
                        },
                        iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                        bic: { type: 'string', examples: ['MODRGB21'] },
                        currency: { type: 'string', examples: ['GBP'] },
                        countrySpecificDetails: {
                            type: 'object',
                            properties: {
                                bankName: {
                                    type: 'string',
                                    description: 'The name of the destination bank.',
                                    examples: ['Apple Bank'],
                                },
                                bankAddress: {
                                    type: 'string',
                                    description: 'The address of the destination bank.',
                                    examples: ['2100 Broadway'],
                                },
                                bankCity: {
                                    type: 'string',
                                    description: 'The city in which the destination bank resides.',
                                    examples: ['New York City'],
                                },
                                bankBranchName: {
                                    type: 'string',
                                    description: "The name of the destination bank's branch.",
                                    examples: ['New York'],
                                },
                                bankBranchCode: {
                                    type: 'string',
                                    description: "The code of the destination bank's branch.",
                                    examples: ['44-04'],
                                },
                                bankCode: {
                                    type: 'string',
                                    description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                },
                                chineseId: {
                                    type: 'string',
                                    description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                    examples: ['01101201901018889'],
                                },
                                province: {
                                    type: 'string',
                                    description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                    examples: ['Zhejiang'],
                                },
                                business: {
                                    type: 'boolean',
                                    description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                    examples: [true],
                                },
                                bankCodeType: {
                                    type: 'string',
                                    description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                    enum: ['ABA', 'CHIPS'],
                                    examples: ['ABA'],
                                },
                                bankCountry: {
                                    type: 'string',
                                    description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                    enum: [
                                        'AT',
                                        'BE',
                                        'BG',
                                        'CY',
                                        'CZ',
                                        'DK',
                                        'EE',
                                        'FI',
                                        'FR',
                                        'DE',
                                        'GR',
                                        'HR',
                                        'HU',
                                        'IS',
                                        'IE',
                                        'IT',
                                        'LV',
                                        'LI',
                                        'LT',
                                        'LU',
                                        'MT',
                                        'NL',
                                        'NO',
                                        'PL',
                                        'PT',
                                        'RO',
                                        'SK',
                                        'SI',
                                        'ES',
                                        'SE',
                                        'GB',
                                        'MQ',
                                        'YT',
                                        'GP',
                                        'GF',
                                        'RE',
                                        'MF',
                                        'GI',
                                        'GG',
                                        'IM',
                                        'JE',
                                        'MC',
                                        'CH',
                                        'AD',
                                        'SM',
                                        'VA',
                                        'AX',
                                        'PM',
                                        'BL',
                                        'AF',
                                        'AL',
                                        'DZ',
                                        'AS',
                                        'AO',
                                        'AI',
                                        'AQ',
                                        'AG',
                                        'AR',
                                        'AM',
                                        'AW',
                                        'AU',
                                        'AZ',
                                        'BS',
                                        'BH',
                                        'BD',
                                        'BB',
                                        'BY',
                                        'BZ',
                                        'BJ',
                                        'BM',
                                        'BT',
                                        'BO',
                                        'BQ',
                                        'BA',
                                        'BW',
                                        'BV',
                                        'BR',
                                        'IO',
                                        'VG',
                                        'BN',
                                        'BF',
                                        'BI',
                                        'KH',
                                        'CM',
                                        'CA',
                                        'CV',
                                        'KY',
                                        'CF',
                                        'TD',
                                        'CL',
                                        'CN',
                                        'CX',
                                        'CC',
                                        'CO',
                                        'KM',
                                        'CK',
                                        'CR',
                                        'CU',
                                        'CW',
                                        'CD',
                                        'DJ',
                                        'DM',
                                        'DO',
                                        'TL',
                                        'EC',
                                        'EG',
                                        'SV',
                                        'GQ',
                                        'ER',
                                        'SZ',
                                        'ET',
                                        'FK',
                                        'FO',
                                        'FJ',
                                        'PF',
                                        'TF',
                                        'GA',
                                        'GM',
                                        'GE',
                                        'GH',
                                        'GL',
                                        'GD',
                                        'GU',
                                        'GT',
                                        'GN',
                                        'GW',
                                        'GY',
                                        'HT',
                                        'HM',
                                        'HN',
                                        'HK',
                                        'IN',
                                        'ID',
                                        'IR',
                                        'IQ',
                                        'IL',
                                        'CI',
                                        'JM',
                                        'JP',
                                        'JO',
                                        'KZ',
                                        'KE',
                                        'KI',
                                        'XK',
                                        'KW',
                                        'KG',
                                        'LA',
                                        'LB',
                                        'LS',
                                        'LR',
                                        'LY',
                                        'MO',
                                        'MG',
                                        'MW',
                                        'MY',
                                        'MV',
                                        'ML',
                                        'MH',
                                        'MR',
                                        'MU',
                                        'MX',
                                        'FM',
                                        'MD',
                                        'MN',
                                        'ME',
                                        'MS',
                                        'MA',
                                        'MZ',
                                        'MM',
                                        'NA',
                                        'NR',
                                        'NP',
                                        'AN',
                                        'NC',
                                        'NZ',
                                        'NI',
                                        'NE',
                                        'NG',
                                        'NU',
                                        'NF',
                                        'KP',
                                        'MK',
                                        'MP',
                                        'OM',
                                        'PK',
                                        'PW',
                                        'PS',
                                        'PA',
                                        'PG',
                                        'PY',
                                        'PE',
                                        'PH',
                                        'PN',
                                        'PR',
                                        'QA',
                                        'CG',
                                        'RU',
                                        'RW',
                                        'SH',
                                        'KN',
                                        'LC',
                                        'VC',
                                        'WS',
                                        'ST',
                                        'SA',
                                        'SN',
                                        'RS',
                                        'SC',
                                        'SL',
                                        'SG',
                                        'SX',
                                        'SB',
                                        'SO',
                                        'ZA',
                                        'KR',
                                        'GS',
                                        'SS',
                                        'LK',
                                        'SD',
                                        'SR',
                                        'SY',
                                        'SJ',
                                        'TW',
                                        'TJ',
                                        'TZ',
                                        'TH',
                                        'TG',
                                        'TK',
                                        'TO',
                                        'TT',
                                        'TN',
                                        'TR',
                                        'TM',
                                        'TC',
                                        'TV',
                                        'UG',
                                        'UA',
                                        'AE',
                                        'UM',
                                        'US',
                                        'UY',
                                        'UZ',
                                        'VU',
                                        'VE',
                                        'VN',
                                        'VI',
                                        'WF',
                                        'EH',
                                        'YE',
                                        'ZM',
                                        'ZW',
                                    ],
                                    examples: ['US'],
                                },
                            },
                        },
                    },
                    description: 'Account Identifier',
                },
                defaultReference: {
                    type: 'string',
                    description: 'Default reference used for payments to the Beneficiary.',
                },
                status: { type: 'string', description: 'Status of the Beneficiary. Can be:' },
                created: {
                    type: 'string',
                    description: "Datetime the Beneficiary was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                accountId: {
                    type: 'string',
                    description: 'Id of the account if this beneficiary is a Modulr account, null otherwise',
                },
                externalReference: {
                    type: 'string',
                    description: 'External system reference for the Beneficiary',
                },
                approvalRequired: {
                    type: 'boolean',
                    description: 'Indicates if the beneficiary creation is pending approval',
                },
                customerId: {
                    type: 'string',
                    description: 'Id of the customer than owns this beneficiary',
                    examples: ['C0000001'],
                },
                updated: {
                    type: 'string',
                    description: "Datetime the Beneficiary was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                address: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { type: 'string' },
                        addressLine2: { type: 'string' },
                        postTown: { type: 'string' },
                        postCode: { type: 'string' },
                        country: { type: 'string' },
                        countrySubDivision: { type: 'string' },
                    },
                    description: 'Address',
                },
                qualifier: { type: 'string', description: 'Qualifier for this beneficiary' },
                approvalRequestId: {
                    type: 'string',
                    description: 'Approval request ID for pending records.',
                },
                approvalStatus: {
                    type: 'string',
                    description: 'Approval status of item.\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`',
                    enum: ['NOTNEEDED', 'PENDING', 'APPROVED', 'REJECTED', 'DELETED'],
                },
                accessGroups: {
                    uniqueItems: true,
                    type: 'array',
                    description: 'Access groups associated with beneficiary.',
                    items: { type: 'string', description: 'Access groups associated with beneficiary.' },
                },
            },
            description: 'Beneficiary',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateBeneficiary = CreateBeneficiary;
const CreateCard = {
    body: {
        required: ['authentication', 'expiry', 'externalRef', 'holder', 'limit', 'productCode'],
        type: 'object',
        properties: {
            limit: {
                minimum: 1,
                type: 'number',
                description: 'Total card authorisation limit.',
                format: 'double',
                examples: [1000],
                maximum: 1.7976931348623157e308,
            },
            expiry: {
                type: 'string',
                description: 'ISO 8601 date with year & month components only. The supplied value must be in the future (cannot be the current month) and is _inclusive_ of the specified month.',
                examples: ['2018-12'],
            },
            productCode: {
                maxLength: 50,
                minLength: 1,
                type: 'string',
                description: 'Identifies the _type_ of card to create (GBP consumer, GBP business, etc). Modulr will supply a list of possible values.',
            },
            externalRef: {
                maxLength: 50,
                minLength: 1,
                pattern: '[\\w -]*',
                type: 'string',
                description: 'Client reference for the newly created card. Maximum of 50 alphanumeric characters (including underscore, hyphen and space).',
            },
            constraints: {
                type: 'object',
                properties: {
                    authorisation: {
                        type: 'object',
                        properties: {
                            spend: {
                                type: 'array',
                                description: 'Spending constraints',
                                items: {
                                    required: ['currency'],
                                    type: 'object',
                                    properties: {
                                        currency: {
                                            type: 'string',
                                            description: 'A 3 letter ISO 4217 code representing the transaction currency',
                                            enum: [
                                                'GBP',
                                                'EUR',
                                                'AED',
                                                'AFN',
                                                'ALL',
                                                'AMD',
                                                'ANG',
                                                'AOA',
                                                'ARS',
                                                'AUD',
                                                'AWG',
                                                'AZN',
                                                'BAM',
                                                'BBD',
                                                'BDT',
                                                'BGN',
                                                'BHD',
                                                'BIF',
                                                'BMD',
                                                'BND',
                                                'BOB',
                                                'BOV',
                                                'BRL',
                                                'BSD',
                                                'BTN',
                                                'BWP',
                                                'BYN',
                                                'BZD',
                                                'CAD',
                                                'CDF',
                                                'CHE',
                                                'CHF',
                                                'CHW',
                                                'CLF',
                                                'CLP',
                                                'CNY',
                                                'COP',
                                                'COU',
                                                'CRC',
                                                'CUC',
                                                'CUP',
                                                'CVE',
                                                'CZK',
                                                'DJF',
                                                'DKK',
                                                'DOP',
                                                'DZD',
                                                'EGP',
                                                'ERN',
                                                'ETB',
                                                'FJD',
                                                'FKP',
                                                'GEL',
                                                'GHS',
                                                'GIP',
                                                'GMD',
                                                'GNF',
                                                'GTQ',
                                                'GYD',
                                                'HKD',
                                                'HNL',
                                                'HRK',
                                                'HTG',
                                                'HUF',
                                                'IDR',
                                                'ILS',
                                                'INR',
                                                'IQD',
                                                'IRR',
                                                'ISK',
                                                'JMD',
                                                'JOD',
                                                'JPY',
                                                'KES',
                                                'KGS',
                                                'KHR',
                                                'KMF',
                                                'KPW',
                                                'KRW',
                                                'KWD',
                                                'KYD',
                                                'KZT',
                                                'LAK',
                                                'LBP',
                                                'LKR',
                                                'LRD',
                                                'LSL',
                                                'LYD',
                                                'MAD',
                                                'MDL',
                                                'MGA',
                                                'MKD',
                                                'MMK',
                                                'MNT',
                                                'MOP',
                                                'MRU',
                                                'MUR',
                                                'MVR',
                                                'MWK',
                                                'MXN',
                                                'MXV',
                                                'MYR',
                                                'MZN',
                                                'NAD',
                                                'NGN',
                                                'NIO',
                                                'NOK',
                                                'NPR',
                                                'NZD',
                                                'OMR',
                                                'PAB',
                                                'PEN',
                                                'PGK',
                                                'PHP',
                                                'PKR',
                                                'PLN',
                                                'PYG',
                                                'QAR',
                                                'RON',
                                                'RSD',
                                                'RUB',
                                                'RWF',
                                                'SAR',
                                                'SBD',
                                                'SCR',
                                                'SDG',
                                                'SEK',
                                                'SGD',
                                                'SLE',
                                                'SLL',
                                                'SOS',
                                                'SRD',
                                                'SSP',
                                                'STN',
                                                'SVC',
                                                'SYP',
                                                'SZL',
                                                'SHP',
                                                'THB',
                                                'TJS',
                                                'TMT',
                                                'TND',
                                                'TOP',
                                                'TRY',
                                                'TTD',
                                                'TWD',
                                                'TZS',
                                                'UAH',
                                                'UGX',
                                                'USD',
                                                'USN',
                                                'UYI',
                                                'UYU',
                                                'UYW',
                                                'UZS',
                                                'VES',
                                                'VND',
                                                'VUV',
                                                'WST',
                                                'XAF',
                                                'XAG',
                                                'XAU',
                                                'XBA',
                                                'XBB',
                                                'XBC',
                                                'XBD',
                                                'XCD',
                                                'XDR',
                                                'XOF',
                                                'XPD',
                                                'XPF',
                                                'XPT',
                                                'XSU',
                                                'XTS',
                                                'XUA',
                                                'XXX',
                                                'YER',
                                                'ZAR',
                                                'ZMW',
                                                'ZWL',
                                            ],
                                            examples: ['GBP'],
                                        },
                                        min: {
                                            type: 'number',
                                            description: 'Minimum spend amount (inclusive)',
                                            examples: [5],
                                        },
                                        max: {
                                            type: 'number',
                                            description: 'Maximum spend amount (inclusive)',
                                            examples: [2000],
                                        },
                                    },
                                    description: 'Spending constraints',
                                },
                            },
                        },
                        description: 'Authorisation constraints',
                    },
                },
                description: 'Constraints',
            },
            authentication: {
                required: ['knowledgeBase'],
                type: 'object',
                properties: {
                    knowledgeBase: {
                        type: 'array',
                        description: '3DS knowledge-based authentication (KBA) answers',
                        items: {
                            required: ['answer', 'type'],
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: '3DS knowledge-based authentication answer type',
                                    enum: [
                                        'FIRST_PET_NAME',
                                        'MATERNAL_GRANDMOTHER_MAIDEN_NAME',
                                        'FAVOURITE_CHILDHOOD_FRIEND',
                                        'FIRST_CAR',
                                        'CITY_PARENTS_MET',
                                    ],
                                },
                                answer: {
                                    maxLength: 45,
                                    minLength: 1,
                                    type: 'string',
                                    description: '3DS knowledge-based authentication answer',
                                },
                            },
                            description: '3DS Knowledge-Based Authentication (KBA) answers',
                        },
                    },
                },
                description: 'Authentication',
            },
            holder: {
                required: ['billingAddress', 'dateOfBirth', 'firstName', 'lastName', 'mobileNumber'],
                type: 'object',
                properties: {
                    title: {
                        pattern: '^[0-9a-zA-Z]{1,4}$',
                        type: 'string',
                        description: 'Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.',
                        examples: ['Mr'],
                    },
                    firstName: {
                        pattern: '[\\x20-\\x7e]{1,20}',
                        type: 'string',
                        description: 'Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                        examples: ['Joe'],
                    },
                    lastName: {
                        pattern: '[\\x20-\\x7e]{1,20}',
                        type: 'string',
                        description: 'Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                        examples: ['Bloggs'],
                    },
                    billingAddress: {
                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                        type: 'object',
                        properties: {
                            addressLine1: {
                                maxLength: 50,
                                minLength: 1,
                                type: 'string',
                                description: 'First line of address',
                                examples: ['Floor 10'],
                            },
                            addressLine2: {
                                maxLength: 50,
                                minLength: 0,
                                type: 'string',
                                description: 'Second line of address',
                                examples: ['80 George Street'],
                            },
                            postTown: {
                                maxLength: 20,
                                minLength: 1,
                                type: 'string',
                                description: 'Post town',
                                examples: ['EDINBURGH'],
                            },
                            postCode: {
                                maxLength: 10,
                                minLength: 1,
                                type: 'string',
                                description: 'Postcode',
                                examples: ['EH2 3BU'],
                            },
                            country: {
                                type: 'string',
                                description: 'Country (ISO 3166 alpha-2 country code)',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'AX',
                                    'AW',
                                    'BL',
                                    'CW',
                                    'GF',
                                    'GL',
                                    'GP',
                                    'ME',
                                    'MF',
                                    'MQ',
                                    'NC',
                                    'PF',
                                    'PM',
                                    'RE',
                                    'SX',
                                    'TF',
                                    'WF',
                                    'YT',
                                    'AI',
                                    'BM',
                                    'FK',
                                    'GB',
                                    'GG',
                                    'GI',
                                    'GS',
                                    'IO',
                                    'JE',
                                    'KY',
                                    'MS',
                                    'PN',
                                    'SH',
                                    'TC',
                                    'VG',
                                ],
                                examples: ['GB'],
                            },
                        },
                        description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                    },
                    dateOfBirth: {
                        type: 'string',
                        description: 'Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.',
                        format: 'date',
                        examples: ['2001-01-01'],
                    },
                    mobileNumber: {
                        type: 'string',
                        description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.",
                        examples: ['+447123456000'],
                    },
                    email: {
                        maxLength: 50,
                        minLength: 0,
                        type: 'string',
                        description: 'Cardholder email',
                        examples: ['cardholder@example.com'],
                    },
                },
                description: 'CardHolder',
            },
        },
        description: 'Card',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    aid: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The account which card funds will be raised from.',
                    },
                },
                required: ['aid'],
            },
        ],
    },
    response: {
        '201': {
            required: ['createdDate', 'cvv2', 'externalRef', 'id', 'maxLimit', 'pan'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Card identifier. Maximum of 10 alphanumeric characters.',
                },
                pan: { type: 'string', description: 'Full card PAN.' },
                maskedPan: { type: 'string', description: 'Masked card PAN.' },
                cvv2: { type: 'string', description: 'Card CVV2 number.' },
                externalRef: {
                    type: 'string',
                    description: 'Client reference for the newly created card.',
                },
                createdDate: {
                    type: 'string',
                    description: 'The creation date of the card',
                    format: 'date-time',
                },
                maxLimit: {
                    type: 'string',
                    description: 'Maximum Limit which can be set on this card and is the maximum lifetime spend the card can have',
                    examples: ['4000.0'],
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateCard = CreateCard;
const CreateCollectionSchedule = {
    body: {
        required: ['currency', 'frequency', 'numberOfPayments'],
        type: 'object',
        properties: {
            frequency: {
                type: 'string',
                description: 'Frequency for direct-debit collection. Can be one of ONCE, MONTHLY, QUARTERLY, SEMI_ANNUALLY, ANNUALLY, WEEKLY, EVERY_TWO_WEEKS, EVERY_FOUR_WEEKS',
                enum: [
                    'ONCE',
                    'MONTHLY',
                    'QUARTERLY',
                    'SEMI_ANNUALLY',
                    'ANNUALLY',
                    'WEEKLY',
                    'EVERY_TWO_WEEKS',
                    'EVERY_FOUR_WEEKS',
                ],
            },
            numberOfPayments: {
                minimum: 1,
                type: 'integer',
                description: 'Number of payments for direct-debit collection',
                format: 'int32',
                maximum: 2147483647,
            },
            firstPaymentAmount: {
                maximum: 2147483647,
                minimum: 0.01,
                type: 'number',
                description: 'Amount of the first collection payment',
                examples: [100],
            },
            firstPaymentDate: {
                type: 'string',
                description: 'Date of the first collection payment. yyyy-MM-dd',
                examples: ['2018-01-10'],
            },
            regularPaymentAmount: {
                maximum: 2147483647,
                minimum: 0.01,
                type: 'number',
                description: 'Amount of the regular collection payments',
                examples: [100],
            },
            regularPaymentStartDate: {
                type: 'string',
                description: 'Start date of the regular collection payment. yyyy-MM-dd',
                examples: ['2018-01-10'],
            },
            currency: {
                type: 'string',
                description: 'Currency in which payment should be made. Can be one of GBP, EUR, AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BHD, BIF, BMD, BND, BOB, BOV, BRL, BSD, BTN, BWP, BYN, BZD, CAD, CDF, CHE, CHF, CHW, CLF, CLP, CNY, COP, COU, CRC, CUC, CUP, CVE, CZK, DJF, DKK, DOP, DZD, EGP, ERN, ETB, FJD, FKP, GEL, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, INR, IQD, IRR, ISK, JMD, JOD, JPY, KES, KGS, KHR, KMF, KPW, KRW, KWD, KYD, KZT, LAK, LBP, LKR, LRD, LSL, LYD, MAD, MDL, MGA, MKD, MMK, MNT, MOP, MRU, MUR, MVR, MWK, MXN, MXV, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, OMR, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RSD, RUB, RWF, SAR, SBD, SCR, SDG, SEK, SGD, SLE, SLL, SOS, SRD, SSP, STN, SVC, SYP, SZL, SHP, THB, TJS, TMT, TND, TOP, TRY, TTD, TWD, TZS, UAH, UGX, USD, USN, UYI, UYU, UYW, UZS, VES, VND, VUV, WST, XAF, XAG, XAU, XBA, XBB, XBC, XBD, XCD, XDR, XOF, XPD, XPF, XPT, XSU, XTS, XUA, XXX, YER, ZAR, ZMW, ZWL',
                enum: [
                    'GBP',
                    'EUR',
                    'AED',
                    'AFN',
                    'ALL',
                    'AMD',
                    'ANG',
                    'AOA',
                    'ARS',
                    'AUD',
                    'AWG',
                    'AZN',
                    'BAM',
                    'BBD',
                    'BDT',
                    'BGN',
                    'BHD',
                    'BIF',
                    'BMD',
                    'BND',
                    'BOB',
                    'BOV',
                    'BRL',
                    'BSD',
                    'BTN',
                    'BWP',
                    'BYN',
                    'BZD',
                    'CAD',
                    'CDF',
                    'CHE',
                    'CHF',
                    'CHW',
                    'CLF',
                    'CLP',
                    'CNY',
                    'COP',
                    'COU',
                    'CRC',
                    'CUC',
                    'CUP',
                    'CVE',
                    'CZK',
                    'DJF',
                    'DKK',
                    'DOP',
                    'DZD',
                    'EGP',
                    'ERN',
                    'ETB',
                    'FJD',
                    'FKP',
                    'GEL',
                    'GHS',
                    'GIP',
                    'GMD',
                    'GNF',
                    'GTQ',
                    'GYD',
                    'HKD',
                    'HNL',
                    'HRK',
                    'HTG',
                    'HUF',
                    'IDR',
                    'ILS',
                    'INR',
                    'IQD',
                    'IRR',
                    'ISK',
                    'JMD',
                    'JOD',
                    'JPY',
                    'KES',
                    'KGS',
                    'KHR',
                    'KMF',
                    'KPW',
                    'KRW',
                    'KWD',
                    'KYD',
                    'KZT',
                    'LAK',
                    'LBP',
                    'LKR',
                    'LRD',
                    'LSL',
                    'LYD',
                    'MAD',
                    'MDL',
                    'MGA',
                    'MKD',
                    'MMK',
                    'MNT',
                    'MOP',
                    'MRU',
                    'MUR',
                    'MVR',
                    'MWK',
                    'MXN',
                    'MXV',
                    'MYR',
                    'MZN',
                    'NAD',
                    'NGN',
                    'NIO',
                    'NOK',
                    'NPR',
                    'NZD',
                    'OMR',
                    'PAB',
                    'PEN',
                    'PGK',
                    'PHP',
                    'PKR',
                    'PLN',
                    'PYG',
                    'QAR',
                    'RON',
                    'RSD',
                    'RUB',
                    'RWF',
                    'SAR',
                    'SBD',
                    'SCR',
                    'SDG',
                    'SEK',
                    'SGD',
                    'SLE',
                    'SLL',
                    'SOS',
                    'SRD',
                    'SSP',
                    'STN',
                    'SVC',
                    'SYP',
                    'SZL',
                    'SHP',
                    'THB',
                    'TJS',
                    'TMT',
                    'TND',
                    'TOP',
                    'TRY',
                    'TTD',
                    'TWD',
                    'TZS',
                    'UAH',
                    'UGX',
                    'USD',
                    'USN',
                    'UYI',
                    'UYU',
                    'UYW',
                    'UZS',
                    'VES',
                    'VND',
                    'VUV',
                    'WST',
                    'XAF',
                    'XAG',
                    'XAU',
                    'XBA',
                    'XBB',
                    'XBC',
                    'XBD',
                    'XCD',
                    'XDR',
                    'XOF',
                    'XPD',
                    'XPF',
                    'XPT',
                    'XSU',
                    'XTS',
                    'XUA',
                    'XXX',
                    'YER',
                    'ZAR',
                    'ZMW',
                    'ZWL',
                ],
            },
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w-\\s]*',
                type: 'string',
                description: 'External Reference for collection schedule, should contain only alphanumeric characters, underscore, hyphen and space.',
                examples: ['REFERENCE - 12'],
            },
        },
        description: 'Details of collection to create.',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of mandate to create collection for.',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '200': {
            required: ['createdDate', 'frequency', 'id', 'numberOfPayments', 'status'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique id for direct-debit collection.',
                    examples: ['Q0000001'],
                },
                frequency: {
                    type: 'string',
                    description: 'Frequency for direct-debit collection',
                    examples: ['MONTHLY'],
                },
                numberOfPayments: {
                    type: 'integer',
                    description: 'Number of payments for direct-debit collection',
                    format: 'int32',
                    examples: [12],
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                firstPaymentAmount: {
                    type: 'number',
                    description: 'Amount of the first collection payment',
                    examples: [100],
                },
                firstPaymentDate: {
                    type: 'string',
                    description: 'Date of the first collection payment. Format is yyyy-MM-dd.',
                    examples: ['2018-01-10'],
                },
                regularPaymentAmount: {
                    type: 'number',
                    description: 'Amount of the regular collection payments',
                    examples: [100],
                },
                regularPaymentStartDate: {
                    type: 'string',
                    description: 'Start date of the regular collection payment. Format is yyyy-MM-dd.',
                    examples: ['2018-01-10'],
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime when direct-debit collection was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                status: {
                    type: 'string',
                    description: 'Status of the direct-debit collection. Can be one of ACTIVE, PENDING, SUBMITTED, REJECTED, CANCELLED\n\n`ACTIVE` `PENDING` `SUBMITTED` `REJECTED` `CANCELLED`',
                    enum: ['ACTIVE', 'PENDING', 'SUBMITTED', 'REJECTED', 'CANCELLED'],
                    examples: ['PROCESSING'],
                },
                externalReference: { type: 'string' },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateCollectionSchedule = CreateCollectionSchedule;
const CreateCustomer = {
    body: {
        required: ['legalEntity', 'type'],
        type: 'object',
        properties: {
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w \\-]*',
                type: 'string',
                description: 'External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long',
            },
            name: {
                maxLength: 100,
                minLength: 0,
                pattern: '^([_\'@,&()£$€¥=#%\\‘\\’:;/<>«»\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[\\p{L}0-9])+[_\'@,&()£$€¥=#%\\‘\\’:;/<>«»\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*',
                type: 'string',
                description: "AlphaNumeric characters plus [ _ ' @ , & £ $ € ¥ = # % ‘ ’ : ; \\ / < > « »  ! ‘ “ ” . ? - *{ }  + % ( )]. Mandatory for all types except 'INDIVIDUAL and PCM_INDIVIDUAL'",
            },
            companyRegNumber: {
                maxLength: 40,
                minLength: 0,
                type: 'string',
                description: "Company registration number. Mandatory for 'LLC' and 'PLC'",
            },
            registeredAddress: {
                required: ['addressLine1', 'postTown'],
                type: 'object',
                properties: {
                    addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                    addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                    postTown: { maxLength: 50, minLength: 0, type: 'string' },
                    postCode: { maxLength: 10, type: 'string' },
                    country: {
                        type: 'string',
                        enum: [
                            'AT',
                            'BE',
                            'BG',
                            'CY',
                            'CZ',
                            'DK',
                            'EE',
                            'FI',
                            'FR',
                            'DE',
                            'GR',
                            'HR',
                            'HU',
                            'IS',
                            'IE',
                            'IT',
                            'LV',
                            'LI',
                            'LT',
                            'LU',
                            'MT',
                            'NL',
                            'NO',
                            'PL',
                            'PT',
                            'RO',
                            'SK',
                            'SI',
                            'ES',
                            'SE',
                            'GB',
                            'MQ',
                            'YT',
                            'GP',
                            'GF',
                            'RE',
                            'MF',
                            'GI',
                            'GG',
                            'IM',
                            'JE',
                            'MC',
                            'CH',
                            'AD',
                            'SM',
                            'VA',
                            'AX',
                            'PM',
                            'BL',
                            'AF',
                            'AL',
                            'DZ',
                            'AS',
                            'AO',
                            'AI',
                            'AQ',
                            'AG',
                            'AR',
                            'AM',
                            'AW',
                            'AU',
                            'AZ',
                            'BS',
                            'BH',
                            'BD',
                            'BB',
                            'BY',
                            'BZ',
                            'BJ',
                            'BM',
                            'BT',
                            'BO',
                            'BQ',
                            'BA',
                            'BW',
                            'BV',
                            'BR',
                            'IO',
                            'VG',
                            'BN',
                            'BF',
                            'BI',
                            'KH',
                            'CM',
                            'CA',
                            'CV',
                            'KY',
                            'CF',
                            'TD',
                            'CL',
                            'CN',
                            'CX',
                            'CC',
                            'CO',
                            'KM',
                            'CK',
                            'CR',
                            'CU',
                            'CW',
                            'CD',
                            'DJ',
                            'DM',
                            'DO',
                            'TL',
                            'EC',
                            'EG',
                            'SV',
                            'GQ',
                            'ER',
                            'SZ',
                            'ET',
                            'FK',
                            'FO',
                            'FJ',
                            'PF',
                            'TF',
                            'GA',
                            'GM',
                            'GE',
                            'GH',
                            'GL',
                            'GD',
                            'GU',
                            'GT',
                            'GN',
                            'GW',
                            'GY',
                            'HT',
                            'HM',
                            'HN',
                            'HK',
                            'IN',
                            'ID',
                            'IR',
                            'IQ',
                            'IL',
                            'CI',
                            'JM',
                            'JP',
                            'JO',
                            'KZ',
                            'KE',
                            'KI',
                            'XK',
                            'KW',
                            'KG',
                            'LA',
                            'LB',
                            'LS',
                            'LR',
                            'LY',
                            'MO',
                            'MG',
                            'MW',
                            'MY',
                            'MV',
                            'ML',
                            'MH',
                            'MR',
                            'MU',
                            'MX',
                            'FM',
                            'MD',
                            'MN',
                            'ME',
                            'MS',
                            'MA',
                            'MZ',
                            'MM',
                            'NA',
                            'NR',
                            'NP',
                            'AN',
                            'NC',
                            'NZ',
                            'NI',
                            'NE',
                            'NG',
                            'NU',
                            'NF',
                            'KP',
                            'MK',
                            'MP',
                            'OM',
                            'PK',
                            'PW',
                            'PS',
                            'PA',
                            'PG',
                            'PY',
                            'PE',
                            'PH',
                            'PN',
                            'PR',
                            'QA',
                            'CG',
                            'RU',
                            'RW',
                            'SH',
                            'KN',
                            'LC',
                            'VC',
                            'WS',
                            'ST',
                            'SA',
                            'SN',
                            'RS',
                            'SC',
                            'SL',
                            'SG',
                            'SX',
                            'SB',
                            'SO',
                            'ZA',
                            'KR',
                            'GS',
                            'SS',
                            'LK',
                            'SD',
                            'SR',
                            'SY',
                            'SJ',
                            'TW',
                            'TJ',
                            'TZ',
                            'TH',
                            'TG',
                            'TK',
                            'TO',
                            'TT',
                            'TN',
                            'TR',
                            'TM',
                            'TC',
                            'TV',
                            'UG',
                            'UA',
                            'AE',
                            'UM',
                            'US',
                            'UY',
                            'UZ',
                            'VU',
                            'VE',
                            'VN',
                            'VI',
                            'WF',
                            'EH',
                            'YE',
                            'ZM',
                            'ZW',
                        ],
                    },
                    countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                },
                description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'",
            },
            tradingAddress: {
                required: ['addressLine1', 'postTown'],
                type: 'object',
                properties: {
                    addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                    addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                    postTown: { maxLength: 50, minLength: 0, type: 'string' },
                    postCode: { maxLength: 10, type: 'string' },
                    country: {
                        type: 'string',
                        enum: [
                            'AT',
                            'BE',
                            'BG',
                            'CY',
                            'CZ',
                            'DK',
                            'EE',
                            'FI',
                            'FR',
                            'DE',
                            'GR',
                            'HR',
                            'HU',
                            'IS',
                            'IE',
                            'IT',
                            'LV',
                            'LI',
                            'LT',
                            'LU',
                            'MT',
                            'NL',
                            'NO',
                            'PL',
                            'PT',
                            'RO',
                            'SK',
                            'SI',
                            'ES',
                            'SE',
                            'GB',
                            'MQ',
                            'YT',
                            'GP',
                            'GF',
                            'RE',
                            'MF',
                            'GI',
                            'GG',
                            'IM',
                            'JE',
                            'MC',
                            'CH',
                            'AD',
                            'SM',
                            'VA',
                            'AX',
                            'PM',
                            'BL',
                            'AF',
                            'AL',
                            'DZ',
                            'AS',
                            'AO',
                            'AI',
                            'AQ',
                            'AG',
                            'AR',
                            'AM',
                            'AW',
                            'AU',
                            'AZ',
                            'BS',
                            'BH',
                            'BD',
                            'BB',
                            'BY',
                            'BZ',
                            'BJ',
                            'BM',
                            'BT',
                            'BO',
                            'BQ',
                            'BA',
                            'BW',
                            'BV',
                            'BR',
                            'IO',
                            'VG',
                            'BN',
                            'BF',
                            'BI',
                            'KH',
                            'CM',
                            'CA',
                            'CV',
                            'KY',
                            'CF',
                            'TD',
                            'CL',
                            'CN',
                            'CX',
                            'CC',
                            'CO',
                            'KM',
                            'CK',
                            'CR',
                            'CU',
                            'CW',
                            'CD',
                            'DJ',
                            'DM',
                            'DO',
                            'TL',
                            'EC',
                            'EG',
                            'SV',
                            'GQ',
                            'ER',
                            'SZ',
                            'ET',
                            'FK',
                            'FO',
                            'FJ',
                            'PF',
                            'TF',
                            'GA',
                            'GM',
                            'GE',
                            'GH',
                            'GL',
                            'GD',
                            'GU',
                            'GT',
                            'GN',
                            'GW',
                            'GY',
                            'HT',
                            'HM',
                            'HN',
                            'HK',
                            'IN',
                            'ID',
                            'IR',
                            'IQ',
                            'IL',
                            'CI',
                            'JM',
                            'JP',
                            'JO',
                            'KZ',
                            'KE',
                            'KI',
                            'XK',
                            'KW',
                            'KG',
                            'LA',
                            'LB',
                            'LS',
                            'LR',
                            'LY',
                            'MO',
                            'MG',
                            'MW',
                            'MY',
                            'MV',
                            'ML',
                            'MH',
                            'MR',
                            'MU',
                            'MX',
                            'FM',
                            'MD',
                            'MN',
                            'ME',
                            'MS',
                            'MA',
                            'MZ',
                            'MM',
                            'NA',
                            'NR',
                            'NP',
                            'AN',
                            'NC',
                            'NZ',
                            'NI',
                            'NE',
                            'NG',
                            'NU',
                            'NF',
                            'KP',
                            'MK',
                            'MP',
                            'OM',
                            'PK',
                            'PW',
                            'PS',
                            'PA',
                            'PG',
                            'PY',
                            'PE',
                            'PH',
                            'PN',
                            'PR',
                            'QA',
                            'CG',
                            'RU',
                            'RW',
                            'SH',
                            'KN',
                            'LC',
                            'VC',
                            'WS',
                            'ST',
                            'SA',
                            'SN',
                            'RS',
                            'SC',
                            'SL',
                            'SG',
                            'SX',
                            'SB',
                            'SO',
                            'ZA',
                            'KR',
                            'GS',
                            'SS',
                            'LK',
                            'SD',
                            'SR',
                            'SY',
                            'SJ',
                            'TW',
                            'TJ',
                            'TZ',
                            'TH',
                            'TG',
                            'TK',
                            'TO',
                            'TT',
                            'TN',
                            'TR',
                            'TM',
                            'TC',
                            'TV',
                            'UG',
                            'UA',
                            'AE',
                            'UM',
                            'US',
                            'UY',
                            'UZ',
                            'VU',
                            'VE',
                            'VN',
                            'VI',
                            'WF',
                            'EH',
                            'YE',
                            'ZM',
                            'ZW',
                        ],
                    },
                    countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                },
                description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'",
            },
            industryCode: {
                maxLength: 5,
                minLength: 0,
                type: 'string',
                description: "Mandatory for all types except 'INDIVIDUAL', 'PCM_INDIVIDUAL' and 'PCM_BUSINESS'. In-house KYC partners -> Refer to Modulr Industry Code list. Outsourced KYC partners -> custom codes allowed.",
            },
            tcsVersion: {
                maximum: 1000,
                minimum: 1,
                type: 'integer',
                description: "Terms and conditions version. Mandatory for all types except 'PCM_INDIVIDUAL' and 'PCM_BUSINESS'",
                format: 'int32',
            },
            type: {
                type: 'string',
                description: 'Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n11. TRUST -> trust customer\n12. PREQUALIFIED -> only for use by customers who have been pre-authorised by Modulr',
                enum: [
                    'LLC',
                    'PLC',
                    'SOLETRADER',
                    'OPARTNRSHP',
                    'LPARTNRSHP',
                    'LLP',
                    'CHARITY',
                    'INDIVIDUAL',
                    'PCM_INDIVIDUAL',
                    'PCM_BUSINESS',
                    'TRUST',
                    'PREQUALIFIED',
                ],
            },
            expectedMonthlySpend: {
                maximum: 2147483647,
                minimum: 0,
                type: 'integer',
                description: "Mandatory for all types except 'PCM_INDIVIDUAL' and 'PCM_BUSINESS'",
                format: 'int32',
            },
            associates: {
                type: 'array',
                description: "Mandatory for all types except 'PCM_BUSINESS'",
                items: {
                    required: ['firstName', 'homeAddress', 'lastName', 'type'],
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            description: 'Type of associate',
                            enum: [
                                'DIRECTOR',
                                'PARTNER',
                                'CSECRETARY',
                                'SOLETRADER',
                                'BENE_OWNER',
                                'C_INTEREST',
                                'INDIVIDUAL',
                                'PCM_INDIVIDUAL',
                                'SIGNATORY',
                                'TRUST_SETTLOR',
                                'TRUST_BENEFICIARY',
                                'TRUST_TRUSTEE',
                                'PREQUALIFIED',
                            ],
                        },
                        firstName: {
                            maxLength: 100,
                            minLength: 1,
                            pattern: "^[\\p{L}' -]+$",
                            type: 'string',
                            description: 'Letters, hyphens and apostrophes',
                        },
                        middleName: {
                            pattern: "^[\\p{L}' -]*$",
                            type: 'string',
                            description: 'Letters, hyphens and apostrophes',
                        },
                        lastName: {
                            maxLength: 100,
                            minLength: 1,
                            pattern: "^[\\p{L}' -]+$",
                            type: 'string',
                            description: 'Letters, hyphens and apostrophes',
                        },
                        dateOfBirth: {
                            type: 'string',
                            description: 'Date in yyyy-MM-dd format. If associate is a non-applicant director or partner, then partial DOB of yyyy-MM format is allowed. Valid age is from 16 to 100 years. If Applicant then minimum age required is 18 years for specific partners. Required for all associate types except PCM_INDIVIDUAL.',
                        },
                        ownership: {
                            maximum: 100,
                            minimum: 1,
                            type: 'integer',
                            description: 'Ownership percentage for Partners',
                            format: 'int32',
                        },
                        homeAddress: {
                            required: ['addressLine1', 'postTown'],
                            type: 'object',
                            properties: {
                                addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                                addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                                postTown: { maxLength: 50, minLength: 0, type: 'string' },
                                postCode: { maxLength: 10, type: 'string' },
                                country: {
                                    type: 'string',
                                    enum: [
                                        'AT',
                                        'BE',
                                        'BG',
                                        'CY',
                                        'CZ',
                                        'DK',
                                        'EE',
                                        'FI',
                                        'FR',
                                        'DE',
                                        'GR',
                                        'HR',
                                        'HU',
                                        'IS',
                                        'IE',
                                        'IT',
                                        'LV',
                                        'LI',
                                        'LT',
                                        'LU',
                                        'MT',
                                        'NL',
                                        'NO',
                                        'PL',
                                        'PT',
                                        'RO',
                                        'SK',
                                        'SI',
                                        'ES',
                                        'SE',
                                        'GB',
                                        'MQ',
                                        'YT',
                                        'GP',
                                        'GF',
                                        'RE',
                                        'MF',
                                        'GI',
                                        'GG',
                                        'IM',
                                        'JE',
                                        'MC',
                                        'CH',
                                        'AD',
                                        'SM',
                                        'VA',
                                        'AX',
                                        'PM',
                                        'BL',
                                        'AF',
                                        'AL',
                                        'DZ',
                                        'AS',
                                        'AO',
                                        'AI',
                                        'AQ',
                                        'AG',
                                        'AR',
                                        'AM',
                                        'AW',
                                        'AU',
                                        'AZ',
                                        'BS',
                                        'BH',
                                        'BD',
                                        'BB',
                                        'BY',
                                        'BZ',
                                        'BJ',
                                        'BM',
                                        'BT',
                                        'BO',
                                        'BQ',
                                        'BA',
                                        'BW',
                                        'BV',
                                        'BR',
                                        'IO',
                                        'VG',
                                        'BN',
                                        'BF',
                                        'BI',
                                        'KH',
                                        'CM',
                                        'CA',
                                        'CV',
                                        'KY',
                                        'CF',
                                        'TD',
                                        'CL',
                                        'CN',
                                        'CX',
                                        'CC',
                                        'CO',
                                        'KM',
                                        'CK',
                                        'CR',
                                        'CU',
                                        'CW',
                                        'CD',
                                        'DJ',
                                        'DM',
                                        'DO',
                                        'TL',
                                        'EC',
                                        'EG',
                                        'SV',
                                        'GQ',
                                        'ER',
                                        'SZ',
                                        'ET',
                                        'FK',
                                        'FO',
                                        'FJ',
                                        'PF',
                                        'TF',
                                        'GA',
                                        'GM',
                                        'GE',
                                        'GH',
                                        'GL',
                                        'GD',
                                        'GU',
                                        'GT',
                                        'GN',
                                        'GW',
                                        'GY',
                                        'HT',
                                        'HM',
                                        'HN',
                                        'HK',
                                        'IN',
                                        'ID',
                                        'IR',
                                        'IQ',
                                        'IL',
                                        'CI',
                                        'JM',
                                        'JP',
                                        'JO',
                                        'KZ',
                                        'KE',
                                        'KI',
                                        'XK',
                                        'KW',
                                        'KG',
                                        'LA',
                                        'LB',
                                        'LS',
                                        'LR',
                                        'LY',
                                        'MO',
                                        'MG',
                                        'MW',
                                        'MY',
                                        'MV',
                                        'ML',
                                        'MH',
                                        'MR',
                                        'MU',
                                        'MX',
                                        'FM',
                                        'MD',
                                        'MN',
                                        'ME',
                                        'MS',
                                        'MA',
                                        'MZ',
                                        'MM',
                                        'NA',
                                        'NR',
                                        'NP',
                                        'AN',
                                        'NC',
                                        'NZ',
                                        'NI',
                                        'NE',
                                        'NG',
                                        'NU',
                                        'NF',
                                        'KP',
                                        'MK',
                                        'MP',
                                        'OM',
                                        'PK',
                                        'PW',
                                        'PS',
                                        'PA',
                                        'PG',
                                        'PY',
                                        'PE',
                                        'PH',
                                        'PN',
                                        'PR',
                                        'QA',
                                        'CG',
                                        'RU',
                                        'RW',
                                        'SH',
                                        'KN',
                                        'LC',
                                        'VC',
                                        'WS',
                                        'ST',
                                        'SA',
                                        'SN',
                                        'RS',
                                        'SC',
                                        'SL',
                                        'SG',
                                        'SX',
                                        'SB',
                                        'SO',
                                        'ZA',
                                        'KR',
                                        'GS',
                                        'SS',
                                        'LK',
                                        'SD',
                                        'SR',
                                        'SY',
                                        'SJ',
                                        'TW',
                                        'TJ',
                                        'TZ',
                                        'TH',
                                        'TG',
                                        'TK',
                                        'TO',
                                        'TT',
                                        'TN',
                                        'TR',
                                        'TM',
                                        'TC',
                                        'TV',
                                        'UG',
                                        'UA',
                                        'AE',
                                        'UM',
                                        'US',
                                        'UY',
                                        'UZ',
                                        'VU',
                                        'VE',
                                        'VN',
                                        'VI',
                                        'WF',
                                        'EH',
                                        'YE',
                                        'ZM',
                                        'ZW',
                                    ],
                                },
                                countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                            },
                            description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'",
                        },
                        applicant: {
                            type: 'boolean',
                            description: 'Indicates if the associate is the applicant. Only one associate can be marked as such.',
                        },
                        email: {
                            maxLength: 100,
                            minLength: 0,
                            pattern: '[^\\s@]+@[^\\s@]+\\.[^\\s@]+',
                            type: 'string',
                            description: 'Contact email address for applicants',
                        },
                        phone: {
                            type: 'string',
                            description: 'Contact phone number for applicants, will be formatted into international number pattern',
                        },
                        documentInfo: {
                            type: 'array',
                            description: 'Information on uploaded documents',
                            items: {
                                required: ['fileName', 'path', 'uploadedDate'],
                                type: 'object',
                                properties: {
                                    path: { type: 'string' },
                                    fileName: { type: 'string' },
                                    uploadedDate: {
                                        type: 'string',
                                        description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                        examples: ['2017-01-28T01:01:01+0000'],
                                    },
                                },
                                description: 'Document',
                            },
                        },
                        additionalIdentifiers: {
                            type: 'array',
                            description: 'Additional identifiers',
                            items: {
                                required: ['type', 'value'],
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        description: 'Type of additional personal identifier',
                                        enum: ['BSN'],
                                    },
                                    value: { type: 'string', description: 'Personal identifier value' },
                                },
                                description: 'Additional identifiers',
                            },
                        },
                        complianceData: {
                            required: ['relationship'],
                            type: 'object',
                            properties: { relationship: { maxLength: 50, minLength: 0, type: 'string' } },
                            description: 'Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.',
                        },
                    },
                    description: "Mandatory for all types except 'PCM_BUSINESS'",
                },
            },
            documentInfo: {
                type: 'array',
                description: 'information on uploaded documents',
                items: {
                    required: ['fileName', 'path', 'uploadedDate'],
                    type: 'object',
                    properties: {
                        path: { type: 'string' },
                        fileName: { type: 'string' },
                        uploadedDate: {
                            type: 'string',
                            description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                            examples: ['2017-01-28T01:01:01+0000'],
                        },
                    },
                    description: 'Document',
                },
            },
            legalEntity: {
                type: 'string',
                description: 'Legal entity of the customer',
                enum: ['GB', 'NL', 'IE'],
            },
            provisionalCustomerId: {
                type: 'string',
                description: 'Reference to provisional customer in onboarding flow',
            },
            customerTrust: {
                required: ['trustNature'],
                type: 'object',
                properties: {
                    trustNature: {
                        type: 'string',
                        description: 'Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.',
                        enum: [
                            'BARE_TRUSTS',
                            'INTEREST_IN_POSSESSION_TRUSTS',
                            'DISCRETIONARY_TRUSTS',
                            'ACCUMULATION_TRUSTS',
                            'MIXED_TRUSTS',
                            'SETTLOR_INTERESTED_TRUSTS',
                            'NON_RESIDENT_TRUSTS',
                            'OFFSHORE_TRUSTS',
                            'FAMILY_LIVING_TRUST',
                            'PILOT_TRUST',
                            'VULNERABLE_BENEFICIARY_TRUST',
                            'CHARITABLE_TRUSTS',
                            'IRREVOCABLE_LIFE_INSURANCE_TRUST',
                            'TESTAMENTARY_TRUSTS',
                            'OTHER',
                        ],
                    },
                },
                description: 'Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.',
            },
            taxProfile: {
                required: ['taxIdentifier'],
                type: 'object',
                properties: {
                    taxIdentifier: {
                        maxLength: 15,
                        minLength: 0,
                        type: 'string',
                        description: 'Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                    },
                },
                description: 'Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
            },
            complianceData: {
                type: 'object',
                properties: { typeDescription: { maxLength: 200, minLength: 0, type: 'string' } },
                description: 'Required for customers of type PREQUALIFIED. Not allowed for all other customer types.',
            },
        },
        description: 'Details of customer to create',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            required: ['createdDate', 'id', 'name', 'status', 'type', 'verificationStatus'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: "Unique identifier for a Customer. Begins with 'C'",
                    examples: ['C00000001'],
                },
                name: {
                    type: 'string',
                    description: "Customer's company name - must be unique across the Modulr platform.",
                },
                brandNames: {
                    type: 'array',
                    description: 'The customers brand name(s)',
                    items: {
                        required: ['id', 'name'],
                        type: 'object',
                        properties: {
                            id: { type: 'string', description: 'Unique id for the Brand Name' },
                            name: { type: 'string', description: 'The Brand Name' },
                        },
                        description: 'BrandName',
                    },
                },
                type: {
                    type: 'string',
                    description: 'Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`',
                    enum: [
                        'LLC',
                        'PLC',
                        'SOLETRADER',
                        'OPARTNRSHP',
                        'LPARTNRSHP',
                        'LLP',
                        'CHARITY',
                        'INDIVIDUAL',
                        'PCM_INDIVIDUAL',
                        'PCM_BUSINESS',
                        'TRUST',
                        'PREQUALIFIED',
                    ],
                },
                status: {
                    type: 'string',
                    description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`",
                    enum: ['ACTIVE', 'CLOSED'],
                },
                verificationStatus: {
                    type: 'string',
                    description: 'How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                    enum: [
                        'UNVERIFIED',
                        'VERIFIED',
                        'EXVERIFIED',
                        'REFERRED',
                        'DECLINED',
                        'REVIEWED',
                        'MIGRATED',
                    ],
                },
                companyRegNumber: {
                    type: 'string',
                    description: 'The company registration / incorporation number of the company. Only applicable for companies registered with Companies House',
                },
                expectedMonthlySpend: {
                    type: 'integer',
                    description: 'Indication of the monthly spend of the customer.',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                registeredAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { type: 'string' },
                        addressLine2: { type: 'string' },
                        postTown: { type: 'string' },
                        postCode: { type: 'string' },
                        country: { type: 'string' },
                        countrySubDivision: { type: 'string' },
                    },
                    description: 'Address',
                },
                tradingAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { type: 'string' },
                        addressLine2: { type: 'string' },
                        postTown: { type: 'string' },
                        postCode: { type: 'string' },
                        country: { type: 'string' },
                        countrySubDivision: { type: 'string' },
                    },
                    description: 'Address',
                },
                partnerId: { type: 'string', description: 'The owning partner identifier' },
                associates: {
                    type: 'array',
                    description: 'Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.',
                    items: {
                        required: ['dateOfBirth', 'firstName', 'id', 'lastName', 'type', 'verificationStatus'],
                        type: 'object',
                        properties: {
                            id: { type: 'string', description: 'Unique id for the Associate' },
                            firstName: { type: 'string', description: "Associate's first name(s)" },
                            middleName: { type: 'string', description: "Associate's middle name" },
                            lastName: { type: 'string', description: "Associate's surname" },
                            email: { type: 'string', description: "Associate's email address" },
                            phone: {
                                type: 'string',
                                description: "Associate's phone number, in international number format",
                            },
                            applicant: {
                                type: 'boolean',
                                description: 'Indicates which Associate originally applied for the Modulr account',
                            },
                            ownership: {
                                type: 'integer',
                                description: "The Associate's percentage ownership of the Customer",
                                format: 'int32',
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            type: {
                                type: 'string',
                                description: 'Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`',
                                enum: [
                                    'DIRECTOR',
                                    'PARTNER',
                                    'CSECRETARY',
                                    'SOLETRADER',
                                    'BENE_OWNER',
                                    'C_INTEREST',
                                    'INDIVIDUAL',
                                    'PCM_INDIVIDUAL',
                                    'SIGNATORY',
                                    'TRUST_SETTLOR',
                                    'TRUST_BENEFICIARY',
                                    'TRUST_TRUSTEE',
                                    'PREQUALIFIED',
                                ],
                            },
                            dateOfBirth: {
                                type: 'string',
                                description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown",
                            },
                            verificationStatus: {
                                type: 'string',
                                description: 'How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                                enum: [
                                    'UNVERIFIED',
                                    'VERIFIED',
                                    'EXVERIFIED',
                                    'REFERRED',
                                    'DECLINED',
                                    'REVIEWED',
                                    'MIGRATED',
                                ],
                            },
                            homeAddress: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: { type: 'string' },
                                    addressLine2: { type: 'string' },
                                    postTown: { type: 'string' },
                                    postCode: { type: 'string' },
                                    country: { type: 'string' },
                                    countrySubDivision: { type: 'string' },
                                },
                                description: 'Address',
                            },
                            documentInfo: {
                                type: 'array',
                                description: 'Documents gathered during Customer Due Diligence checks on an Associate.',
                                items: {
                                    required: ['fileName', 'path', 'uploadedDate'],
                                    type: 'object',
                                    properties: {
                                        path: { type: 'string' },
                                        fileName: { type: 'string' },
                                        uploadedDate: {
                                            type: 'string',
                                            description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                            examples: ['2017-01-28T01:01:01+0000'],
                                        },
                                    },
                                    description: 'Document',
                                },
                            },
                            additionalPersonalIdentifiers: {
                                type: 'array',
                                description: 'Additional personal identifier(s)',
                                items: {
                                    required: ['type', 'value'],
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            description: 'The type of Additional Personal Identifier\n\n`BSN`',
                                            enum: ['BSN'],
                                        },
                                        value: { type: 'string', description: 'Additional Personal Identifier value' },
                                    },
                                    description: 'AdditionalPersonalIdentifier',
                                },
                            },
                            complianceData: {
                                type: 'object',
                                properties: { relationship: { type: 'string' } },
                                description: 'Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.',
                            },
                        },
                        description: 'Associate',
                    },
                },
                industryCode: { type: 'string' },
                tcsVersion: {
                    type: 'integer',
                    description: 'Version of the Modulr Account Terms and Conditions the Customer has agreed to.',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                documentInfo: {
                    type: 'array',
                    description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.",
                    items: {
                        required: ['fileName', 'path', 'uploadedDate'],
                        type: 'object',
                        properties: {
                            path: { type: 'string' },
                            fileName: { type: 'string' },
                            uploadedDate: {
                                type: 'string',
                                description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                examples: ['2017-01-28T01:01:01+0000'],
                            },
                        },
                        description: 'Document',
                    },
                },
                externalReference: { type: 'string' },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                delegate: {
                    required: ['created', 'id', 'name', 'roleId', 'status', 'updated'],
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            description: 'Unique reference for the Delegate.',
                            examples: ['D0000001'],
                        },
                        name: { type: 'string', description: 'Name for the Delegate' },
                        address: {
                            required: ['addressLine1', 'country', 'postCode', 'postTown'],
                            type: 'object',
                            properties: {
                                addressLine1: { type: 'string' },
                                addressLine2: { type: 'string' },
                                postTown: { type: 'string' },
                                postCode: { type: 'string' },
                                country: { type: 'string' },
                                countrySubDivision: { type: 'string' },
                            },
                            description: 'Address',
                        },
                        roleId: {
                            type: 'string',
                            description: 'The id of the Role assigned to the delegate',
                            examples: ['R02002M5'],
                        },
                        externalReference: {
                            type: 'string',
                            description: 'External system reference for the Delegate',
                        },
                        partner: { type: 'string', description: 'Partner Bid.', examples: ['R0000001'] },
                        status: { type: 'string', description: 'Status of the Delegate.' },
                        created: {
                            type: 'string',
                            description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                            format: 'date-time',
                        },
                        updated: {
                            type: 'string',
                            description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                            format: 'date-time',
                        },
                    },
                    description: 'Delegate',
                },
                legalEntity: {
                    type: 'string',
                    description: 'Legal entity of the customer\n\n`GB` `NL` `IE`',
                    enum: ['GB', 'NL', 'IE'],
                },
                customerTrust: {
                    type: 'object',
                    properties: {
                        trustNature: {
                            type: 'string',
                            enum: [
                                'BARE_TRUSTS',
                                'INTEREST_IN_POSSESSION_TRUSTS',
                                'DISCRETIONARY_TRUSTS',
                                'ACCUMULATION_TRUSTS',
                                'MIXED_TRUSTS',
                                'SETTLOR_INTERESTED_TRUSTS',
                                'NON_RESIDENT_TRUSTS',
                                'OFFSHORE_TRUSTS',
                                'FAMILY_LIVING_TRUST',
                                'PILOT_TRUST',
                                'VULNERABLE_BENEFICIARY_TRUST',
                                'CHARITABLE_TRUSTS',
                                'IRREVOCABLE_LIFE_INSURANCE_TRUST',
                                'TESTAMENTARY_TRUSTS',
                                'OTHER',
                            ],
                            description: '`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`',
                        },
                    },
                    description: 'Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.',
                },
                taxProfile: {
                    required: ['taxIdentifier'],
                    type: 'object',
                    properties: {
                        taxIdentifier: {
                            type: 'string',
                            description: 'Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                        },
                    },
                    description: 'Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                },
                complianceData: {
                    type: 'object',
                    properties: { typeDescription: { type: 'string' } },
                    description: 'Required for customers of type PREQUALIFIED. Not allowed for all other customer types.',
                },
            },
            description: 'A Customer is a single legal entity that can have 1 or more accounts',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateCustomer = CreateCustomer;
const CreateMandate = {
    body: {
        required: [
            'accountName',
            'accountNumber',
            'address',
            'externalReference',
            'name',
            'phone',
            'reference',
            'sortCode',
        ],
        type: 'object',
        properties: {
            name: { maxLength: 40, minLength: 0, type: 'string', description: 'Name for mandate' },
            reference: {
                maxLength: 18,
                minLength: 6,
                pattern: '^[a-zA-Z 0-9\\.\\&\\/-]+$',
                type: 'string',
                description: 'Mandate reference, should contain only letters, numbers, space, dot, ampersand, forward-slash and hyphen',
                examples: ['REFER-1.2'],
            },
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w-\\s]*',
                type: 'string',
                description: 'External reference for mandate',
            },
            accountName: {
                maxLength: 100,
                minLength: 1,
                type: 'string',
                description: "Payee's account name",
            },
            sortCode: {
                pattern: '\\p{Digit}{6}',
                type: 'string',
                description: "Payee's sort code of account for which direct-debit-mandate has to be created.",
                examples: ['000000'],
            },
            accountNumber: {
                pattern: '\\p{Digit}{8}',
                type: 'string',
                description: "Payee's account number for which direct-debit-mandate has to be created.",
                examples: ['12345678'],
            },
            address: {
                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                type: 'object',
                properties: {
                    addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                    addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                    postTown: { maxLength: 50, minLength: 0, type: 'string' },
                    postCode: { maxLength: 8, minLength: 0, type: 'string' },
                    country: {
                        type: 'string',
                        enum: [
                            'AT',
                            'BE',
                            'BG',
                            'CY',
                            'CZ',
                            'DK',
                            'EE',
                            'FI',
                            'FR',
                            'DE',
                            'GR',
                            'HR',
                            'HU',
                            'IS',
                            'IE',
                            'IT',
                            'LV',
                            'LI',
                            'LT',
                            'LU',
                            'MT',
                            'NL',
                            'NO',
                            'PL',
                            'PT',
                            'RO',
                            'SK',
                            'SI',
                            'ES',
                            'SE',
                            'GB',
                            'MQ',
                            'YT',
                            'GP',
                            'GF',
                            'RE',
                            'MF',
                            'GI',
                            'GG',
                            'IM',
                            'JE',
                            'MC',
                            'CH',
                            'AD',
                            'SM',
                            'VA',
                            'AX',
                            'PM',
                            'BL',
                            'AF',
                            'AL',
                            'DZ',
                            'AS',
                            'AO',
                            'AI',
                            'AQ',
                            'AG',
                            'AR',
                            'AM',
                            'AW',
                            'AU',
                            'AZ',
                            'BS',
                            'BH',
                            'BD',
                            'BB',
                            'BY',
                            'BZ',
                            'BJ',
                            'BM',
                            'BT',
                            'BO',
                            'BQ',
                            'BA',
                            'BW',
                            'BV',
                            'BR',
                            'IO',
                            'VG',
                            'BN',
                            'BF',
                            'BI',
                            'KH',
                            'CM',
                            'CA',
                            'CV',
                            'KY',
                            'CF',
                            'TD',
                            'CL',
                            'CN',
                            'CX',
                            'CC',
                            'CO',
                            'KM',
                            'CK',
                            'CR',
                            'CU',
                            'CW',
                            'CD',
                            'DJ',
                            'DM',
                            'DO',
                            'TL',
                            'EC',
                            'EG',
                            'SV',
                            'GQ',
                            'ER',
                            'SZ',
                            'ET',
                            'FK',
                            'FO',
                            'FJ',
                            'PF',
                            'TF',
                            'GA',
                            'GM',
                            'GE',
                            'GH',
                            'GL',
                            'GD',
                            'GU',
                            'GT',
                            'GN',
                            'GW',
                            'GY',
                            'HT',
                            'HM',
                            'HN',
                            'HK',
                            'IN',
                            'ID',
                            'IR',
                            'IQ',
                            'IL',
                            'CI',
                            'JM',
                            'JP',
                            'JO',
                            'KZ',
                            'KE',
                            'KI',
                            'XK',
                            'KW',
                            'KG',
                            'LA',
                            'LB',
                            'LS',
                            'LR',
                            'LY',
                            'MO',
                            'MG',
                            'MW',
                            'MY',
                            'MV',
                            'ML',
                            'MH',
                            'MR',
                            'MU',
                            'MX',
                            'FM',
                            'MD',
                            'MN',
                            'ME',
                            'MS',
                            'MA',
                            'MZ',
                            'MM',
                            'NA',
                            'NR',
                            'NP',
                            'AN',
                            'NC',
                            'NZ',
                            'NI',
                            'NE',
                            'NG',
                            'NU',
                            'NF',
                            'KP',
                            'MK',
                            'MP',
                            'OM',
                            'PK',
                            'PW',
                            'PS',
                            'PA',
                            'PG',
                            'PY',
                            'PE',
                            'PH',
                            'PN',
                            'PR',
                            'QA',
                            'CG',
                            'RU',
                            'RW',
                            'SH',
                            'KN',
                            'LC',
                            'VC',
                            'WS',
                            'ST',
                            'SA',
                            'SN',
                            'RS',
                            'SC',
                            'SL',
                            'SG',
                            'SX',
                            'SB',
                            'SO',
                            'ZA',
                            'KR',
                            'GS',
                            'SS',
                            'LK',
                            'SD',
                            'SR',
                            'SY',
                            'SJ',
                            'TW',
                            'TJ',
                            'TZ',
                            'TH',
                            'TG',
                            'TK',
                            'TO',
                            'TT',
                            'TN',
                            'TR',
                            'TM',
                            'TC',
                            'TV',
                            'UG',
                            'UA',
                            'AE',
                            'UM',
                            'US',
                            'UY',
                            'UZ',
                            'VU',
                            'VE',
                            'VN',
                            'VI',
                            'WF',
                            'EH',
                            'YE',
                            'ZM',
                            'ZW',
                        ],
                    },
                },
            },
            phone: {
                maxLength: 14,
                minLength: 0,
                pattern: '\\p{Digit}+',
                type: 'string',
                description: "Payee's phone number",
            },
            email: {
                maxLength: 100,
                minLength: 0,
                pattern: '[^\\s@]+@[^\\s@]+\\.[^\\s@]+',
                type: 'string',
                description: "Payee's email address",
            },
            payeeAccountBid: { type: 'string', description: "Payee's accountBid" },
        },
        description: 'Details of the Direct Debit mandate.',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of account to create Direct Debit for.',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '200': {
            required: [
                'accountId',
                'accountNumber',
                'createdDate',
                'externalReference',
                'id',
                'nextValidCollectionDate',
                'reference',
                'sortCode',
                'status',
            ],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique id for direct-debit-mandate.',
                    examples: ['G0000001'],
                },
                accountId: {
                    type: 'string',
                    description: 'Unique id for account for this mandate.',
                    examples: ['A0000001'],
                },
                reference: { type: 'string', description: 'DDI reference that was used during creation.' },
                externalReference: {
                    type: 'string',
                    description: 'External reference that was used during creation (appears on the bank statement).',
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime when direct-debit-mandate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                status: {
                    type: 'string',
                    description: "Status of the direct-debit-mandate. mandates must be 'ACTIVE' to make collections. Can be one of PENDING, SUBMITTED, ACTIVE, SUSPENDED, REJECTED, CANCELLED\n\n`PENDING` `SUBMITTED` `ACTIVE` `SUSPENDED` `REJECTED` `CANCELLED`",
                    enum: ['PENDING', 'SUBMITTED', 'ACTIVE', 'SUSPENDED', 'REJECTED', 'CANCELLED'],
                    examples: ['ACTIVE'],
                },
                nextValidCollectionDate: {
                    type: 'string',
                    description: 'The earliest date a collection can be created. Format is yyyy-MM-dd.',
                    examples: ['2018-01-10'],
                },
                'Name given on Mandate': { type: 'string' },
                'Address given on Mandate': {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                        addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                        postTown: { maxLength: 50, minLength: 0, type: 'string' },
                        postCode: { maxLength: 8, minLength: 0, type: 'string' },
                        country: {
                            type: 'string',
                            enum: [
                                'AT',
                                'BE',
                                'BG',
                                'CY',
                                'CZ',
                                'DK',
                                'EE',
                                'FI',
                                'FR',
                                'DE',
                                'GR',
                                'HR',
                                'HU',
                                'IS',
                                'IE',
                                'IT',
                                'LV',
                                'LI',
                                'LT',
                                'LU',
                                'MT',
                                'NL',
                                'NO',
                                'PL',
                                'PT',
                                'RO',
                                'SK',
                                'SI',
                                'ES',
                                'SE',
                                'GB',
                                'MQ',
                                'YT',
                                'GP',
                                'GF',
                                'RE',
                                'MF',
                                'GI',
                                'GG',
                                'IM',
                                'JE',
                                'MC',
                                'CH',
                                'AD',
                                'SM',
                                'VA',
                                'AX',
                                'PM',
                                'BL',
                                'AF',
                                'AL',
                                'DZ',
                                'AS',
                                'AO',
                                'AI',
                                'AQ',
                                'AG',
                                'AR',
                                'AM',
                                'AW',
                                'AU',
                                'AZ',
                                'BS',
                                'BH',
                                'BD',
                                'BB',
                                'BY',
                                'BZ',
                                'BJ',
                                'BM',
                                'BT',
                                'BO',
                                'BQ',
                                'BA',
                                'BW',
                                'BV',
                                'BR',
                                'IO',
                                'VG',
                                'BN',
                                'BF',
                                'BI',
                                'KH',
                                'CM',
                                'CA',
                                'CV',
                                'KY',
                                'CF',
                                'TD',
                                'CL',
                                'CN',
                                'CX',
                                'CC',
                                'CO',
                                'KM',
                                'CK',
                                'CR',
                                'CU',
                                'CW',
                                'CD',
                                'DJ',
                                'DM',
                                'DO',
                                'TL',
                                'EC',
                                'EG',
                                'SV',
                                'GQ',
                                'ER',
                                'SZ',
                                'ET',
                                'FK',
                                'FO',
                                'FJ',
                                'PF',
                                'TF',
                                'GA',
                                'GM',
                                'GE',
                                'GH',
                                'GL',
                                'GD',
                                'GU',
                                'GT',
                                'GN',
                                'GW',
                                'GY',
                                'HT',
                                'HM',
                                'HN',
                                'HK',
                                'IN',
                                'ID',
                                'IR',
                                'IQ',
                                'IL',
                                'CI',
                                'JM',
                                'JP',
                                'JO',
                                'KZ',
                                'KE',
                                'KI',
                                'XK',
                                'KW',
                                'KG',
                                'LA',
                                'LB',
                                'LS',
                                'LR',
                                'LY',
                                'MO',
                                'MG',
                                'MW',
                                'MY',
                                'MV',
                                'ML',
                                'MH',
                                'MR',
                                'MU',
                                'MX',
                                'FM',
                                'MD',
                                'MN',
                                'ME',
                                'MS',
                                'MA',
                                'MZ',
                                'MM',
                                'NA',
                                'NR',
                                'NP',
                                'AN',
                                'NC',
                                'NZ',
                                'NI',
                                'NE',
                                'NG',
                                'NU',
                                'NF',
                                'KP',
                                'MK',
                                'MP',
                                'OM',
                                'PK',
                                'PW',
                                'PS',
                                'PA',
                                'PG',
                                'PY',
                                'PE',
                                'PH',
                                'PN',
                                'PR',
                                'QA',
                                'CG',
                                'RU',
                                'RW',
                                'SH',
                                'KN',
                                'LC',
                                'VC',
                                'WS',
                                'ST',
                                'SA',
                                'SN',
                                'RS',
                                'SC',
                                'SL',
                                'SG',
                                'SX',
                                'SB',
                                'SO',
                                'ZA',
                                'KR',
                                'GS',
                                'SS',
                                'LK',
                                'SD',
                                'SR',
                                'SY',
                                'SJ',
                                'TW',
                                'TJ',
                                'TZ',
                                'TH',
                                'TG',
                                'TK',
                                'TO',
                                'TT',
                                'TN',
                                'TR',
                                'TM',
                                'TC',
                                'TV',
                                'UG',
                                'UA',
                                'AE',
                                'UM',
                                'US',
                                'UY',
                                'UZ',
                                'VU',
                                'VE',
                                'VN',
                                'VI',
                                'WF',
                                'EH',
                                'YE',
                                'ZM',
                                'ZW',
                            ],
                            description: '`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                        },
                    },
                },
                sortCode: {
                    type: 'string',
                    description: 'Sort Code of the account for which direct-debit-mandate has been created.',
                    examples: ['123456'],
                },
                accountNumber: {
                    type: 'string',
                    description: 'Account Number for which direct-debit-mandate has been created.',
                    examples: ['87654321'],
                },
                payeeAccountBid: {
                    type: 'string',
                    description: 'Unique id for individual recipient account used for internal transfers',
                    examples: ['A0000001'],
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateMandate = CreateMandate;
const CreateOutboundCop = {
    body: {
        required: ['accountNumber', 'accountType', 'name', 'paymentAccountId', 'sortCode'],
        type: 'object',
        properties: {
            paymentAccountId: {
                type: 'string',
                description: 'The identifier of the account that a subsequent payment will be initiated from.',
                examples: ['A123AAA4'],
            },
            sortCode: {
                pattern: '^[0-9]{6}$',
                type: 'string',
                description: 'The sort code of the account.',
                examples: ['000000'],
            },
            accountNumber: {
                pattern: '^[0-9]{8}$',
                type: 'string',
                description: 'The account number.',
                examples: ['12345678'],
            },
            secondaryAccountId: {
                maxLength: 140,
                minLength: 1,
                pattern: '^.{0}$|^\u0000$|^([^\u0000])+$',
                type: 'string',
                description: 'Additional information used in conjunction with the Sort Code and Account Number to identify the account (such as a Building Society roll number).',
                examples: ['A-1234567890'],
            },
            accountType: {
                type: 'string',
                description: 'The type of account, either a personal or business account.',
                enum: ['PERSONAL', 'BUSINESS'],
                examples: ['PERSONAL'],
            },
            name: {
                maxLength: 140,
                minLength: 1,
                pattern: '^.{0}$|^\u0000$|^([^\u0000])+$',
                type: 'string',
                description: 'The name to match the account name against.',
                examples: ['Joe Bloggs'],
            },
        },
        description: 'Details of Account Name Check Request',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            required: ['id', 'result'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique id for the account name check.',
                    examples: ['C12001569Z'],
                },
                result: {
                    required: ['code'],
                    type: 'object',
                    properties: {
                        code: {
                            type: 'string',
                            description: 'The result of the account name check.\n\n`MATCHED` `NOT_MATCHED` `CLOSE_MATCH` `BUSINESS_ACCOUNT_NAME_MATCHED` `PERSONAL_ACCOUNT_NAME_MATCHED` `BUSINESS_ACCOUNT_CLOSE_MATCH` `PERSONAL_ACCOUNT_CLOSE_MATCH` `ACCOUNT_DOES_NOT_EXIST` `SECONDARY_ACCOUNT_ID_NOT_FOUND` `ACCOUNT_NOT_SUPPORTED` `OPTED_OUT` `ACCOUNT_SWITCHED` `WRONG_PARTICIPANT` `NO_RESPONSE` `NOT_ENROLLED`',
                            enum: [
                                'MATCHED',
                                'NOT_MATCHED',
                                'CLOSE_MATCH',
                                'BUSINESS_ACCOUNT_NAME_MATCHED',
                                'PERSONAL_ACCOUNT_NAME_MATCHED',
                                'BUSINESS_ACCOUNT_CLOSE_MATCH',
                                'PERSONAL_ACCOUNT_CLOSE_MATCH',
                                'ACCOUNT_DOES_NOT_EXIST',
                                'SECONDARY_ACCOUNT_ID_NOT_FOUND',
                                'ACCOUNT_NOT_SUPPORTED',
                                'OPTED_OUT',
                                'ACCOUNT_SWITCHED',
                                'WRONG_PARTICIPANT',
                                'NO_RESPONSE',
                                'NOT_ENROLLED',
                            ],
                            examples: ['MATCHED'],
                        },
                        name: {
                            type: 'string',
                            description: 'The actual name on the account (as provided by the participating organisation).',
                            examples: ['Joseph Bloggs'],
                        },
                    },
                    description: 'Account Name Check Result',
                },
            },
            description: 'Account Name Check Response',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                required: ['code', 'message'],
                type: 'object',
                properties: {
                    id: { type: 'string' },
                    field: { type: 'string' },
                    code: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                    errorCode: { type: 'string' },
                },
                description: 'Account Name Check Error Response',
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                required: ['code', 'message'],
                type: 'object',
                properties: {
                    id: { type: 'string' },
                    field: { type: 'string' },
                    code: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                    errorCode: { type: 'string' },
                },
                description: 'Account Name Check Error Response',
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '429': {
            type: 'array',
            items: {
                required: ['code', 'message'],
                type: 'object',
                properties: {
                    id: { type: 'string' },
                    field: { type: 'string' },
                    code: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                    errorCode: { type: 'string' },
                },
                description: 'Account Name Check Error Response',
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '500': {
            type: 'array',
            items: {
                required: ['code', 'message'],
                type: 'object',
                properties: {
                    id: { type: 'string' },
                    field: { type: 'string' },
                    code: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                    errorCode: { type: 'string' },
                },
                description: 'Account Name Check Error Response',
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '503': {
            type: 'array',
            items: {
                required: ['code', 'message'],
                type: 'object',
                properties: {
                    id: { type: 'string' },
                    field: { type: 'string' },
                    code: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                    errorCode: { type: 'string' },
                },
                description: 'Account Name Check Error Response',
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateOutboundCop = CreateOutboundCop;
const CreatePaymentInitiation = {
    body: {
        required: ['aspspId', 'destination', 'paymentAmount', 'paymentReference'],
        type: 'object',
        properties: {
            paymentAmount: {
                required: ['currency', 'value'],
                type: 'object',
                properties: {
                    currency: {
                        type: 'string',
                        description: 'Currency of the account in ISO 4217 format. Only allowable value is GBP',
                        enum: ['GBP'],
                    },
                    value: {
                        maximum: 2147483647,
                        minimum: 0.01,
                        type: 'number',
                        description: "Amount of the payment in Major Currency Units - '1' = 1.00 GBP",
                        examples: [100],
                    },
                },
                description: 'The amount of the payment',
            },
            paymentReference: {
                type: 'string',
                description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.",
                examples: ['Invoice ABC123'],
            },
            destination: {
                required: ['type'],
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        description: 'Indicates the type of destination. Can be one of ACCOUNT, SCAN',
                        enum: ['ACCOUNT', 'SCAN'],
                    },
                    id: {
                        type: 'string',
                        description: 'Identifier of the destination account if using ACCOUNT type',
                        examples: ['A1100001'],
                    },
                    accountNumber: {
                        pattern: '^[0-9]{8}$',
                        type: 'string',
                        description: 'Account Number of destination account if using SCAN type',
                        examples: ['12345678'],
                    },
                    sortCode: {
                        pattern: '^[0-9]{6}$',
                        type: 'string',
                        description: 'Sort Code of destination account if using SCAN type',
                        examples: ['000000'],
                    },
                    name: {
                        maxLength: 70,
                        minLength: 0,
                        type: 'string',
                        description: 'Name of destination account if using SCAN type (this may be truncated)',
                        examples: ['Test'],
                    },
                },
                description: 'The destination account for the payment',
            },
            aspspId: {
                type: 'string',
                description: 'Identifier for ASPSP being used for the payment',
                examples: ['H100000001'],
            },
            paymentContext: {
                type: 'object',
                properties: {
                    paymentContextCode: {
                        type: 'string',
                        description: 'Indicates type of Payment Context, can be one of BILLPAYMENT, ECOMMERCEGOODS, ECOMMERCESERVICES, OTHER, PARTYTOPARTY. If no value or paymentContext is provided, PARTYTOPARTY is considered the default value.',
                        enum: [
                            'BillPayment',
                            'EcommerceGoods',
                            'EcommerceServices',
                            'Other',
                            'PartyToParty',
                            'BILLPAYMENT',
                            'ECOMMERCEGOODS',
                            'ECOMMERCESERVICES',
                            'OTHER',
                            'PARTYTOPARTY',
                        ],
                    },
                    deliveryAddress: {
                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                        type: 'object',
                        properties: {
                            addressLine1: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'First line of the address',
                            },
                            addressLine2: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'Second line of the address',
                            },
                            postTown: {
                                maxLength: 35,
                                minLength: 0,
                                type: 'string',
                                description: 'The post town',
                            },
                            postCode: {
                                maxLength: 16,
                                minLength: 0,
                                type: 'string',
                                description: 'The postcode',
                            },
                            country: {
                                type: 'string',
                                description: 'The country',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'GB',
                                    'MQ',
                                    'YT',
                                    'GP',
                                    'GF',
                                    'RE',
                                    'MF',
                                    'GI',
                                    'GG',
                                    'IM',
                                    'JE',
                                    'MC',
                                    'CH',
                                    'AD',
                                    'SM',
                                    'VA',
                                    'AX',
                                    'PM',
                                    'BL',
                                    'AF',
                                    'AL',
                                    'DZ',
                                    'AS',
                                    'AO',
                                    'AI',
                                    'AQ',
                                    'AG',
                                    'AR',
                                    'AM',
                                    'AW',
                                    'AU',
                                    'AZ',
                                    'BS',
                                    'BH',
                                    'BD',
                                    'BB',
                                    'BY',
                                    'BZ',
                                    'BJ',
                                    'BM',
                                    'BT',
                                    'BO',
                                    'BQ',
                                    'BA',
                                    'BW',
                                    'BV',
                                    'BR',
                                    'IO',
                                    'VG',
                                    'BN',
                                    'BF',
                                    'BI',
                                    'KH',
                                    'CM',
                                    'CA',
                                    'CV',
                                    'KY',
                                    'CF',
                                    'TD',
                                    'CL',
                                    'CN',
                                    'CX',
                                    'CC',
                                    'CO',
                                    'KM',
                                    'CK',
                                    'CR',
                                    'CU',
                                    'CW',
                                    'CD',
                                    'DJ',
                                    'DM',
                                    'DO',
                                    'TL',
                                    'EC',
                                    'EG',
                                    'SV',
                                    'GQ',
                                    'ER',
                                    'SZ',
                                    'ET',
                                    'FK',
                                    'FO',
                                    'FJ',
                                    'PF',
                                    'TF',
                                    'GA',
                                    'GM',
                                    'GE',
                                    'GH',
                                    'GL',
                                    'GD',
                                    'GU',
                                    'GT',
                                    'GN',
                                    'GW',
                                    'GY',
                                    'HT',
                                    'HM',
                                    'HN',
                                    'HK',
                                    'IN',
                                    'ID',
                                    'IR',
                                    'IQ',
                                    'IL',
                                    'CI',
                                    'JM',
                                    'JP',
                                    'JO',
                                    'KZ',
                                    'KE',
                                    'KI',
                                    'XK',
                                    'KW',
                                    'KG',
                                    'LA',
                                    'LB',
                                    'LS',
                                    'LR',
                                    'LY',
                                    'MO',
                                    'MG',
                                    'MW',
                                    'MY',
                                    'MV',
                                    'ML',
                                    'MH',
                                    'MR',
                                    'MU',
                                    'MX',
                                    'FM',
                                    'MD',
                                    'MN',
                                    'ME',
                                    'MS',
                                    'MA',
                                    'MZ',
                                    'MM',
                                    'NA',
                                    'NR',
                                    'NP',
                                    'AN',
                                    'NC',
                                    'NZ',
                                    'NI',
                                    'NE',
                                    'NG',
                                    'NU',
                                    'NF',
                                    'KP',
                                    'MK',
                                    'MP',
                                    'OM',
                                    'PK',
                                    'PW',
                                    'PS',
                                    'PA',
                                    'PG',
                                    'PY',
                                    'PE',
                                    'PH',
                                    'PN',
                                    'PR',
                                    'QA',
                                    'CG',
                                    'RU',
                                    'RW',
                                    'SH',
                                    'KN',
                                    'LC',
                                    'VC',
                                    'WS',
                                    'ST',
                                    'SA',
                                    'SN',
                                    'RS',
                                    'SC',
                                    'SL',
                                    'SG',
                                    'SX',
                                    'SB',
                                    'SO',
                                    'ZA',
                                    'KR',
                                    'GS',
                                    'SS',
                                    'LK',
                                    'SD',
                                    'SR',
                                    'SY',
                                    'SJ',
                                    'TW',
                                    'TJ',
                                    'TZ',
                                    'TH',
                                    'TG',
                                    'TK',
                                    'TO',
                                    'TT',
                                    'TN',
                                    'TR',
                                    'TM',
                                    'TC',
                                    'TV',
                                    'UG',
                                    'UA',
                                    'AE',
                                    'UM',
                                    'US',
                                    'UY',
                                    'UZ',
                                    'VU',
                                    'VE',
                                    'VN',
                                    'VI',
                                    'WF',
                                    'EH',
                                    'YE',
                                    'ZM',
                                    'ZW',
                                ],
                            },
                        },
                        description: 'Information that locates and identifies a specific address, as defined by postal services or in free format text, must be specified if paymentContextCode is ECOMMERCEGOODS',
                    },
                    merchantCategoryCode: {
                        maxLength: 4,
                        minLength: 3,
                        type: 'string',
                        description: 'Merchant category code conform to ISO 18245, related to the type of services or goods provided for the transaction. Must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES',
                    },
                    merchantCustomerIdentification: {
                        maxLength: 70,
                        minLength: 1,
                        type: 'string',
                        description: 'Merchant customer identification, must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES',
                    },
                },
                description: 'Payment context for the initiation request',
            },
        },
        description: 'Request object to Initiate Payment',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            type: 'object',
            properties: {
                paymentInitiationId: {
                    type: 'string',
                    description: 'The unique identifier of the payment initiation request at Modulr',
                    examples: ['I000000001'],
                },
                redirectUrl: {
                    type: 'string',
                    description: 'A redirect URL for the user to authorise the payment initiation request at the ASPSP',
                    examples: ['https://www.bankofmoney.com/authorize'],
                },
            },
            description: 'Response object to Initiate Payment',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreatePaymentInitiation = CreatePaymentInitiation;
const CreatePayments = {
    body: {
        required: ['accountId', 'amount', 'description', 'payerDetail', 'type'],
        type: 'object',
        properties: {
            accountId: { type: 'string', description: 'The account to be credited' },
            payerDetail: {
                required: ['identifier', 'name'],
                type: 'object',
                properties: {
                    name: { type: 'string', description: 'Party name' },
                    identifier: {
                        required: ['type'],
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                description: 'Account identifier type',
                                enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                            },
                            accountNumber: { type: 'string', description: 'Account number' },
                            sortCode: { type: 'string', description: 'Sortcode' },
                            iban: { type: 'string', description: 'IBAN' },
                            bic: { type: 'string', description: 'BIC' },
                        },
                        description: 'Account identifier',
                    },
                    address: {
                        type: 'object',
                        properties: {
                            addressLine1: { type: 'string' },
                            addressLine2: { type: 'string' },
                            postTown: { type: 'string' },
                            postCode: { type: 'string' },
                            country: { type: 'string' },
                        },
                        description: 'Party address',
                    },
                },
                description: 'Payee details',
            },
            payeeDetail: {
                required: ['identifier', 'name'],
                type: 'object',
                properties: {
                    name: { type: 'string', description: 'Party name' },
                    identifier: {
                        required: ['type'],
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                description: 'Account identifier type',
                                enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                            },
                            accountNumber: { type: 'string', description: 'Account number' },
                            sortCode: { type: 'string', description: 'Sortcode' },
                            iban: { type: 'string', description: 'IBAN' },
                            bic: { type: 'string', description: 'BIC' },
                        },
                        description: 'Account identifier',
                    },
                    address: {
                        type: 'object',
                        properties: {
                            addressLine1: { type: 'string' },
                            addressLine2: { type: 'string' },
                            postTown: { type: 'string' },
                            postCode: { type: 'string' },
                            country: { type: 'string' },
                        },
                        description: 'Party address',
                    },
                },
                description: 'Payee details',
            },
            description: {
                maxLength: 255,
                minLength: 0,
                type: 'string',
                description: 'Description of the credit',
            },
            amount: {
                maximum: 2147483647,
                minimum: 0.01,
                type: 'number',
                description: "Amount of the payment in major current Units - '1' = 1.00 GBP",
            },
            type: {
                type: 'string',
                description: ' Type of credit, values: ',
                enum: ['PI_BACS', 'PI_DD', 'PI_FAST', 'PI_SECT', 'PI_SEPA_INST'],
            },
            transactionDate: {
                type: 'string',
                description: 'Date of credit in yyyy-MM-ddTHH:mm:ssZ format',
            },
            numberOfTransactions: {
                maximum: 50,
                minimum: 1,
                type: 'integer',
                description: 'Number of credit transactions to create, defaults to 1',
                format: 'int32',
            },
            schemeInformation: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'unique id that identifies a payment end-to-end within a scheme. If used ensure that its unique',
                    },
                },
                description: 'Optional scheme details',
            },
        },
        description: 'Details of credit to the account',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreatePayments = CreatePayments;
const CreatePhysicalCard = {
    body: {
        required: [
            'authentication',
            'design',
            'expiry',
            'externalRef',
            'holder',
            'limit',
            'printedName',
            'productCode',
        ],
        type: 'object',
        properties: {
            limit: {
                minimum: 1,
                type: 'number',
                description: 'Total card authorisation limit.',
                format: 'double',
                examples: [1000],
                maximum: 1.7976931348623157e308,
            },
            expiry: {
                type: 'string',
                description: 'ISO 8601 date with year & month components only. The supplied value must be in the future (cannot be the current month) and is _inclusive_ of the specified month.',
                examples: ['2018-12'],
            },
            productCode: {
                maxLength: 50,
                minLength: 1,
                type: 'string',
                description: 'Identifies the _type_ of card to create (GBP consumer, GBP business, etc). Modulr will supply a list of possible values.',
            },
            externalRef: {
                maxLength: 50,
                minLength: 1,
                pattern: '[\\w -]*',
                type: 'string',
                description: 'Client reference for the newly created card. Maximum of 50 alphanumeric characters (including underscore, hyphen and space).',
            },
            constraints: {
                type: 'object',
                properties: {
                    authorisation: {
                        type: 'object',
                        properties: {
                            spend: {
                                type: 'array',
                                description: 'Spending constraints',
                                items: {
                                    required: ['currency'],
                                    type: 'object',
                                    properties: {
                                        currency: {
                                            type: 'string',
                                            description: 'A 3 letter ISO 4217 code representing the transaction currency',
                                            enum: [
                                                'GBP',
                                                'EUR',
                                                'AED',
                                                'AFN',
                                                'ALL',
                                                'AMD',
                                                'ANG',
                                                'AOA',
                                                'ARS',
                                                'AUD',
                                                'AWG',
                                                'AZN',
                                                'BAM',
                                                'BBD',
                                                'BDT',
                                                'BGN',
                                                'BHD',
                                                'BIF',
                                                'BMD',
                                                'BND',
                                                'BOB',
                                                'BOV',
                                                'BRL',
                                                'BSD',
                                                'BTN',
                                                'BWP',
                                                'BYN',
                                                'BZD',
                                                'CAD',
                                                'CDF',
                                                'CHE',
                                                'CHF',
                                                'CHW',
                                                'CLF',
                                                'CLP',
                                                'CNY',
                                                'COP',
                                                'COU',
                                                'CRC',
                                                'CUC',
                                                'CUP',
                                                'CVE',
                                                'CZK',
                                                'DJF',
                                                'DKK',
                                                'DOP',
                                                'DZD',
                                                'EGP',
                                                'ERN',
                                                'ETB',
                                                'FJD',
                                                'FKP',
                                                'GEL',
                                                'GHS',
                                                'GIP',
                                                'GMD',
                                                'GNF',
                                                'GTQ',
                                                'GYD',
                                                'HKD',
                                                'HNL',
                                                'HRK',
                                                'HTG',
                                                'HUF',
                                                'IDR',
                                                'ILS',
                                                'INR',
                                                'IQD',
                                                'IRR',
                                                'ISK',
                                                'JMD',
                                                'JOD',
                                                'JPY',
                                                'KES',
                                                'KGS',
                                                'KHR',
                                                'KMF',
                                                'KPW',
                                                'KRW',
                                                'KWD',
                                                'KYD',
                                                'KZT',
                                                'LAK',
                                                'LBP',
                                                'LKR',
                                                'LRD',
                                                'LSL',
                                                'LYD',
                                                'MAD',
                                                'MDL',
                                                'MGA',
                                                'MKD',
                                                'MMK',
                                                'MNT',
                                                'MOP',
                                                'MRU',
                                                'MUR',
                                                'MVR',
                                                'MWK',
                                                'MXN',
                                                'MXV',
                                                'MYR',
                                                'MZN',
                                                'NAD',
                                                'NGN',
                                                'NIO',
                                                'NOK',
                                                'NPR',
                                                'NZD',
                                                'OMR',
                                                'PAB',
                                                'PEN',
                                                'PGK',
                                                'PHP',
                                                'PKR',
                                                'PLN',
                                                'PYG',
                                                'QAR',
                                                'RON',
                                                'RSD',
                                                'RUB',
                                                'RWF',
                                                'SAR',
                                                'SBD',
                                                'SCR',
                                                'SDG',
                                                'SEK',
                                                'SGD',
                                                'SLE',
                                                'SLL',
                                                'SOS',
                                                'SRD',
                                                'SSP',
                                                'STN',
                                                'SVC',
                                                'SYP',
                                                'SZL',
                                                'SHP',
                                                'THB',
                                                'TJS',
                                                'TMT',
                                                'TND',
                                                'TOP',
                                                'TRY',
                                                'TTD',
                                                'TWD',
                                                'TZS',
                                                'UAH',
                                                'UGX',
                                                'USD',
                                                'USN',
                                                'UYI',
                                                'UYU',
                                                'UYW',
                                                'UZS',
                                                'VES',
                                                'VND',
                                                'VUV',
                                                'WST',
                                                'XAF',
                                                'XAG',
                                                'XAU',
                                                'XBA',
                                                'XBB',
                                                'XBC',
                                                'XBD',
                                                'XCD',
                                                'XDR',
                                                'XOF',
                                                'XPD',
                                                'XPF',
                                                'XPT',
                                                'XSU',
                                                'XTS',
                                                'XUA',
                                                'XXX',
                                                'YER',
                                                'ZAR',
                                                'ZMW',
                                                'ZWL',
                                            ],
                                            examples: ['GBP'],
                                        },
                                        min: {
                                            type: 'number',
                                            description: 'Minimum spend amount (inclusive)',
                                            examples: [5],
                                        },
                                        max: {
                                            type: 'number',
                                            description: 'Maximum spend amount (inclusive)',
                                            examples: [2000],
                                        },
                                    },
                                    description: 'Spending constraints',
                                },
                            },
                        },
                        description: 'Authorisation constraints',
                    },
                },
                description: 'Constraints',
            },
            authentication: {
                required: ['knowledgeBase'],
                type: 'object',
                properties: {
                    knowledgeBase: {
                        type: 'array',
                        description: '3DS knowledge-based authentication (KBA) answers',
                        items: {
                            required: ['answer', 'type'],
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: '3DS knowledge-based authentication answer type',
                                    enum: [
                                        'FIRST_PET_NAME',
                                        'MATERNAL_GRANDMOTHER_MAIDEN_NAME',
                                        'FAVOURITE_CHILDHOOD_FRIEND',
                                        'FIRST_CAR',
                                        'CITY_PARENTS_MET',
                                    ],
                                },
                                answer: {
                                    maxLength: 45,
                                    minLength: 1,
                                    type: 'string',
                                    description: '3DS knowledge-based authentication answer',
                                },
                            },
                            description: '3DS Knowledge-Based Authentication (KBA) answers',
                        },
                    },
                },
                description: 'Authentication',
            },
            holder: {
                required: ['billingAddress', 'dateOfBirth', 'firstName', 'lastName', 'mobileNumber'],
                type: 'object',
                properties: {
                    title: {
                        pattern: '^[0-9a-zA-Z]{1,4}$',
                        type: 'string',
                        description: 'Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.',
                        examples: ['Mr'],
                    },
                    firstName: {
                        pattern: '[\\x20-\\x7e]{1,20}',
                        type: 'string',
                        description: 'Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                        examples: ['Joe'],
                    },
                    lastName: {
                        pattern: '[\\x20-\\x7e]{1,20}',
                        type: 'string',
                        description: 'Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                        examples: ['Bloggs'],
                    },
                    billingAddress: {
                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                        type: 'object',
                        properties: {
                            addressLine1: {
                                maxLength: 50,
                                minLength: 1,
                                type: 'string',
                                description: 'First line of address',
                                examples: ['Floor 10'],
                            },
                            addressLine2: {
                                maxLength: 50,
                                minLength: 0,
                                type: 'string',
                                description: 'Second line of address',
                                examples: ['80 George Street'],
                            },
                            postTown: {
                                maxLength: 20,
                                minLength: 1,
                                type: 'string',
                                description: 'Post town',
                                examples: ['EDINBURGH'],
                            },
                            postCode: {
                                maxLength: 10,
                                minLength: 1,
                                type: 'string',
                                description: 'Postcode',
                                examples: ['EH2 3BU'],
                            },
                            country: {
                                type: 'string',
                                description: 'Country (ISO 3166 alpha-2 country code)',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'AX',
                                    'AW',
                                    'BL',
                                    'CW',
                                    'GF',
                                    'GL',
                                    'GP',
                                    'ME',
                                    'MF',
                                    'MQ',
                                    'NC',
                                    'PF',
                                    'PM',
                                    'RE',
                                    'SX',
                                    'TF',
                                    'WF',
                                    'YT',
                                    'AI',
                                    'BM',
                                    'FK',
                                    'GB',
                                    'GG',
                                    'GI',
                                    'GS',
                                    'IO',
                                    'JE',
                                    'KY',
                                    'MS',
                                    'PN',
                                    'SH',
                                    'TC',
                                    'VG',
                                ],
                                examples: ['GB'],
                            },
                        },
                        description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                    },
                    dateOfBirth: {
                        type: 'string',
                        description: 'Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.',
                        format: 'date',
                        examples: ['2001-01-01'],
                    },
                    mobileNumber: {
                        type: 'string',
                        description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.",
                        examples: ['+447123456000'],
                    },
                    email: {
                        maxLength: 50,
                        minLength: 0,
                        type: 'string',
                        description: 'Cardholder email',
                        examples: ['cardholder@example.com'],
                    },
                },
                description: 'CardHolder',
            },
            shippingAddress: {
                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                type: 'object',
                properties: {
                    addressLine1: {
                        maxLength: 50,
                        minLength: 1,
                        type: 'string',
                        description: 'First line of address',
                        examples: ['Floor 10'],
                    },
                    addressLine2: {
                        maxLength: 50,
                        minLength: 0,
                        type: 'string',
                        description: 'Second line of address',
                        examples: ['80 George Street'],
                    },
                    postTown: {
                        maxLength: 20,
                        minLength: 1,
                        type: 'string',
                        description: 'Post town',
                        examples: ['EDINBURGH'],
                    },
                    postCode: {
                        maxLength: 10,
                        minLength: 1,
                        type: 'string',
                        description: 'Postcode',
                        examples: ['EH2 3BU'],
                    },
                    country: {
                        type: 'string',
                        description: 'Country (ISO 3166 alpha-2 country code)',
                        enum: [
                            'AT',
                            'BE',
                            'BG',
                            'CY',
                            'CZ',
                            'DK',
                            'EE',
                            'FI',
                            'FR',
                            'DE',
                            'GR',
                            'HR',
                            'HU',
                            'IS',
                            'IE',
                            'IT',
                            'LV',
                            'LI',
                            'LT',
                            'LU',
                            'MT',
                            'NL',
                            'NO',
                            'PL',
                            'PT',
                            'RO',
                            'SK',
                            'SI',
                            'ES',
                            'SE',
                            'AX',
                            'AW',
                            'BL',
                            'CW',
                            'GF',
                            'GL',
                            'GP',
                            'ME',
                            'MF',
                            'MQ',
                            'NC',
                            'PF',
                            'PM',
                            'RE',
                            'SX',
                            'TF',
                            'WF',
                            'YT',
                            'AI',
                            'BM',
                            'FK',
                            'GB',
                            'GG',
                            'GI',
                            'GS',
                            'IO',
                            'JE',
                            'KY',
                            'MS',
                            'PN',
                            'SH',
                            'TC',
                            'VG',
                        ],
                        examples: ['GB'],
                    },
                },
                description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
            },
            design: {
                required: ['cardRef', 'packagingRef'],
                type: 'object',
                properties: {
                    cardRef: { type: 'string', description: 'Design reference for card' },
                    packagingRef: { type: 'string', description: 'Design reference for card packaging' },
                },
                description: 'Design references for physical card and packaging',
            },
            printedName: {
                maxLength: 20,
                minLength: 1,
                pattern: "[a-zA-Z 0-9À-ŽȘȚ'’.,^-]{1,20}",
                type: 'string',
                description: 'Name to be printed on the card. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)',
                examples: ['Joe Bloggs'],
            },
        },
        description: 'Card',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    aid: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The account which card funds will be raised from.',
                    },
                },
                required: ['aid'],
            },
        ],
    },
    response: {
        '202': {
            required: ['taskId', 'taskUrl'],
            type: 'object',
            properties: {
                taskUrl: { type: 'string', description: 'Url of card task resource' },
                taskId: { type: 'string', description: 'ID of card task' },
                metaData: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        description: 'Meta data associated with async task response',
                    },
                    description: 'Meta data associated with async task response',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreatePhysicalCard = CreatePhysicalCard;
const CreateRule = {
    body: {
        required: ['accountId', 'data', 'name', 'type'],
        type: 'object',
        properties: {
            type: {
                type: 'string',
                description: 'The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}',
                enum: ['SPLIT', 'SWEEP', 'FUNDING'],
            },
            name: {
                maxLength: 25,
                minLength: 0,
                type: 'string',
                description: "Rule's name",
                examples: ['My new rule'],
            },
            accountId: {
                type: 'string',
                description: 'The Account which the Rule is created on.',
                examples: ['A1000001'],
            },
            data: {
                type: 'object',
                properties: {
                    daysToRun: {
                        type: 'array',
                        description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                        items: {
                            type: 'string',
                            description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                            enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
                        },
                    },
                    frequency: {
                        type: 'string',
                        description: 'Frequency of the rule. Sweep Rule Only',
                        enum: ['Daily'],
                    },
                    destinationId: {
                        type: 'string',
                        description: 'Id of destination beneficiary. e.g. B1000001. Sweep Rule Only',
                    },
                    balanceToLeave: {
                        type: 'number',
                        description: 'Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only',
                    },
                    triggerBalance: {
                        type: 'number',
                        description: 'Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only',
                    },
                    splits: {
                        type: 'array',
                        items: {
                            required: ['destinationId', 'percent'],
                            type: 'object',
                            properties: {
                                destinationId: {
                                    type: 'string',
                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                },
                                percent: {
                                    type: 'string',
                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                },
                            },
                            description: 'Configuration for a Split Rule',
                        },
                    },
                    conditionalSplits: {
                        type: 'array',
                        items: {
                            required: ['destinationId', 'percent'],
                            type: 'object',
                            properties: {
                                destinationId: {
                                    type: 'string',
                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                },
                                percent: {
                                    type: 'string',
                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                },
                            },
                            description: 'Configuration for a Split Rule',
                        },
                    },
                    conditionalSplitConfig: {
                        required: ['conditionAmount', 'destinationId', 'percent'],
                        type: 'object',
                        properties: {
                            destinationId: {
                                type: 'string',
                                description: 'Id of destination beneficiary. e.g. B1000001.',
                            },
                            percent: {
                                type: 'string',
                                description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                            },
                            conditionAmount: {
                                maximum: 2147483647,
                                minimum: 0.01,
                                type: 'number',
                                description: 'Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.',
                            },
                            conditionDone: {
                                type: 'boolean',
                                description: 'Whether the condition amount has been met. e.g. true or false',
                            },
                        },
                        description: 'Configuration for a Conditional Split Rule',
                    },
                    sourceId: {
                        type: 'string',
                        description: 'Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only',
                    },
                },
                description: 'Configuration fields for all types of rules. To be populated where applicable based on rule type.',
            },
        },
        description: 'create rule request',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            required: ['accountId', 'data', 'id', 'name', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique identifier for a Rule', examples: ['R1000001'] },
                type: {
                    type: 'string',
                    description: 'The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`',
                    enum: ['SPLIT', 'SWEEP', 'FUNDING'],
                },
                name: { type: 'string', description: "Rule's name", examples: ['My new rule'] },
                accountId: {
                    type: 'string',
                    description: 'The Account which the Rule is created on.',
                    examples: ['A1000001'],
                },
                data: {
                    type: 'object',
                    properties: {
                        daysToRun: {
                            type: 'array',
                            description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                            items: {
                                type: 'string',
                                description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`',
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        frequency: {
                            type: 'string',
                            description: 'Frequency of the rule. Sweep Rule Only\n\n`Daily`',
                            enum: ['Daily'],
                        },
                        destinationId: {
                            type: 'string',
                            description: 'Id of destination beneficiary. e.g. B1000001. Sweep Rule Only',
                        },
                        balanceToLeave: {
                            type: 'number',
                            description: 'Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only',
                        },
                        triggerBalance: {
                            type: 'number',
                            description: 'Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only',
                        },
                        splits: {
                            type: 'array',
                            items: {
                                required: ['destinationId', 'percent'],
                                type: 'object',
                                properties: {
                                    destinationId: {
                                        type: 'string',
                                        description: 'Id of destination beneficiary. e.g. B1000001.',
                                    },
                                    percent: {
                                        type: 'string',
                                        description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                    },
                                },
                                description: 'Configuration for a Split Rule',
                            },
                        },
                        conditionalSplits: {
                            type: 'array',
                            items: {
                                required: ['destinationId', 'percent'],
                                type: 'object',
                                properties: {
                                    destinationId: {
                                        type: 'string',
                                        description: 'Id of destination beneficiary. e.g. B1000001.',
                                    },
                                    percent: {
                                        type: 'string',
                                        description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                    },
                                },
                                description: 'Configuration for a Split Rule',
                            },
                        },
                        conditionalSplitConfig: {
                            required: ['conditionAmount', 'destinationId', 'percent'],
                            type: 'object',
                            properties: {
                                destinationId: {
                                    type: 'string',
                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                },
                                percent: {
                                    type: 'string',
                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                },
                                conditionAmount: {
                                    maximum: 2147483647,
                                    minimum: 0.01,
                                    type: 'number',
                                    description: 'Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.',
                                },
                                conditionDone: {
                                    type: 'boolean',
                                    description: 'Whether the condition amount has been met. e.g. true or false',
                                },
                            },
                            description: 'Configuration for a Conditional Split Rule',
                        },
                        sourceId: {
                            type: 'string',
                            description: 'Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only',
                        },
                    },
                    description: 'Configuration fields for all types of rules. To be populated where applicable based on rule type.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateRule = CreateRule;
const CreateStandingOrderInitiation = {
    body: {
        required: ['aspspId', 'context', 'payment', 'schedule'],
        type: 'object',
        properties: {
            aspspId: {
                type: 'string',
                description: 'Identifier for ASPSP being used for the standing order',
                examples: ['H100000001'],
            },
            payment: {
                required: ['amount', 'destination', 'reference'],
                type: 'object',
                properties: {
                    destination: {
                        required: ['type'],
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                description: 'Indicates the type of destination. Can be one of ACCOUNT, SCAN',
                                enum: ['ACCOUNT', 'SCAN'],
                            },
                            id: {
                                type: 'string',
                                description: 'Identifier of the destination account if using ACCOUNT type',
                                examples: ['A1100001'],
                            },
                            accountNumber: {
                                pattern: '^[0-9]{8}$',
                                type: 'string',
                                description: 'Account Number of destination account if using SCAN type',
                                examples: ['12345678'],
                            },
                            sortCode: {
                                pattern: '^[0-9]{6}$',
                                type: 'string',
                                description: 'Sort Code of destination account if using SCAN type',
                                examples: ['000000'],
                            },
                            name: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'Name of destination account if using SCAN type (this may be truncated)',
                                examples: ['Test'],
                            },
                        },
                        description: 'The destination account for the payment',
                    },
                    amount: {
                        required: ['currency', 'recurringAmount'],
                        type: 'object',
                        properties: {
                            currency: {
                                type: 'string',
                                description: 'Currency of the account in ISO 4217 format. Default is GBP',
                                enum: ['GBP'],
                            },
                            recurringAmount: {
                                maximum: 2147483647,
                                minimum: 0.01,
                                type: 'number',
                                description: "Recurring amount of the payment in Major Currency Units - '1' = 1.00 GBP",
                                examples: [100],
                            },
                        },
                        description: 'The amount of the standing order',
                    },
                    reference: {
                        type: 'string',
                        description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.",
                        examples: ['Invoice ABC123'],
                    },
                },
                description: 'The payment of the standing order',
            },
            schedule: {
                required: ['frequency', 'initialDate'],
                type: 'object',
                properties: {
                    frequency: {
                        type: 'string',
                        description: 'Type of the capability, can be one of WEEKLY, MONTHLY',
                        enum: ['WEEKLY', 'MONTHLY'],
                    },
                    initialDate: {
                        type: 'string',
                        description: "The date on which the standing order should begin. This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'",
                        examples: ['2021-03-25'],
                    },
                    finalDate: {
                        type: 'string',
                        description: "The optional date on which the standing order should end. If unspecified, the standing order will continue until cancelled.This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'",
                        examples: ['2021-03-25'],
                    },
                },
                description: 'The schedule of the standing order',
            },
            context: {
                required: ['merchant'],
                type: 'object',
                properties: {
                    paymentContextCode: {
                        type: 'string',
                        description: 'Indicates type of Payment Context, can be one of BILLPAYMENT, ECOMMERCEGOODS, ECOMMERCESERVICES, OTHER, PARTYTOPARTY. If no value or paymentContext is provided, PARTYTOPARTY is considered the default value.',
                        enum: [
                            'BillPayment',
                            'EcommerceGoods',
                            'EcommerceServices',
                            'Other',
                            'PartyToParty',
                            'BILLPAYMENT',
                            'ECOMMERCEGOODS',
                            'ECOMMERCESERVICES',
                            'OTHER',
                            'PARTYTOPARTY',
                        ],
                    },
                    deliveryAddress: {
                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                        type: 'object',
                        properties: {
                            addressLine1: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'First line of the address',
                            },
                            addressLine2: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'Second line of the address',
                            },
                            postTown: {
                                maxLength: 35,
                                minLength: 0,
                                type: 'string',
                                description: 'The post town',
                            },
                            postCode: {
                                maxLength: 16,
                                minLength: 0,
                                type: 'string',
                                description: 'The postcode',
                            },
                            country: {
                                type: 'string',
                                description: 'The country',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'GB',
                                    'MQ',
                                    'YT',
                                    'GP',
                                    'GF',
                                    'RE',
                                    'MF',
                                    'GI',
                                    'GG',
                                    'IM',
                                    'JE',
                                    'MC',
                                    'CH',
                                    'AD',
                                    'SM',
                                    'VA',
                                    'AX',
                                    'PM',
                                    'BL',
                                    'AF',
                                    'AL',
                                    'DZ',
                                    'AS',
                                    'AO',
                                    'AI',
                                    'AQ',
                                    'AG',
                                    'AR',
                                    'AM',
                                    'AW',
                                    'AU',
                                    'AZ',
                                    'BS',
                                    'BH',
                                    'BD',
                                    'BB',
                                    'BY',
                                    'BZ',
                                    'BJ',
                                    'BM',
                                    'BT',
                                    'BO',
                                    'BQ',
                                    'BA',
                                    'BW',
                                    'BV',
                                    'BR',
                                    'IO',
                                    'VG',
                                    'BN',
                                    'BF',
                                    'BI',
                                    'KH',
                                    'CM',
                                    'CA',
                                    'CV',
                                    'KY',
                                    'CF',
                                    'TD',
                                    'CL',
                                    'CN',
                                    'CX',
                                    'CC',
                                    'CO',
                                    'KM',
                                    'CK',
                                    'CR',
                                    'CU',
                                    'CW',
                                    'CD',
                                    'DJ',
                                    'DM',
                                    'DO',
                                    'TL',
                                    'EC',
                                    'EG',
                                    'SV',
                                    'GQ',
                                    'ER',
                                    'SZ',
                                    'ET',
                                    'FK',
                                    'FO',
                                    'FJ',
                                    'PF',
                                    'TF',
                                    'GA',
                                    'GM',
                                    'GE',
                                    'GH',
                                    'GL',
                                    'GD',
                                    'GU',
                                    'GT',
                                    'GN',
                                    'GW',
                                    'GY',
                                    'HT',
                                    'HM',
                                    'HN',
                                    'HK',
                                    'IN',
                                    'ID',
                                    'IR',
                                    'IQ',
                                    'IL',
                                    'CI',
                                    'JM',
                                    'JP',
                                    'JO',
                                    'KZ',
                                    'KE',
                                    'KI',
                                    'XK',
                                    'KW',
                                    'KG',
                                    'LA',
                                    'LB',
                                    'LS',
                                    'LR',
                                    'LY',
                                    'MO',
                                    'MG',
                                    'MW',
                                    'MY',
                                    'MV',
                                    'ML',
                                    'MH',
                                    'MR',
                                    'MU',
                                    'MX',
                                    'FM',
                                    'MD',
                                    'MN',
                                    'ME',
                                    'MS',
                                    'MA',
                                    'MZ',
                                    'MM',
                                    'NA',
                                    'NR',
                                    'NP',
                                    'AN',
                                    'NC',
                                    'NZ',
                                    'NI',
                                    'NE',
                                    'NG',
                                    'NU',
                                    'NF',
                                    'KP',
                                    'MK',
                                    'MP',
                                    'OM',
                                    'PK',
                                    'PW',
                                    'PS',
                                    'PA',
                                    'PG',
                                    'PY',
                                    'PE',
                                    'PH',
                                    'PN',
                                    'PR',
                                    'QA',
                                    'CG',
                                    'RU',
                                    'RW',
                                    'SH',
                                    'KN',
                                    'LC',
                                    'VC',
                                    'WS',
                                    'ST',
                                    'SA',
                                    'SN',
                                    'RS',
                                    'SC',
                                    'SL',
                                    'SG',
                                    'SX',
                                    'SB',
                                    'SO',
                                    'ZA',
                                    'KR',
                                    'GS',
                                    'SS',
                                    'LK',
                                    'SD',
                                    'SR',
                                    'SY',
                                    'SJ',
                                    'TW',
                                    'TJ',
                                    'TZ',
                                    'TH',
                                    'TG',
                                    'TK',
                                    'TO',
                                    'TT',
                                    'TN',
                                    'TR',
                                    'TM',
                                    'TC',
                                    'TV',
                                    'UG',
                                    'UA',
                                    'AE',
                                    'UM',
                                    'US',
                                    'UY',
                                    'UZ',
                                    'VU',
                                    'VE',
                                    'VN',
                                    'VI',
                                    'WF',
                                    'EH',
                                    'YE',
                                    'ZM',
                                    'ZW',
                                ],
                            },
                        },
                        description: 'Information that locates and identifies a specific address, as defined by postal services or in free format text, must be specified if paymentContextCode is ECOMMERCEGOODS',
                    },
                    merchant: {
                        type: 'object',
                        properties: {
                            categoryCode: {
                                maxLength: 4,
                                minLength: 3,
                                type: 'string',
                                description: 'Merchant category code conform to ISO 18245, related to the type of services or goods provided for the transaction. Must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES',
                            },
                            customerId: {
                                maxLength: 70,
                                minLength: 1,
                                type: 'string',
                                description: 'Merchant customer identification, must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES',
                            },
                        },
                        description: 'Merchant details for the payment context',
                    },
                },
                description: 'Payment context for the initiation request',
            },
        },
        description: 'Request object to Initiate Standing Order',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            type: 'object',
            properties: {
                standingOrderInitiationId: {
                    type: 'string',
                    description: 'The unique identifier of the standing order initiation request at Modulr',
                    examples: ['I000000001'],
                },
                redirectUrl: {
                    type: 'string',
                    description: 'A redirect URL for the user to authorise the standing order initiation request at the ASPSP',
                    examples: ['https://www.bankofmoney.com/authorize'],
                },
            },
            description: 'Response object to Initiate Standing Order',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.CreateStandingOrderInitiation = CreateStandingOrderInitiation;
const DeleteBeneficiaries = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    cid: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of customer to delete beneficiaries for',
                    },
                },
                required: ['cid'],
            },
            {
                type: 'object',
                properties: {
                    bid: {
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID(s) of beneficiaries to delete, must owned by customer and active',
                    },
                },
                required: ['bid'],
            },
        ],
    },
    response: {
        '200': {
            type: 'object',
            additionalProperties: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '207': { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.DeleteBeneficiaries = DeleteBeneficiaries;
const EditAccount = {
    body: {
        type: 'object',
        properties: {
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w \\-]*',
                type: 'string',
                description: 'External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long',
            },
            name: {
                maxLength: 40,
                minLength: 0,
                type: 'string',
                description: "Name for the account, only applicable for 'PCM_INDIVIDUAL' and 'PCM_BUSINESS' customer types",
            },
        },
        description: 'Details of account to edit',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of account to be edited',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '200': {
            required: [
                'availableBalance',
                'balance',
                'createdDate',
                'currency',
                'customerId',
                'id',
                'identifiers',
                'name',
                'status',
            ],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique id for the account', examples: ['A0000001'] },
                name: { type: 'string', description: 'Name for the account' },
                balance: {
                    type: 'string',
                    description: "Balance of the account in format 'NN.NN'",
                    examples: ['10000.0'],
                },
                availableBalance: {
                    type: 'string',
                    description: 'The current available balance of the Account. Calculated by subtracting any pending payments from the current balance',
                    examples: ['10000.0'],
                },
                currency: {
                    type: 'string',
                    description: 'Currency of the account in ISO 4217 format',
                    examples: ['GBP'],
                },
                status: {
                    type: 'string',
                    description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`",
                    enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                    examples: ['ACTIVE'],
                },
                identifiers: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                description: '`SCAN` `IBAN` `DD` `INTL`',
                            },
                            accountNumber: {
                                type: 'string',
                                description: 'Bank account Sort Code',
                                examples: ['12345678'],
                            },
                            sortCode: {
                                type: 'string',
                                description: 'Bank account Sort Code',
                                examples: ['000000'],
                            },
                            iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                            bic: { type: 'string', examples: ['MODRGB21'] },
                            currency: { type: 'string', examples: ['GBP'] },
                            countrySpecificDetails: {
                                type: 'object',
                                properties: {
                                    bankName: {
                                        type: 'string',
                                        description: 'The name of the destination bank.',
                                        examples: ['Apple Bank'],
                                    },
                                    bankAddress: {
                                        type: 'string',
                                        description: 'The address of the destination bank.',
                                        examples: ['2100 Broadway'],
                                    },
                                    bankCity: {
                                        type: 'string',
                                        description: 'The city in which the destination bank resides.',
                                        examples: ['New York City'],
                                    },
                                    bankBranchName: {
                                        type: 'string',
                                        description: "The name of the destination bank's branch.",
                                        examples: ['New York'],
                                    },
                                    bankBranchCode: {
                                        type: 'string',
                                        description: "The code of the destination bank's branch.",
                                        examples: ['44-04'],
                                    },
                                    bankCode: {
                                        type: 'string',
                                        description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                    },
                                    chineseId: {
                                        type: 'string',
                                        description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                        examples: ['01101201901018889'],
                                    },
                                    province: {
                                        type: 'string',
                                        description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                        examples: ['Zhejiang'],
                                    },
                                    business: {
                                        type: 'boolean',
                                        description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                        examples: [true],
                                    },
                                    bankCodeType: {
                                        type: 'string',
                                        description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                        enum: ['ABA', 'CHIPS'],
                                        examples: ['ABA'],
                                    },
                                    bankCountry: {
                                        type: 'string',
                                        description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                        enum: [
                                            'AT',
                                            'BE',
                                            'BG',
                                            'CY',
                                            'CZ',
                                            'DK',
                                            'EE',
                                            'FI',
                                            'FR',
                                            'DE',
                                            'GR',
                                            'HR',
                                            'HU',
                                            'IS',
                                            'IE',
                                            'IT',
                                            'LV',
                                            'LI',
                                            'LT',
                                            'LU',
                                            'MT',
                                            'NL',
                                            'NO',
                                            'PL',
                                            'PT',
                                            'RO',
                                            'SK',
                                            'SI',
                                            'ES',
                                            'SE',
                                            'GB',
                                            'MQ',
                                            'YT',
                                            'GP',
                                            'GF',
                                            'RE',
                                            'MF',
                                            'GI',
                                            'GG',
                                            'IM',
                                            'JE',
                                            'MC',
                                            'CH',
                                            'AD',
                                            'SM',
                                            'VA',
                                            'AX',
                                            'PM',
                                            'BL',
                                            'AF',
                                            'AL',
                                            'DZ',
                                            'AS',
                                            'AO',
                                            'AI',
                                            'AQ',
                                            'AG',
                                            'AR',
                                            'AM',
                                            'AW',
                                            'AU',
                                            'AZ',
                                            'BS',
                                            'BH',
                                            'BD',
                                            'BB',
                                            'BY',
                                            'BZ',
                                            'BJ',
                                            'BM',
                                            'BT',
                                            'BO',
                                            'BQ',
                                            'BA',
                                            'BW',
                                            'BV',
                                            'BR',
                                            'IO',
                                            'VG',
                                            'BN',
                                            'BF',
                                            'BI',
                                            'KH',
                                            'CM',
                                            'CA',
                                            'CV',
                                            'KY',
                                            'CF',
                                            'TD',
                                            'CL',
                                            'CN',
                                            'CX',
                                            'CC',
                                            'CO',
                                            'KM',
                                            'CK',
                                            'CR',
                                            'CU',
                                            'CW',
                                            'CD',
                                            'DJ',
                                            'DM',
                                            'DO',
                                            'TL',
                                            'EC',
                                            'EG',
                                            'SV',
                                            'GQ',
                                            'ER',
                                            'SZ',
                                            'ET',
                                            'FK',
                                            'FO',
                                            'FJ',
                                            'PF',
                                            'TF',
                                            'GA',
                                            'GM',
                                            'GE',
                                            'GH',
                                            'GL',
                                            'GD',
                                            'GU',
                                            'GT',
                                            'GN',
                                            'GW',
                                            'GY',
                                            'HT',
                                            'HM',
                                            'HN',
                                            'HK',
                                            'IN',
                                            'ID',
                                            'IR',
                                            'IQ',
                                            'IL',
                                            'CI',
                                            'JM',
                                            'JP',
                                            'JO',
                                            'KZ',
                                            'KE',
                                            'KI',
                                            'XK',
                                            'KW',
                                            'KG',
                                            'LA',
                                            'LB',
                                            'LS',
                                            'LR',
                                            'LY',
                                            'MO',
                                            'MG',
                                            'MW',
                                            'MY',
                                            'MV',
                                            'ML',
                                            'MH',
                                            'MR',
                                            'MU',
                                            'MX',
                                            'FM',
                                            'MD',
                                            'MN',
                                            'ME',
                                            'MS',
                                            'MA',
                                            'MZ',
                                            'MM',
                                            'NA',
                                            'NR',
                                            'NP',
                                            'AN',
                                            'NC',
                                            'NZ',
                                            'NI',
                                            'NE',
                                            'NG',
                                            'NU',
                                            'NF',
                                            'KP',
                                            'MK',
                                            'MP',
                                            'OM',
                                            'PK',
                                            'PW',
                                            'PS',
                                            'PA',
                                            'PG',
                                            'PY',
                                            'PE',
                                            'PH',
                                            'PN',
                                            'PR',
                                            'QA',
                                            'CG',
                                            'RU',
                                            'RW',
                                            'SH',
                                            'KN',
                                            'LC',
                                            'VC',
                                            'WS',
                                            'ST',
                                            'SA',
                                            'SN',
                                            'RS',
                                            'SC',
                                            'SL',
                                            'SG',
                                            'SX',
                                            'SB',
                                            'SO',
                                            'ZA',
                                            'KR',
                                            'GS',
                                            'SS',
                                            'LK',
                                            'SD',
                                            'SR',
                                            'SY',
                                            'SJ',
                                            'TW',
                                            'TJ',
                                            'TZ',
                                            'TH',
                                            'TG',
                                            'TK',
                                            'TO',
                                            'TT',
                                            'TN',
                                            'TR',
                                            'TM',
                                            'TC',
                                            'TV',
                                            'UG',
                                            'UA',
                                            'AE',
                                            'UM',
                                            'US',
                                            'UY',
                                            'UZ',
                                            'VU',
                                            'VE',
                                            'VN',
                                            'VI',
                                            'WF',
                                            'EH',
                                            'YE',
                                            'ZM',
                                            'ZW',
                                        ],
                                        examples: ['US'],
                                    },
                                },
                            },
                        },
                        description: 'Account Identifier',
                    },
                },
                customerId: {
                    type: 'string',
                    description: 'Unique id of the Customer',
                    examples: ['C0000001'],
                },
                customerName: { type: 'string', description: 'Customer Name' },
                externalReference: {
                    type: 'string',
                    description: 'Your reference for an account',
                    examples: ['aReference_00001'],
                },
                accessGroups: {
                    type: 'array',
                    description: 'Ids of Access Groups this account belongs to',
                    items: { type: 'string', description: 'Ids of Access Groups this account belongs to' },
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                directDebit: { type: 'boolean', description: 'Direct Debit Enabled' },
                securedFundingLimit: {
                    type: 'string',
                    description: 'Limit of funds available below a balance of zero',
                },
            },
            description: 'Account',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.EditAccount = EditAccount;
const EditCustomer = {
    body: {
        type: 'object',
        properties: {
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w \\-]*',
                type: 'string',
                description: 'External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long',
            },
            associates: {
                type: 'array',
                description: "Applicable to all types except 'PCM_BUSINESS'",
                items: {
                    required: ['firstName', 'homeAddress', 'lastName', 'type'],
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            description: 'Type of associate',
                            enum: [
                                'DIRECTOR',
                                'PARTNER',
                                'CSECRETARY',
                                'SOLETRADER',
                                'BENE_OWNER',
                                'C_INTEREST',
                                'INDIVIDUAL',
                                'PCM_INDIVIDUAL',
                                'SIGNATORY',
                                'TRUST_SETTLOR',
                                'TRUST_BENEFICIARY',
                                'TRUST_TRUSTEE',
                                'PREQUALIFIED',
                            ],
                        },
                        firstName: {
                            maxLength: 100,
                            minLength: 1,
                            pattern: "^[\\p{L}' -]+$",
                            type: 'string',
                            description: 'Letters, hyphens and apostrophes',
                        },
                        middleName: {
                            pattern: "^[\\p{L}' -]*$",
                            type: 'string',
                            description: 'Letters, hyphens and apostrophes',
                        },
                        lastName: {
                            maxLength: 100,
                            minLength: 1,
                            pattern: "^[\\p{L}' -]+$",
                            type: 'string',
                            description: 'Letters, hyphens and apostrophes',
                        },
                        dateOfBirth: {
                            type: 'string',
                            description: 'Date in yyyy-MM-dd format. If associate is a non-applicant director or partner, then partial DOB of yyyy-MM format is allowed. Valid age is from 16 to 100 years. If Applicant then minimum age required is 18 years for specific partners. Required for all associate types except PCM_INDIVIDUAL.',
                        },
                        ownership: {
                            maximum: 100,
                            minimum: 1,
                            type: 'integer',
                            description: 'Ownership percentage for Partners',
                            format: 'int32',
                        },
                        homeAddress: {
                            required: ['addressLine1', 'postTown'],
                            type: 'object',
                            properties: {
                                addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                                addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                                postTown: { maxLength: 50, minLength: 0, type: 'string' },
                                postCode: { maxLength: 10, type: 'string' },
                                country: {
                                    type: 'string',
                                    enum: [
                                        'AT',
                                        'BE',
                                        'BG',
                                        'CY',
                                        'CZ',
                                        'DK',
                                        'EE',
                                        'FI',
                                        'FR',
                                        'DE',
                                        'GR',
                                        'HR',
                                        'HU',
                                        'IS',
                                        'IE',
                                        'IT',
                                        'LV',
                                        'LI',
                                        'LT',
                                        'LU',
                                        'MT',
                                        'NL',
                                        'NO',
                                        'PL',
                                        'PT',
                                        'RO',
                                        'SK',
                                        'SI',
                                        'ES',
                                        'SE',
                                        'GB',
                                        'MQ',
                                        'YT',
                                        'GP',
                                        'GF',
                                        'RE',
                                        'MF',
                                        'GI',
                                        'GG',
                                        'IM',
                                        'JE',
                                        'MC',
                                        'CH',
                                        'AD',
                                        'SM',
                                        'VA',
                                        'AX',
                                        'PM',
                                        'BL',
                                        'AF',
                                        'AL',
                                        'DZ',
                                        'AS',
                                        'AO',
                                        'AI',
                                        'AQ',
                                        'AG',
                                        'AR',
                                        'AM',
                                        'AW',
                                        'AU',
                                        'AZ',
                                        'BS',
                                        'BH',
                                        'BD',
                                        'BB',
                                        'BY',
                                        'BZ',
                                        'BJ',
                                        'BM',
                                        'BT',
                                        'BO',
                                        'BQ',
                                        'BA',
                                        'BW',
                                        'BV',
                                        'BR',
                                        'IO',
                                        'VG',
                                        'BN',
                                        'BF',
                                        'BI',
                                        'KH',
                                        'CM',
                                        'CA',
                                        'CV',
                                        'KY',
                                        'CF',
                                        'TD',
                                        'CL',
                                        'CN',
                                        'CX',
                                        'CC',
                                        'CO',
                                        'KM',
                                        'CK',
                                        'CR',
                                        'CU',
                                        'CW',
                                        'CD',
                                        'DJ',
                                        'DM',
                                        'DO',
                                        'TL',
                                        'EC',
                                        'EG',
                                        'SV',
                                        'GQ',
                                        'ER',
                                        'SZ',
                                        'ET',
                                        'FK',
                                        'FO',
                                        'FJ',
                                        'PF',
                                        'TF',
                                        'GA',
                                        'GM',
                                        'GE',
                                        'GH',
                                        'GL',
                                        'GD',
                                        'GU',
                                        'GT',
                                        'GN',
                                        'GW',
                                        'GY',
                                        'HT',
                                        'HM',
                                        'HN',
                                        'HK',
                                        'IN',
                                        'ID',
                                        'IR',
                                        'IQ',
                                        'IL',
                                        'CI',
                                        'JM',
                                        'JP',
                                        'JO',
                                        'KZ',
                                        'KE',
                                        'KI',
                                        'XK',
                                        'KW',
                                        'KG',
                                        'LA',
                                        'LB',
                                        'LS',
                                        'LR',
                                        'LY',
                                        'MO',
                                        'MG',
                                        'MW',
                                        'MY',
                                        'MV',
                                        'ML',
                                        'MH',
                                        'MR',
                                        'MU',
                                        'MX',
                                        'FM',
                                        'MD',
                                        'MN',
                                        'ME',
                                        'MS',
                                        'MA',
                                        'MZ',
                                        'MM',
                                        'NA',
                                        'NR',
                                        'NP',
                                        'AN',
                                        'NC',
                                        'NZ',
                                        'NI',
                                        'NE',
                                        'NG',
                                        'NU',
                                        'NF',
                                        'KP',
                                        'MK',
                                        'MP',
                                        'OM',
                                        'PK',
                                        'PW',
                                        'PS',
                                        'PA',
                                        'PG',
                                        'PY',
                                        'PE',
                                        'PH',
                                        'PN',
                                        'PR',
                                        'QA',
                                        'CG',
                                        'RU',
                                        'RW',
                                        'SH',
                                        'KN',
                                        'LC',
                                        'VC',
                                        'WS',
                                        'ST',
                                        'SA',
                                        'SN',
                                        'RS',
                                        'SC',
                                        'SL',
                                        'SG',
                                        'SX',
                                        'SB',
                                        'SO',
                                        'ZA',
                                        'KR',
                                        'GS',
                                        'SS',
                                        'LK',
                                        'SD',
                                        'SR',
                                        'SY',
                                        'SJ',
                                        'TW',
                                        'TJ',
                                        'TZ',
                                        'TH',
                                        'TG',
                                        'TK',
                                        'TO',
                                        'TT',
                                        'TN',
                                        'TR',
                                        'TM',
                                        'TC',
                                        'TV',
                                        'UG',
                                        'UA',
                                        'AE',
                                        'UM',
                                        'US',
                                        'UY',
                                        'UZ',
                                        'VU',
                                        'VE',
                                        'VN',
                                        'VI',
                                        'WF',
                                        'EH',
                                        'YE',
                                        'ZM',
                                        'ZW',
                                    ],
                                },
                                countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                            },
                            description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'",
                        },
                        id: { type: 'string', description: 'ID of associate' },
                    },
                    description: "Applicable to all types except 'PCM_BUSINESS'",
                },
            },
            name: {
                maxLength: 100,
                minLength: 0,
                pattern: '^([_\'@,&()£$€¥=#%\\‘\\’:;/<>«»\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[\\p{L}0-9])+[_\'@,&()£$€¥=#%\\‘\\’:;/<>«»\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*',
                type: 'string',
                description: "AlphaNumeric characters plus [ _ ' @ , & £ $ € ¥ = # % ‘ ’ : ; \\ / < > « »  ! ‘ “ ” . ? - *{ }  + % ( )]. Mandatory for all types except 'INDIVIDUAL and PCM_INDIVIDUAL'",
            },
            brandNames: {
                type: 'array',
                description: 'The customers brand name(s)',
                items: {
                    type: 'object',
                    properties: {
                        id: { type: 'string', description: 'Unique id for the Brand Name' },
                        name: { type: 'string', description: 'The Brand Name' },
                    },
                    description: 'The customers brand name(s)',
                },
            },
            tradingAddress: {
                required: ['addressLine1', 'postTown'],
                type: 'object',
                properties: {
                    addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                    addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                    postTown: { maxLength: 50, minLength: 0, type: 'string' },
                    postCode: { maxLength: 10, type: 'string' },
                    country: {
                        type: 'string',
                        enum: [
                            'AT',
                            'BE',
                            'BG',
                            'CY',
                            'CZ',
                            'DK',
                            'EE',
                            'FI',
                            'FR',
                            'DE',
                            'GR',
                            'HR',
                            'HU',
                            'IS',
                            'IE',
                            'IT',
                            'LV',
                            'LI',
                            'LT',
                            'LU',
                            'MT',
                            'NL',
                            'NO',
                            'PL',
                            'PT',
                            'RO',
                            'SK',
                            'SI',
                            'ES',
                            'SE',
                            'GB',
                            'MQ',
                            'YT',
                            'GP',
                            'GF',
                            'RE',
                            'MF',
                            'GI',
                            'GG',
                            'IM',
                            'JE',
                            'MC',
                            'CH',
                            'AD',
                            'SM',
                            'VA',
                            'AX',
                            'PM',
                            'BL',
                            'AF',
                            'AL',
                            'DZ',
                            'AS',
                            'AO',
                            'AI',
                            'AQ',
                            'AG',
                            'AR',
                            'AM',
                            'AW',
                            'AU',
                            'AZ',
                            'BS',
                            'BH',
                            'BD',
                            'BB',
                            'BY',
                            'BZ',
                            'BJ',
                            'BM',
                            'BT',
                            'BO',
                            'BQ',
                            'BA',
                            'BW',
                            'BV',
                            'BR',
                            'IO',
                            'VG',
                            'BN',
                            'BF',
                            'BI',
                            'KH',
                            'CM',
                            'CA',
                            'CV',
                            'KY',
                            'CF',
                            'TD',
                            'CL',
                            'CN',
                            'CX',
                            'CC',
                            'CO',
                            'KM',
                            'CK',
                            'CR',
                            'CU',
                            'CW',
                            'CD',
                            'DJ',
                            'DM',
                            'DO',
                            'TL',
                            'EC',
                            'EG',
                            'SV',
                            'GQ',
                            'ER',
                            'SZ',
                            'ET',
                            'FK',
                            'FO',
                            'FJ',
                            'PF',
                            'TF',
                            'GA',
                            'GM',
                            'GE',
                            'GH',
                            'GL',
                            'GD',
                            'GU',
                            'GT',
                            'GN',
                            'GW',
                            'GY',
                            'HT',
                            'HM',
                            'HN',
                            'HK',
                            'IN',
                            'ID',
                            'IR',
                            'IQ',
                            'IL',
                            'CI',
                            'JM',
                            'JP',
                            'JO',
                            'KZ',
                            'KE',
                            'KI',
                            'XK',
                            'KW',
                            'KG',
                            'LA',
                            'LB',
                            'LS',
                            'LR',
                            'LY',
                            'MO',
                            'MG',
                            'MW',
                            'MY',
                            'MV',
                            'ML',
                            'MH',
                            'MR',
                            'MU',
                            'MX',
                            'FM',
                            'MD',
                            'MN',
                            'ME',
                            'MS',
                            'MA',
                            'MZ',
                            'MM',
                            'NA',
                            'NR',
                            'NP',
                            'AN',
                            'NC',
                            'NZ',
                            'NI',
                            'NE',
                            'NG',
                            'NU',
                            'NF',
                            'KP',
                            'MK',
                            'MP',
                            'OM',
                            'PK',
                            'PW',
                            'PS',
                            'PA',
                            'PG',
                            'PY',
                            'PE',
                            'PH',
                            'PN',
                            'PR',
                            'QA',
                            'CG',
                            'RU',
                            'RW',
                            'SH',
                            'KN',
                            'LC',
                            'VC',
                            'WS',
                            'ST',
                            'SA',
                            'SN',
                            'RS',
                            'SC',
                            'SL',
                            'SG',
                            'SX',
                            'SB',
                            'SO',
                            'ZA',
                            'KR',
                            'GS',
                            'SS',
                            'LK',
                            'SD',
                            'SR',
                            'SY',
                            'SJ',
                            'TW',
                            'TJ',
                            'TZ',
                            'TH',
                            'TG',
                            'TK',
                            'TO',
                            'TT',
                            'TN',
                            'TR',
                            'TM',
                            'TC',
                            'TV',
                            'UG',
                            'UA',
                            'AE',
                            'UM',
                            'US',
                            'UY',
                            'UZ',
                            'VU',
                            'VE',
                            'VN',
                            'VI',
                            'WF',
                            'EH',
                            'YE',
                            'ZM',
                            'ZW',
                        ],
                    },
                    countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                },
                description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'",
            },
            customerTrust: {
                required: ['trustNature'],
                type: 'object',
                properties: {
                    trustNature: {
                        type: 'string',
                        description: 'Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.',
                        enum: [
                            'BARE_TRUSTS',
                            'INTEREST_IN_POSSESSION_TRUSTS',
                            'DISCRETIONARY_TRUSTS',
                            'ACCUMULATION_TRUSTS',
                            'MIXED_TRUSTS',
                            'SETTLOR_INTERESTED_TRUSTS',
                            'NON_RESIDENT_TRUSTS',
                            'OFFSHORE_TRUSTS',
                            'FAMILY_LIVING_TRUST',
                            'PILOT_TRUST',
                            'VULNERABLE_BENEFICIARY_TRUST',
                            'CHARITABLE_TRUSTS',
                            'IRREVOCABLE_LIFE_INSURANCE_TRUST',
                            'TESTAMENTARY_TRUSTS',
                            'OTHER',
                        ],
                    },
                },
                description: 'Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.',
            },
            complianceData: {
                type: 'object',
                properties: { typeDescription: { maxLength: 200, minLength: 0, type: 'string' } },
                description: 'Required for customers of type PREQUALIFIED. Not allowed for all other customer types.',
            },
        },
        description: 'Details of customer to edit',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: {
                        type: 'string',
                        examples: ['C0000000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of customer to be edited',
                    },
                },
                required: ['customerId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['createdDate', 'id', 'name', 'status', 'type', 'verificationStatus'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: "Unique identifier for a Customer. Begins with 'C'",
                    examples: ['C00000001'],
                },
                name: {
                    type: 'string',
                    description: "Customer's company name - must be unique across the Modulr platform.",
                },
                brandNames: {
                    type: 'array',
                    description: 'The customers brand name(s)',
                    items: {
                        required: ['id', 'name'],
                        type: 'object',
                        properties: {
                            id: { type: 'string', description: 'Unique id for the Brand Name' },
                            name: { type: 'string', description: 'The Brand Name' },
                        },
                        description: 'BrandName',
                    },
                },
                type: {
                    type: 'string',
                    description: 'Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`',
                    enum: [
                        'LLC',
                        'PLC',
                        'SOLETRADER',
                        'OPARTNRSHP',
                        'LPARTNRSHP',
                        'LLP',
                        'CHARITY',
                        'INDIVIDUAL',
                        'PCM_INDIVIDUAL',
                        'PCM_BUSINESS',
                        'TRUST',
                        'PREQUALIFIED',
                    ],
                },
                status: {
                    type: 'string',
                    description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`",
                    enum: ['ACTIVE', 'CLOSED'],
                },
                verificationStatus: {
                    type: 'string',
                    description: 'How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                    enum: [
                        'UNVERIFIED',
                        'VERIFIED',
                        'EXVERIFIED',
                        'REFERRED',
                        'DECLINED',
                        'REVIEWED',
                        'MIGRATED',
                    ],
                },
                companyRegNumber: {
                    type: 'string',
                    description: 'The company registration / incorporation number of the company. Only applicable for companies registered with Companies House',
                },
                expectedMonthlySpend: {
                    type: 'integer',
                    description: 'Indication of the monthly spend of the customer.',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                registeredAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { type: 'string' },
                        addressLine2: { type: 'string' },
                        postTown: { type: 'string' },
                        postCode: { type: 'string' },
                        country: { type: 'string' },
                        countrySubDivision: { type: 'string' },
                    },
                    description: 'Address',
                },
                tradingAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { type: 'string' },
                        addressLine2: { type: 'string' },
                        postTown: { type: 'string' },
                        postCode: { type: 'string' },
                        country: { type: 'string' },
                        countrySubDivision: { type: 'string' },
                    },
                    description: 'Address',
                },
                partnerId: { type: 'string', description: 'The owning partner identifier' },
                associates: {
                    type: 'array',
                    description: 'Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.',
                    items: {
                        required: ['dateOfBirth', 'firstName', 'id', 'lastName', 'type', 'verificationStatus'],
                        type: 'object',
                        properties: {
                            id: { type: 'string', description: 'Unique id for the Associate' },
                            firstName: { type: 'string', description: "Associate's first name(s)" },
                            middleName: { type: 'string', description: "Associate's middle name" },
                            lastName: { type: 'string', description: "Associate's surname" },
                            email: { type: 'string', description: "Associate's email address" },
                            phone: {
                                type: 'string',
                                description: "Associate's phone number, in international number format",
                            },
                            applicant: {
                                type: 'boolean',
                                description: 'Indicates which Associate originally applied for the Modulr account',
                            },
                            ownership: {
                                type: 'integer',
                                description: "The Associate's percentage ownership of the Customer",
                                format: 'int32',
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            type: {
                                type: 'string',
                                description: 'Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`',
                                enum: [
                                    'DIRECTOR',
                                    'PARTNER',
                                    'CSECRETARY',
                                    'SOLETRADER',
                                    'BENE_OWNER',
                                    'C_INTEREST',
                                    'INDIVIDUAL',
                                    'PCM_INDIVIDUAL',
                                    'SIGNATORY',
                                    'TRUST_SETTLOR',
                                    'TRUST_BENEFICIARY',
                                    'TRUST_TRUSTEE',
                                    'PREQUALIFIED',
                                ],
                            },
                            dateOfBirth: {
                                type: 'string',
                                description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown",
                            },
                            verificationStatus: {
                                type: 'string',
                                description: 'How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                                enum: [
                                    'UNVERIFIED',
                                    'VERIFIED',
                                    'EXVERIFIED',
                                    'REFERRED',
                                    'DECLINED',
                                    'REVIEWED',
                                    'MIGRATED',
                                ],
                            },
                            homeAddress: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: { type: 'string' },
                                    addressLine2: { type: 'string' },
                                    postTown: { type: 'string' },
                                    postCode: { type: 'string' },
                                    country: { type: 'string' },
                                    countrySubDivision: { type: 'string' },
                                },
                                description: 'Address',
                            },
                            documentInfo: {
                                type: 'array',
                                description: 'Documents gathered during Customer Due Diligence checks on an Associate.',
                                items: {
                                    required: ['fileName', 'path', 'uploadedDate'],
                                    type: 'object',
                                    properties: {
                                        path: { type: 'string' },
                                        fileName: { type: 'string' },
                                        uploadedDate: {
                                            type: 'string',
                                            description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                            examples: ['2017-01-28T01:01:01+0000'],
                                        },
                                    },
                                    description: 'Document',
                                },
                            },
                            additionalPersonalIdentifiers: {
                                type: 'array',
                                description: 'Additional personal identifier(s)',
                                items: {
                                    required: ['type', 'value'],
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            description: 'The type of Additional Personal Identifier\n\n`BSN`',
                                            enum: ['BSN'],
                                        },
                                        value: { type: 'string', description: 'Additional Personal Identifier value' },
                                    },
                                    description: 'AdditionalPersonalIdentifier',
                                },
                            },
                            complianceData: {
                                type: 'object',
                                properties: { relationship: { type: 'string' } },
                                description: 'Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.',
                            },
                        },
                        description: 'Associate',
                    },
                },
                industryCode: { type: 'string' },
                tcsVersion: {
                    type: 'integer',
                    description: 'Version of the Modulr Account Terms and Conditions the Customer has agreed to.',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                documentInfo: {
                    type: 'array',
                    description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.",
                    items: {
                        required: ['fileName', 'path', 'uploadedDate'],
                        type: 'object',
                        properties: {
                            path: { type: 'string' },
                            fileName: { type: 'string' },
                            uploadedDate: {
                                type: 'string',
                                description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                examples: ['2017-01-28T01:01:01+0000'],
                            },
                        },
                        description: 'Document',
                    },
                },
                externalReference: { type: 'string' },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                delegate: {
                    required: ['created', 'id', 'name', 'roleId', 'status', 'updated'],
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            description: 'Unique reference for the Delegate.',
                            examples: ['D0000001'],
                        },
                        name: { type: 'string', description: 'Name for the Delegate' },
                        address: {
                            required: ['addressLine1', 'country', 'postCode', 'postTown'],
                            type: 'object',
                            properties: {
                                addressLine1: { type: 'string' },
                                addressLine2: { type: 'string' },
                                postTown: { type: 'string' },
                                postCode: { type: 'string' },
                                country: { type: 'string' },
                                countrySubDivision: { type: 'string' },
                            },
                            description: 'Address',
                        },
                        roleId: {
                            type: 'string',
                            description: 'The id of the Role assigned to the delegate',
                            examples: ['R02002M5'],
                        },
                        externalReference: {
                            type: 'string',
                            description: 'External system reference for the Delegate',
                        },
                        partner: { type: 'string', description: 'Partner Bid.', examples: ['R0000001'] },
                        status: { type: 'string', description: 'Status of the Delegate.' },
                        created: {
                            type: 'string',
                            description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                            format: 'date-time',
                        },
                        updated: {
                            type: 'string',
                            description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                            format: 'date-time',
                        },
                    },
                    description: 'Delegate',
                },
                legalEntity: {
                    type: 'string',
                    description: 'Legal entity of the customer\n\n`GB` `NL` `IE`',
                    enum: ['GB', 'NL', 'IE'],
                },
                customerTrust: {
                    type: 'object',
                    properties: {
                        trustNature: {
                            type: 'string',
                            enum: [
                                'BARE_TRUSTS',
                                'INTEREST_IN_POSSESSION_TRUSTS',
                                'DISCRETIONARY_TRUSTS',
                                'ACCUMULATION_TRUSTS',
                                'MIXED_TRUSTS',
                                'SETTLOR_INTERESTED_TRUSTS',
                                'NON_RESIDENT_TRUSTS',
                                'OFFSHORE_TRUSTS',
                                'FAMILY_LIVING_TRUST',
                                'PILOT_TRUST',
                                'VULNERABLE_BENEFICIARY_TRUST',
                                'CHARITABLE_TRUSTS',
                                'IRREVOCABLE_LIFE_INSURANCE_TRUST',
                                'TESTAMENTARY_TRUSTS',
                                'OTHER',
                            ],
                            description: '`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`',
                        },
                    },
                    description: 'Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.',
                },
                taxProfile: {
                    required: ['taxIdentifier'],
                    type: 'object',
                    properties: {
                        taxIdentifier: {
                            type: 'string',
                            description: 'Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                        },
                    },
                    description: 'Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                },
                complianceData: {
                    type: 'object',
                    properties: { typeDescription: { type: 'string' } },
                    description: 'Required for customers of type PREQUALIFIED. Not allowed for all other customer types.',
                },
            },
            description: 'A Customer is a single legal entity that can have 1 or more accounts',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.EditCustomer = EditCustomer;
const EditCustomerNotification = {
    body: {
        required: ['config', 'destinations', 'status'],
        type: 'object',
        properties: {
            status: {
                type: 'string',
                description: 'Status of the notification.',
                enum: ['ACTIVE', 'INACTIVE'],
            },
            destinations: {
                type: 'array',
                description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                items: {
                    type: 'string',
                    description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                },
            },
            config: {
                type: 'object',
                properties: {
                    threshold: {
                        minimum: 0,
                        type: 'number',
                        description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                    },
                    timesToRun: {
                        type: 'array',
                        description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['AM', 'PM'],
                        },
                    },
                    daysToRun: {
                        type: 'array',
                        description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
                        },
                    },
                    retry: {
                        type: 'boolean',
                        description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    secret: {
                        maxLength: 32,
                        minLength: 32,
                        type: 'string',
                        description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    hmacAlgorithm: {
                        type: 'string',
                        description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.",
                        enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                    },
                },
                description: 'Configuration information for this Notification entity.',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    notificationId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['customerId', 'notificationId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.EditCustomerNotification = EditCustomerNotification;
const EditPartnerNotification = {
    body: {
        required: ['config', 'destinations', 'status'],
        type: 'object',
        properties: {
            status: {
                type: 'string',
                description: 'Status of the notification.',
                enum: ['ACTIVE', 'INACTIVE'],
            },
            destinations: {
                type: 'array',
                description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                items: {
                    type: 'string',
                    description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.",
                },
            },
            config: {
                type: 'object',
                properties: {
                    threshold: {
                        minimum: 0,
                        type: 'number',
                        description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                    },
                    timesToRun: {
                        type: 'array',
                        description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['AM', 'PM'],
                        },
                    },
                    daysToRun: {
                        type: 'array',
                        description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                        items: {
                            type: 'string',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
                        },
                    },
                    retry: {
                        type: 'boolean',
                        description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    secret: {
                        maxLength: 32,
                        minLength: 32,
                        type: 'string',
                        description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                    },
                    hmacAlgorithm: {
                        type: 'string',
                        description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.",
                        enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                    },
                },
                description: 'Configuration information for this Notification entity.',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    partnerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    notificationId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['partnerId', 'notificationId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.EditPartnerNotification = EditPartnerNotification;
const ExpireAuthorisation = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    authId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['authId'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.ExpireAuthorisation = ExpireAuthorisation;
const GenerateCardHolderToken = {
    body: {
        type: 'object',
        properties: {
            publicKey: {
                type: 'string',
                description: 'Base64 UTF-8 encoded RSA public key to be used to encrypt the token in the response. The key must be at least 4096 bits in length.',
            },
            purpose: {
                type: 'string',
                description: 'What the token will be used for. UPDATE tokens cannot be used for READ purposes, and READ tokens cannot be used for updates.\n\nDefault: `READ`',
                default: 'READ',
                enum: ['READ', 'UPDATE'],
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card to generate the token',
                    },
                },
                required: ['id'],
            },
            {
                type: 'object',
                properties: {
                    'X-MOD-CARD-MGMT-TOKEN': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Card Management Token required when the token will be used to alter card details',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['encrypted', 'token'],
            type: 'object',
            properties: {
                token: {
                    type: 'string',
                    description: "The token to use by the client for retrieving card details. Where 'encrypted' is true, this will be a value that must be decrypted on the client device before being used in subsequent API calls",
                    examples: ['eyJ0....zRyk'],
                },
                encrypted: { type: 'boolean', description: 'Whether this token is encrypted' },
                encryptedSymmetricKey: {
                    type: 'string',
                    description: "Base64 UTF-8 encoded Symmetric key used to encrypt token, encrypted with client's public key. Only provided if 'encrypted' is true.",
                },
                initialisationVector: {
                    type: 'string',
                    description: "Base64 UTF-8 encoded initialisation vector used with symmetric key for encrypting the token. Only provided if 'encrypted' is true.",
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GenerateCardHolderToken = GenerateCardHolderToken;
const GenerateCsv = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    fromDate: {
                        type: 'string',
                        format: 'date-time',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    toDate: {
                        type: 'string',
                        format: 'date-time',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GenerateCsv = GenerateCsv;
const GetAccessGroup = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Access group ID',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '200': {
            required: [
                'accountIds',
                'beneficiaryIds',
                'countOfAccounts',
                'id',
                'name',
                'status',
                'type',
                'typeId',
            ],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique ID for the access group',
                    examples: ['G0000001'],
                },
                name: { type: 'string', description: 'Access group name' },
                type: {
                    type: 'string',
                    description: 'The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`',
                    enum: ['SERVICE_PARTNER', 'SERVICE_CUSTOMER', 'DELEGATE', 'USER_DEFINED'],
                },
                typeId: {
                    type: 'string',
                    description: 'The identifier of the linked entity implied by the type, e.g. the partner ID',
                },
                status: {
                    type: 'string',
                    description: 'Status of the access group\n\n`ACTIVE` `DELETED`',
                    enum: ['ACTIVE', 'DELETED'],
                },
                countOfAccounts: {
                    type: 'integer',
                    description: 'The number of accounts in this group',
                    format: 'int64',
                    deprecated: true,
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                accountIds: {
                    uniqueItems: true,
                    type: 'array',
                    description: 'BIDs of Accounts in the group',
                    items: { type: 'string', description: 'BIDs of Accounts in the group' },
                },
                beneficiaryIds: {
                    uniqueItems: true,
                    type: 'array',
                    description: 'BIDs of Beneficiaries in the group',
                    items: { type: 'string', description: 'BIDs of Beneficiaries in the group' },
                },
            },
            description: 'AccessGroupWithDetails',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAccessGroup = GetAccessGroup;
const GetAccessGroups = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    ids: {
                        uniqueItems: true,
                        type: 'array',
                        description: 'ID of access group(s) to fetch',
                        items: { type: 'string', examples: ['G0000001'] },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    types: {
                        uniqueItems: true,
                        type: 'array',
                        description: 'Access group types',
                        items: {
                            type: 'string',
                            description: 'Access group type',
                            enum: ['SERVICE_PARTNER', 'SERVICE_CUSTOMER', 'DELEGATE', 'USER_DEFINED'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    statuses: {
                        uniqueItems: true,
                        type: 'array',
                        description: 'Access group statuses',
                        items: {
                            type: 'string',
                            description: 'Access group status',
                            enum: ['ACTIVE', 'DELETED'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    typeIds: {
                        uniqueItems: true,
                        type: 'array',
                        description: 'Ids of the entity implied by the type(s), e.g. the partner ID',
                        items: {
                            type: 'string',
                            description: 'Is of the entity implied by the type(s), e.g. the partner ID',
                            examples: ['C0000001'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    showCountOfAccounts: {
                        type: 'string',
                        description: 'Whether to include the count of accounts in the response',
                        default: 'true',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            type: 'array',
            items: {
                required: ['countOfAccounts', 'id', 'name', 'status', 'type', 'typeId'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique ID for the access group',
                        examples: ['G0000001'],
                    },
                    name: { type: 'string', description: 'Access group name' },
                    type: {
                        type: 'string',
                        description: 'The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`',
                        enum: ['SERVICE_PARTNER', 'SERVICE_CUSTOMER', 'DELEGATE', 'USER_DEFINED'],
                    },
                    typeId: {
                        type: 'string',
                        description: 'The identifier of the linked entity implied by the type, e.g. the partner ID',
                    },
                    status: {
                        type: 'string',
                        description: 'Status of the access group\n\n`ACTIVE` `DELETED`',
                        enum: ['ACTIVE', 'DELETED'],
                    },
                    countOfAccounts: {
                        type: 'integer',
                        description: 'The number of accounts in this group',
                        format: 'int64',
                        deprecated: true,
                        minimum: -9223372036854776000,
                        maximum: 9223372036854776000,
                    },
                },
                description: 'AccessGroup',
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAccessGroups = GetAccessGroups;
const GetAccount = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of account to fetch',
                    },
                },
                required: ['id'],
            },
            {
                type: 'object',
                properties: {
                    statuses: {
                        type: 'array',
                        items: { type: 'string', enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'] },
                        default: ['ACTIVE'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account statuses allowed when fetching the account',
                    },
                    includePendingTransactions: {
                        type: 'boolean',
                        default: false,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Include all pending transactions in 'balance' field",
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: [
                'availableBalance',
                'balance',
                'createdDate',
                'currency',
                'customerId',
                'id',
                'identifiers',
                'name',
                'status',
            ],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique id for the account', examples: ['A0000001'] },
                name: { type: 'string', description: 'Name for the account' },
                balance: {
                    type: 'string',
                    description: "Balance of the account in format 'NN.NN'",
                    examples: ['10000.0'],
                },
                availableBalance: {
                    type: 'string',
                    description: 'The current available balance of the Account. Calculated by subtracting any pending payments from the current balance',
                    examples: ['10000.0'],
                },
                currency: {
                    type: 'string',
                    description: 'Currency of the account in ISO 4217 format',
                    examples: ['GBP'],
                },
                status: {
                    type: 'string',
                    description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`",
                    enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                    examples: ['ACTIVE'],
                },
                identifiers: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                description: '`SCAN` `IBAN` `DD` `INTL`',
                            },
                            accountNumber: {
                                type: 'string',
                                description: 'Bank account Sort Code',
                                examples: ['12345678'],
                            },
                            sortCode: {
                                type: 'string',
                                description: 'Bank account Sort Code',
                                examples: ['000000'],
                            },
                            iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                            bic: { type: 'string', examples: ['MODRGB21'] },
                            currency: { type: 'string', examples: ['GBP'] },
                            countrySpecificDetails: {
                                type: 'object',
                                properties: {
                                    bankName: {
                                        type: 'string',
                                        description: 'The name of the destination bank.',
                                        examples: ['Apple Bank'],
                                    },
                                    bankAddress: {
                                        type: 'string',
                                        description: 'The address of the destination bank.',
                                        examples: ['2100 Broadway'],
                                    },
                                    bankCity: {
                                        type: 'string',
                                        description: 'The city in which the destination bank resides.',
                                        examples: ['New York City'],
                                    },
                                    bankBranchName: {
                                        type: 'string',
                                        description: "The name of the destination bank's branch.",
                                        examples: ['New York'],
                                    },
                                    bankBranchCode: {
                                        type: 'string',
                                        description: "The code of the destination bank's branch.",
                                        examples: ['44-04'],
                                    },
                                    bankCode: {
                                        type: 'string',
                                        description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                    },
                                    chineseId: {
                                        type: 'string',
                                        description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                        examples: ['01101201901018889'],
                                    },
                                    province: {
                                        type: 'string',
                                        description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                        examples: ['Zhejiang'],
                                    },
                                    business: {
                                        type: 'boolean',
                                        description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                        examples: [true],
                                    },
                                    bankCodeType: {
                                        type: 'string',
                                        description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                        enum: ['ABA', 'CHIPS'],
                                        examples: ['ABA'],
                                    },
                                    bankCountry: {
                                        type: 'string',
                                        description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                        enum: [
                                            'AT',
                                            'BE',
                                            'BG',
                                            'CY',
                                            'CZ',
                                            'DK',
                                            'EE',
                                            'FI',
                                            'FR',
                                            'DE',
                                            'GR',
                                            'HR',
                                            'HU',
                                            'IS',
                                            'IE',
                                            'IT',
                                            'LV',
                                            'LI',
                                            'LT',
                                            'LU',
                                            'MT',
                                            'NL',
                                            'NO',
                                            'PL',
                                            'PT',
                                            'RO',
                                            'SK',
                                            'SI',
                                            'ES',
                                            'SE',
                                            'GB',
                                            'MQ',
                                            'YT',
                                            'GP',
                                            'GF',
                                            'RE',
                                            'MF',
                                            'GI',
                                            'GG',
                                            'IM',
                                            'JE',
                                            'MC',
                                            'CH',
                                            'AD',
                                            'SM',
                                            'VA',
                                            'AX',
                                            'PM',
                                            'BL',
                                            'AF',
                                            'AL',
                                            'DZ',
                                            'AS',
                                            'AO',
                                            'AI',
                                            'AQ',
                                            'AG',
                                            'AR',
                                            'AM',
                                            'AW',
                                            'AU',
                                            'AZ',
                                            'BS',
                                            'BH',
                                            'BD',
                                            'BB',
                                            'BY',
                                            'BZ',
                                            'BJ',
                                            'BM',
                                            'BT',
                                            'BO',
                                            'BQ',
                                            'BA',
                                            'BW',
                                            'BV',
                                            'BR',
                                            'IO',
                                            'VG',
                                            'BN',
                                            'BF',
                                            'BI',
                                            'KH',
                                            'CM',
                                            'CA',
                                            'CV',
                                            'KY',
                                            'CF',
                                            'TD',
                                            'CL',
                                            'CN',
                                            'CX',
                                            'CC',
                                            'CO',
                                            'KM',
                                            'CK',
                                            'CR',
                                            'CU',
                                            'CW',
                                            'CD',
                                            'DJ',
                                            'DM',
                                            'DO',
                                            'TL',
                                            'EC',
                                            'EG',
                                            'SV',
                                            'GQ',
                                            'ER',
                                            'SZ',
                                            'ET',
                                            'FK',
                                            'FO',
                                            'FJ',
                                            'PF',
                                            'TF',
                                            'GA',
                                            'GM',
                                            'GE',
                                            'GH',
                                            'GL',
                                            'GD',
                                            'GU',
                                            'GT',
                                            'GN',
                                            'GW',
                                            'GY',
                                            'HT',
                                            'HM',
                                            'HN',
                                            'HK',
                                            'IN',
                                            'ID',
                                            'IR',
                                            'IQ',
                                            'IL',
                                            'CI',
                                            'JM',
                                            'JP',
                                            'JO',
                                            'KZ',
                                            'KE',
                                            'KI',
                                            'XK',
                                            'KW',
                                            'KG',
                                            'LA',
                                            'LB',
                                            'LS',
                                            'LR',
                                            'LY',
                                            'MO',
                                            'MG',
                                            'MW',
                                            'MY',
                                            'MV',
                                            'ML',
                                            'MH',
                                            'MR',
                                            'MU',
                                            'MX',
                                            'FM',
                                            'MD',
                                            'MN',
                                            'ME',
                                            'MS',
                                            'MA',
                                            'MZ',
                                            'MM',
                                            'NA',
                                            'NR',
                                            'NP',
                                            'AN',
                                            'NC',
                                            'NZ',
                                            'NI',
                                            'NE',
                                            'NG',
                                            'NU',
                                            'NF',
                                            'KP',
                                            'MK',
                                            'MP',
                                            'OM',
                                            'PK',
                                            'PW',
                                            'PS',
                                            'PA',
                                            'PG',
                                            'PY',
                                            'PE',
                                            'PH',
                                            'PN',
                                            'PR',
                                            'QA',
                                            'CG',
                                            'RU',
                                            'RW',
                                            'SH',
                                            'KN',
                                            'LC',
                                            'VC',
                                            'WS',
                                            'ST',
                                            'SA',
                                            'SN',
                                            'RS',
                                            'SC',
                                            'SL',
                                            'SG',
                                            'SX',
                                            'SB',
                                            'SO',
                                            'ZA',
                                            'KR',
                                            'GS',
                                            'SS',
                                            'LK',
                                            'SD',
                                            'SR',
                                            'SY',
                                            'SJ',
                                            'TW',
                                            'TJ',
                                            'TZ',
                                            'TH',
                                            'TG',
                                            'TK',
                                            'TO',
                                            'TT',
                                            'TN',
                                            'TR',
                                            'TM',
                                            'TC',
                                            'TV',
                                            'UG',
                                            'UA',
                                            'AE',
                                            'UM',
                                            'US',
                                            'UY',
                                            'UZ',
                                            'VU',
                                            'VE',
                                            'VN',
                                            'VI',
                                            'WF',
                                            'EH',
                                            'YE',
                                            'ZM',
                                            'ZW',
                                        ],
                                        examples: ['US'],
                                    },
                                },
                            },
                        },
                        description: 'Account Identifier',
                    },
                },
                customerId: {
                    type: 'string',
                    description: 'Unique id of the Customer',
                    examples: ['C0000001'],
                },
                customerName: { type: 'string', description: 'Customer Name' },
                externalReference: {
                    type: 'string',
                    description: 'Your reference for an account',
                    examples: ['aReference_00001'],
                },
                accessGroups: {
                    type: 'array',
                    description: 'Ids of Access Groups this account belongs to',
                    items: { type: 'string', description: 'Ids of Access Groups this account belongs to' },
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                directDebit: { type: 'boolean', description: 'Direct Debit Enabled' },
                securedFundingLimit: {
                    type: 'string',
                    description: 'Limit of funds available below a balance of zero',
                },
            },
            description: 'Account',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAccount = GetAccount;
const GetAccounts = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'array',
                        items: { type: 'string', description: 'ID of the account(s) to fetch' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    q: {
                        type: 'string',
                        description: 'ID or name of the account to search for',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    identifierType: {
                        type: 'string',
                        description: 'Accounts that contain this identifier type',
                        examples: ['SCAN'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'name.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'name.value': { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    'accountNumber.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'accountNumber.value': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'iban.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'iban.value': { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    statuses: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Account statuses\n\nDefault: `ACTIVE`',
                            default: 'ACTIVE',
                            enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    minBalance: {
                        minimum: 0,
                        type: 'string',
                        description: 'Accounts with balance equal or more than this amount',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    maxBalance: {
                        minimum: 0.01,
                        type: 'string',
                        description: 'Accounts with balance equal or less than this amount',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    fromCreatedDate: {
                        type: 'string',
                        description: "Accounts created after and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        examples: ['2017-01-28T01:01:01+0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    toCreatedDate: {
                        type: 'string',
                        description: "Accounts created before and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        examples: ['2017-01-28T01:01:01+0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    page: {
                        type: 'string',
                        description: 'Page to fetch (0 indexed)',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        maximum: 500,
                        type: 'string',
                        description: 'Size of Page to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sortField: {
                        pattern: '(id|name|balance|externalReference|createdDate)',
                        type: 'string',
                        description: 'Sort by field',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sortOrder: {
                        pattern: '(asc|desc)',
                        type: 'string',
                        description: 'Sorting order',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    currency: {
                        type: 'string',
                        description: 'The currency for getting account by currency. Expected ISO Standard currency name i.e. GBP, EUR etc',
                        examples: ['GBP'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    showAvailableBalance: {
                        type: 'string',
                        description: 'Show available balance',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [
                    'name.type',
                    'name.value',
                    'accountNumber.type',
                    'accountNumber.value',
                    'iban.type',
                    'iban.value',
                ],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: [
                            'availableBalance',
                            'balance',
                            'createdDate',
                            'currency',
                            'customerId',
                            'id',
                            'identifiers',
                            'name',
                            'status',
                        ],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for the account',
                                examples: ['A0000001'],
                            },
                            name: { type: 'string', description: 'Name for the account' },
                            balance: {
                                type: 'string',
                                description: "Balance of the account in format 'NN.NN'",
                                examples: ['10000.0'],
                            },
                            availableBalance: {
                                type: 'string',
                                description: 'The current available balance of the Account. Calculated by subtracting any pending payments from the current balance',
                                examples: ['10000.0'],
                            },
                            currency: {
                                type: 'string',
                                description: 'Currency of the account in ISO 4217 format',
                                examples: ['GBP'],
                            },
                            status: {
                                type: 'string',
                                description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`",
                                enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                                examples: ['ACTIVE'],
                            },
                            identifiers: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                            description: '`SCAN` `IBAN` `DD` `INTL`',
                                        },
                                        accountNumber: {
                                            type: 'string',
                                            description: 'Bank account Sort Code',
                                            examples: ['12345678'],
                                        },
                                        sortCode: {
                                            type: 'string',
                                            description: 'Bank account Sort Code',
                                            examples: ['000000'],
                                        },
                                        iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                                        bic: { type: 'string', examples: ['MODRGB21'] },
                                        currency: { type: 'string', examples: ['GBP'] },
                                        countrySpecificDetails: {
                                            type: 'object',
                                            properties: {
                                                bankName: {
                                                    type: 'string',
                                                    description: 'The name of the destination bank.',
                                                    examples: ['Apple Bank'],
                                                },
                                                bankAddress: {
                                                    type: 'string',
                                                    description: 'The address of the destination bank.',
                                                    examples: ['2100 Broadway'],
                                                },
                                                bankCity: {
                                                    type: 'string',
                                                    description: 'The city in which the destination bank resides.',
                                                    examples: ['New York City'],
                                                },
                                                bankBranchName: {
                                                    type: 'string',
                                                    description: "The name of the destination bank's branch.",
                                                    examples: ['New York'],
                                                },
                                                bankBranchCode: {
                                                    type: 'string',
                                                    description: "The code of the destination bank's branch.",
                                                    examples: ['44-04'],
                                                },
                                                bankCode: {
                                                    type: 'string',
                                                    description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                                },
                                                chineseId: {
                                                    type: 'string',
                                                    description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                                    examples: ['01101201901018889'],
                                                },
                                                province: {
                                                    type: 'string',
                                                    description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                                    examples: ['Zhejiang'],
                                                },
                                                business: {
                                                    type: 'boolean',
                                                    description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                                    examples: [true],
                                                },
                                                bankCodeType: {
                                                    type: 'string',
                                                    description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                                    enum: ['ABA', 'CHIPS'],
                                                    examples: ['ABA'],
                                                },
                                                bankCountry: {
                                                    type: 'string',
                                                    description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                                    enum: [
                                                        'AT',
                                                        'BE',
                                                        'BG',
                                                        'CY',
                                                        'CZ',
                                                        'DK',
                                                        'EE',
                                                        'FI',
                                                        'FR',
                                                        'DE',
                                                        'GR',
                                                        'HR',
                                                        'HU',
                                                        'IS',
                                                        'IE',
                                                        'IT',
                                                        'LV',
                                                        'LI',
                                                        'LT',
                                                        'LU',
                                                        'MT',
                                                        'NL',
                                                        'NO',
                                                        'PL',
                                                        'PT',
                                                        'RO',
                                                        'SK',
                                                        'SI',
                                                        'ES',
                                                        'SE',
                                                        'GB',
                                                        'MQ',
                                                        'YT',
                                                        'GP',
                                                        'GF',
                                                        'RE',
                                                        'MF',
                                                        'GI',
                                                        'GG',
                                                        'IM',
                                                        'JE',
                                                        'MC',
                                                        'CH',
                                                        'AD',
                                                        'SM',
                                                        'VA',
                                                        'AX',
                                                        'PM',
                                                        'BL',
                                                        'AF',
                                                        'AL',
                                                        'DZ',
                                                        'AS',
                                                        'AO',
                                                        'AI',
                                                        'AQ',
                                                        'AG',
                                                        'AR',
                                                        'AM',
                                                        'AW',
                                                        'AU',
                                                        'AZ',
                                                        'BS',
                                                        'BH',
                                                        'BD',
                                                        'BB',
                                                        'BY',
                                                        'BZ',
                                                        'BJ',
                                                        'BM',
                                                        'BT',
                                                        'BO',
                                                        'BQ',
                                                        'BA',
                                                        'BW',
                                                        'BV',
                                                        'BR',
                                                        'IO',
                                                        'VG',
                                                        'BN',
                                                        'BF',
                                                        'BI',
                                                        'KH',
                                                        'CM',
                                                        'CA',
                                                        'CV',
                                                        'KY',
                                                        'CF',
                                                        'TD',
                                                        'CL',
                                                        'CN',
                                                        'CX',
                                                        'CC',
                                                        'CO',
                                                        'KM',
                                                        'CK',
                                                        'CR',
                                                        'CU',
                                                        'CW',
                                                        'CD',
                                                        'DJ',
                                                        'DM',
                                                        'DO',
                                                        'TL',
                                                        'EC',
                                                        'EG',
                                                        'SV',
                                                        'GQ',
                                                        'ER',
                                                        'SZ',
                                                        'ET',
                                                        'FK',
                                                        'FO',
                                                        'FJ',
                                                        'PF',
                                                        'TF',
                                                        'GA',
                                                        'GM',
                                                        'GE',
                                                        'GH',
                                                        'GL',
                                                        'GD',
                                                        'GU',
                                                        'GT',
                                                        'GN',
                                                        'GW',
                                                        'GY',
                                                        'HT',
                                                        'HM',
                                                        'HN',
                                                        'HK',
                                                        'IN',
                                                        'ID',
                                                        'IR',
                                                        'IQ',
                                                        'IL',
                                                        'CI',
                                                        'JM',
                                                        'JP',
                                                        'JO',
                                                        'KZ',
                                                        'KE',
                                                        'KI',
                                                        'XK',
                                                        'KW',
                                                        'KG',
                                                        'LA',
                                                        'LB',
                                                        'LS',
                                                        'LR',
                                                        'LY',
                                                        'MO',
                                                        'MG',
                                                        'MW',
                                                        'MY',
                                                        'MV',
                                                        'ML',
                                                        'MH',
                                                        'MR',
                                                        'MU',
                                                        'MX',
                                                        'FM',
                                                        'MD',
                                                        'MN',
                                                        'ME',
                                                        'MS',
                                                        'MA',
                                                        'MZ',
                                                        'MM',
                                                        'NA',
                                                        'NR',
                                                        'NP',
                                                        'AN',
                                                        'NC',
                                                        'NZ',
                                                        'NI',
                                                        'NE',
                                                        'NG',
                                                        'NU',
                                                        'NF',
                                                        'KP',
                                                        'MK',
                                                        'MP',
                                                        'OM',
                                                        'PK',
                                                        'PW',
                                                        'PS',
                                                        'PA',
                                                        'PG',
                                                        'PY',
                                                        'PE',
                                                        'PH',
                                                        'PN',
                                                        'PR',
                                                        'QA',
                                                        'CG',
                                                        'RU',
                                                        'RW',
                                                        'SH',
                                                        'KN',
                                                        'LC',
                                                        'VC',
                                                        'WS',
                                                        'ST',
                                                        'SA',
                                                        'SN',
                                                        'RS',
                                                        'SC',
                                                        'SL',
                                                        'SG',
                                                        'SX',
                                                        'SB',
                                                        'SO',
                                                        'ZA',
                                                        'KR',
                                                        'GS',
                                                        'SS',
                                                        'LK',
                                                        'SD',
                                                        'SR',
                                                        'SY',
                                                        'SJ',
                                                        'TW',
                                                        'TJ',
                                                        'TZ',
                                                        'TH',
                                                        'TG',
                                                        'TK',
                                                        'TO',
                                                        'TT',
                                                        'TN',
                                                        'TR',
                                                        'TM',
                                                        'TC',
                                                        'TV',
                                                        'UG',
                                                        'UA',
                                                        'AE',
                                                        'UM',
                                                        'US',
                                                        'UY',
                                                        'UZ',
                                                        'VU',
                                                        'VE',
                                                        'VN',
                                                        'VI',
                                                        'WF',
                                                        'EH',
                                                        'YE',
                                                        'ZM',
                                                        'ZW',
                                                    ],
                                                    examples: ['US'],
                                                },
                                            },
                                        },
                                    },
                                    description: 'Account Identifier',
                                },
                            },
                            customerId: {
                                type: 'string',
                                description: 'Unique id of the Customer',
                                examples: ['C0000001'],
                            },
                            customerName: { type: 'string', description: 'Customer Name' },
                            externalReference: {
                                type: 'string',
                                description: 'Your reference for an account',
                                examples: ['aReference_00001'],
                            },
                            accessGroups: {
                                type: 'array',
                                description: 'Ids of Access Groups this account belongs to',
                                items: {
                                    type: 'string',
                                    description: 'Ids of Access Groups this account belongs to',
                                },
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            directDebit: { type: 'boolean', description: 'Direct Debit Enabled' },
                            securedFundingLimit: {
                                type: 'string',
                                description: 'Limit of funds available below a balance of zero',
                            },
                        },
                        description: 'Account',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAccounts = GetAccounts;
const GetAccountsByCustomer = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of customer to fetch accounts for',
                    },
                },
                required: ['customerId'],
            },
            {
                type: 'object',
                properties: {
                    customerStatuses: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Customer statuses\n\nDefault: `ACTIVE`',
                            default: 'ACTIVE',
                            enum: ['ACTIVE', 'CLOSED'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    statuses: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Account statuses\n\nDefault: `ACTIVE`',
                            default: 'ACTIVE',
                            enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    minBalance: {
                        minimum: 0,
                        type: 'string',
                        description: 'Accounts with balance equal or more than this amount',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    maxBalance: {
                        minimum: 0.01,
                        type: 'string',
                        description: 'Accounts with balance equal or less than this amount',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    fromCreatedDate: {
                        type: 'string',
                        description: "Accounts created after and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        examples: ['2017-01-28T01:01:01+0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    toCreatedDate: {
                        type: 'string',
                        description: "Accounts created before and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        examples: ['2017-01-28T01:01:01+0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    page: {
                        type: 'string',
                        description: 'Page to fetch (0 indexed)',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        maximum: 500,
                        type: 'string',
                        description: 'Size of Page to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sortField: {
                        pattern: '(id|name|balance|externalReference|createdDate)',
                        type: 'string',
                        description: 'Sort by field',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sortOrder: {
                        pattern: '(asc|desc)',
                        type: 'string',
                        description: 'Sorting order',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    currency: {
                        type: 'string',
                        description: 'The currency for getting account by currency. Expected ISO Standard currency name i.e. GBP, EUR etc',
                        examples: ['GBP'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    showAvailableBalance: {
                        type: 'string',
                        description: 'Show available balance',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: [
                            'availableBalance',
                            'balance',
                            'createdDate',
                            'currency',
                            'customerId',
                            'id',
                            'identifiers',
                            'name',
                            'status',
                        ],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for the account',
                                examples: ['A0000001'],
                            },
                            name: { type: 'string', description: 'Name for the account' },
                            balance: {
                                type: 'string',
                                description: "Balance of the account in format 'NN.NN'",
                                examples: ['10000.0'],
                            },
                            availableBalance: {
                                type: 'string',
                                description: 'The current available balance of the Account. Calculated by subtracting any pending payments from the current balance',
                                examples: ['10000.0'],
                            },
                            currency: {
                                type: 'string',
                                description: 'Currency of the account in ISO 4217 format',
                                examples: ['GBP'],
                            },
                            status: {
                                type: 'string',
                                description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`",
                                enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                                examples: ['ACTIVE'],
                            },
                            identifiers: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                            description: '`SCAN` `IBAN` `DD` `INTL`',
                                        },
                                        accountNumber: {
                                            type: 'string',
                                            description: 'Bank account Sort Code',
                                            examples: ['12345678'],
                                        },
                                        sortCode: {
                                            type: 'string',
                                            description: 'Bank account Sort Code',
                                            examples: ['000000'],
                                        },
                                        iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                                        bic: { type: 'string', examples: ['MODRGB21'] },
                                        currency: { type: 'string', examples: ['GBP'] },
                                        countrySpecificDetails: {
                                            type: 'object',
                                            properties: {
                                                bankName: {
                                                    type: 'string',
                                                    description: 'The name of the destination bank.',
                                                    examples: ['Apple Bank'],
                                                },
                                                bankAddress: {
                                                    type: 'string',
                                                    description: 'The address of the destination bank.',
                                                    examples: ['2100 Broadway'],
                                                },
                                                bankCity: {
                                                    type: 'string',
                                                    description: 'The city in which the destination bank resides.',
                                                    examples: ['New York City'],
                                                },
                                                bankBranchName: {
                                                    type: 'string',
                                                    description: "The name of the destination bank's branch.",
                                                    examples: ['New York'],
                                                },
                                                bankBranchCode: {
                                                    type: 'string',
                                                    description: "The code of the destination bank's branch.",
                                                    examples: ['44-04'],
                                                },
                                                bankCode: {
                                                    type: 'string',
                                                    description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                                },
                                                chineseId: {
                                                    type: 'string',
                                                    description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                                    examples: ['01101201901018889'],
                                                },
                                                province: {
                                                    type: 'string',
                                                    description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                                    examples: ['Zhejiang'],
                                                },
                                                business: {
                                                    type: 'boolean',
                                                    description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                                    examples: [true],
                                                },
                                                bankCodeType: {
                                                    type: 'string',
                                                    description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                                    enum: ['ABA', 'CHIPS'],
                                                    examples: ['ABA'],
                                                },
                                                bankCountry: {
                                                    type: 'string',
                                                    description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                                    enum: [
                                                        'AT',
                                                        'BE',
                                                        'BG',
                                                        'CY',
                                                        'CZ',
                                                        'DK',
                                                        'EE',
                                                        'FI',
                                                        'FR',
                                                        'DE',
                                                        'GR',
                                                        'HR',
                                                        'HU',
                                                        'IS',
                                                        'IE',
                                                        'IT',
                                                        'LV',
                                                        'LI',
                                                        'LT',
                                                        'LU',
                                                        'MT',
                                                        'NL',
                                                        'NO',
                                                        'PL',
                                                        'PT',
                                                        'RO',
                                                        'SK',
                                                        'SI',
                                                        'ES',
                                                        'SE',
                                                        'GB',
                                                        'MQ',
                                                        'YT',
                                                        'GP',
                                                        'GF',
                                                        'RE',
                                                        'MF',
                                                        'GI',
                                                        'GG',
                                                        'IM',
                                                        'JE',
                                                        'MC',
                                                        'CH',
                                                        'AD',
                                                        'SM',
                                                        'VA',
                                                        'AX',
                                                        'PM',
                                                        'BL',
                                                        'AF',
                                                        'AL',
                                                        'DZ',
                                                        'AS',
                                                        'AO',
                                                        'AI',
                                                        'AQ',
                                                        'AG',
                                                        'AR',
                                                        'AM',
                                                        'AW',
                                                        'AU',
                                                        'AZ',
                                                        'BS',
                                                        'BH',
                                                        'BD',
                                                        'BB',
                                                        'BY',
                                                        'BZ',
                                                        'BJ',
                                                        'BM',
                                                        'BT',
                                                        'BO',
                                                        'BQ',
                                                        'BA',
                                                        'BW',
                                                        'BV',
                                                        'BR',
                                                        'IO',
                                                        'VG',
                                                        'BN',
                                                        'BF',
                                                        'BI',
                                                        'KH',
                                                        'CM',
                                                        'CA',
                                                        'CV',
                                                        'KY',
                                                        'CF',
                                                        'TD',
                                                        'CL',
                                                        'CN',
                                                        'CX',
                                                        'CC',
                                                        'CO',
                                                        'KM',
                                                        'CK',
                                                        'CR',
                                                        'CU',
                                                        'CW',
                                                        'CD',
                                                        'DJ',
                                                        'DM',
                                                        'DO',
                                                        'TL',
                                                        'EC',
                                                        'EG',
                                                        'SV',
                                                        'GQ',
                                                        'ER',
                                                        'SZ',
                                                        'ET',
                                                        'FK',
                                                        'FO',
                                                        'FJ',
                                                        'PF',
                                                        'TF',
                                                        'GA',
                                                        'GM',
                                                        'GE',
                                                        'GH',
                                                        'GL',
                                                        'GD',
                                                        'GU',
                                                        'GT',
                                                        'GN',
                                                        'GW',
                                                        'GY',
                                                        'HT',
                                                        'HM',
                                                        'HN',
                                                        'HK',
                                                        'IN',
                                                        'ID',
                                                        'IR',
                                                        'IQ',
                                                        'IL',
                                                        'CI',
                                                        'JM',
                                                        'JP',
                                                        'JO',
                                                        'KZ',
                                                        'KE',
                                                        'KI',
                                                        'XK',
                                                        'KW',
                                                        'KG',
                                                        'LA',
                                                        'LB',
                                                        'LS',
                                                        'LR',
                                                        'LY',
                                                        'MO',
                                                        'MG',
                                                        'MW',
                                                        'MY',
                                                        'MV',
                                                        'ML',
                                                        'MH',
                                                        'MR',
                                                        'MU',
                                                        'MX',
                                                        'FM',
                                                        'MD',
                                                        'MN',
                                                        'ME',
                                                        'MS',
                                                        'MA',
                                                        'MZ',
                                                        'MM',
                                                        'NA',
                                                        'NR',
                                                        'NP',
                                                        'AN',
                                                        'NC',
                                                        'NZ',
                                                        'NI',
                                                        'NE',
                                                        'NG',
                                                        'NU',
                                                        'NF',
                                                        'KP',
                                                        'MK',
                                                        'MP',
                                                        'OM',
                                                        'PK',
                                                        'PW',
                                                        'PS',
                                                        'PA',
                                                        'PG',
                                                        'PY',
                                                        'PE',
                                                        'PH',
                                                        'PN',
                                                        'PR',
                                                        'QA',
                                                        'CG',
                                                        'RU',
                                                        'RW',
                                                        'SH',
                                                        'KN',
                                                        'LC',
                                                        'VC',
                                                        'WS',
                                                        'ST',
                                                        'SA',
                                                        'SN',
                                                        'RS',
                                                        'SC',
                                                        'SL',
                                                        'SG',
                                                        'SX',
                                                        'SB',
                                                        'SO',
                                                        'ZA',
                                                        'KR',
                                                        'GS',
                                                        'SS',
                                                        'LK',
                                                        'SD',
                                                        'SR',
                                                        'SY',
                                                        'SJ',
                                                        'TW',
                                                        'TJ',
                                                        'TZ',
                                                        'TH',
                                                        'TG',
                                                        'TK',
                                                        'TO',
                                                        'TT',
                                                        'TN',
                                                        'TR',
                                                        'TM',
                                                        'TC',
                                                        'TV',
                                                        'UG',
                                                        'UA',
                                                        'AE',
                                                        'UM',
                                                        'US',
                                                        'UY',
                                                        'UZ',
                                                        'VU',
                                                        'VE',
                                                        'VN',
                                                        'VI',
                                                        'WF',
                                                        'EH',
                                                        'YE',
                                                        'ZM',
                                                        'ZW',
                                                    ],
                                                    examples: ['US'],
                                                },
                                            },
                                        },
                                    },
                                    description: 'Account Identifier',
                                },
                            },
                            customerId: {
                                type: 'string',
                                description: 'Unique id of the Customer',
                                examples: ['C0000001'],
                            },
                            customerName: { type: 'string', description: 'Customer Name' },
                            externalReference: {
                                type: 'string',
                                description: 'Your reference for an account',
                                examples: ['aReference_00001'],
                            },
                            accessGroups: {
                                type: 'array',
                                description: 'Ids of Access Groups this account belongs to',
                                items: {
                                    type: 'string',
                                    description: 'Ids of Access Groups this account belongs to',
                                },
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            directDebit: { type: 'boolean', description: 'Direct Debit Enabled' },
                            securedFundingLimit: {
                                type: 'string',
                                description: 'Limit of funds available below a balance of zero',
                            },
                        },
                        description: 'Account',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAccountsByCustomer = GetAccountsByCustomer;
const GetAllCustomerNotifications = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['customerId'],
            },
        ],
    },
    response: {
        '200': {
            type: 'array',
            items: {
                required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
                type: 'object',
                properties: {
                    id: { type: 'string', description: 'Unique Identifier for the notification.' },
                    customerId: {
                        type: 'string',
                        description: 'Unique Identifier for the customer of this notification.',
                    },
                    type: {
                        type: 'string',
                        description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                        enum: [
                            'PAYIN',
                            'PAYOUT',
                            'BALANCE_LOW',
                            'BALANCE_HIGH',
                            'BALANCE',
                            'DDMANDATE',
                            'CUSTVSTAT',
                            'ACCOUNT_STATEMENT',
                            'PENDING_PAYMENTS',
                            'DD_INCOMING_DEBIT',
                            'DD_FAILED_CLAIM',
                            'DD_FUNDS_RETURNED',
                            'CARD_AUTH',
                            'CARD_CREATION',
                            'UPCOMING_CREDIT',
                            'UPCOMING_COLLECTION_CREDIT',
                            'UPCOMING_COLLECTION_DEBIT',
                            'CARD_STATUS_UPDATE',
                            'CARD_TOKEN_PROVISIONING',
                            'PAYMENT_COMPLIANCE_STATUS',
                            'DD_COLLECTION_STATUS',
                            'ACCOUNT_SWITCH_UPDATE',
                            'PAYMENT_FILE_UPLOAD',
                            'ACCOUNT_STATUS_CHANGE',
                        ],
                    },
                    channel: {
                        type: 'string',
                        description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                        enum: ['EMAIL', 'WEBHOOK'],
                    },
                    status: {
                        type: 'string',
                        description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                        enum: ['ACTIVE', 'INACTIVE'],
                    },
                    destinations: {
                        type: 'array',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        items: {
                            type: 'string',
                            description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        },
                    },
                    config: {
                        type: 'object',
                        properties: {
                            threshold: {
                                minimum: 0,
                                type: 'number',
                                description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                            },
                            timesToRun: {
                                type: 'array',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                    enum: ['AM', 'PM'],
                                },
                            },
                            daysToRun: {
                                type: 'array',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                    enum: [
                                        'MONDAY',
                                        'TUESDAY',
                                        'WEDNESDAY',
                                        'THURSDAY',
                                        'FRIDAY',
                                        'SATURDAY',
                                        'SUNDAY',
                                    ],
                                },
                            },
                            retry: {
                                type: 'boolean',
                                description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            secret: {
                                maxLength: 32,
                                minLength: 32,
                                type: 'string',
                                description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            hmacAlgorithm: {
                                type: 'string',
                                description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                                enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                            },
                        },
                        description: 'Configuration information for this Notification entity.',
                    },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
                type: 'object',
                properties: {
                    id: { type: 'string', description: 'Unique Identifier for the notification.' },
                    customerId: {
                        type: 'string',
                        description: 'Unique Identifier for the customer of this notification.',
                    },
                    type: {
                        type: 'string',
                        description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                        enum: [
                            'PAYIN',
                            'PAYOUT',
                            'BALANCE_LOW',
                            'BALANCE_HIGH',
                            'BALANCE',
                            'DDMANDATE',
                            'CUSTVSTAT',
                            'ACCOUNT_STATEMENT',
                            'PENDING_PAYMENTS',
                            'DD_INCOMING_DEBIT',
                            'DD_FAILED_CLAIM',
                            'DD_FUNDS_RETURNED',
                            'CARD_AUTH',
                            'CARD_CREATION',
                            'UPCOMING_CREDIT',
                            'UPCOMING_COLLECTION_CREDIT',
                            'UPCOMING_COLLECTION_DEBIT',
                            'CARD_STATUS_UPDATE',
                            'CARD_TOKEN_PROVISIONING',
                            'PAYMENT_COMPLIANCE_STATUS',
                            'DD_COLLECTION_STATUS',
                            'ACCOUNT_SWITCH_UPDATE',
                            'PAYMENT_FILE_UPLOAD',
                            'ACCOUNT_STATUS_CHANGE',
                        ],
                    },
                    channel: {
                        type: 'string',
                        description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                        enum: ['EMAIL', 'WEBHOOK'],
                    },
                    status: {
                        type: 'string',
                        description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                        enum: ['ACTIVE', 'INACTIVE'],
                    },
                    destinations: {
                        type: 'array',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        items: {
                            type: 'string',
                            description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        },
                    },
                    config: {
                        type: 'object',
                        properties: {
                            threshold: {
                                minimum: 0,
                                type: 'number',
                                description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                            },
                            timesToRun: {
                                type: 'array',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                    enum: ['AM', 'PM'],
                                },
                            },
                            daysToRun: {
                                type: 'array',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                    enum: [
                                        'MONDAY',
                                        'TUESDAY',
                                        'WEDNESDAY',
                                        'THURSDAY',
                                        'FRIDAY',
                                        'SATURDAY',
                                        'SUNDAY',
                                    ],
                                },
                            },
                            retry: {
                                type: 'boolean',
                                description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            secret: {
                                maxLength: 32,
                                minLength: 32,
                                type: 'string',
                                description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            hmacAlgorithm: {
                                type: 'string',
                                description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                                enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                            },
                        },
                        description: 'Configuration information for this Notification entity.',
                    },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAllCustomerNotifications = GetAllCustomerNotifications;
const GetAllPartnerNotifications = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    partnerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['partnerId'],
            },
        ],
    },
    response: {
        '200': {
            type: 'array',
            items: {
                required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
                type: 'object',
                properties: {
                    id: { type: 'string', description: 'Unique Identifier for the notification.' },
                    customerId: {
                        type: 'string',
                        description: 'Unique Identifier for the customer of this notification.',
                    },
                    type: {
                        type: 'string',
                        description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                        enum: [
                            'PAYIN',
                            'PAYOUT',
                            'BALANCE_LOW',
                            'BALANCE_HIGH',
                            'BALANCE',
                            'DDMANDATE',
                            'CUSTVSTAT',
                            'ACCOUNT_STATEMENT',
                            'PENDING_PAYMENTS',
                            'DD_INCOMING_DEBIT',
                            'DD_FAILED_CLAIM',
                            'DD_FUNDS_RETURNED',
                            'CARD_AUTH',
                            'CARD_CREATION',
                            'UPCOMING_CREDIT',
                            'UPCOMING_COLLECTION_CREDIT',
                            'UPCOMING_COLLECTION_DEBIT',
                            'CARD_STATUS_UPDATE',
                            'CARD_TOKEN_PROVISIONING',
                            'PAYMENT_COMPLIANCE_STATUS',
                            'DD_COLLECTION_STATUS',
                            'ACCOUNT_SWITCH_UPDATE',
                            'PAYMENT_FILE_UPLOAD',
                            'ACCOUNT_STATUS_CHANGE',
                        ],
                    },
                    channel: {
                        type: 'string',
                        description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                        enum: ['EMAIL', 'WEBHOOK'],
                    },
                    status: {
                        type: 'string',
                        description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                        enum: ['ACTIVE', 'INACTIVE'],
                    },
                    destinations: {
                        type: 'array',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        items: {
                            type: 'string',
                            description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        },
                    },
                    config: {
                        type: 'object',
                        properties: {
                            threshold: {
                                minimum: 0,
                                type: 'number',
                                description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                            },
                            timesToRun: {
                                type: 'array',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                    enum: ['AM', 'PM'],
                                },
                            },
                            daysToRun: {
                                type: 'array',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                    enum: [
                                        'MONDAY',
                                        'TUESDAY',
                                        'WEDNESDAY',
                                        'THURSDAY',
                                        'FRIDAY',
                                        'SATURDAY',
                                        'SUNDAY',
                                    ],
                                },
                            },
                            retry: {
                                type: 'boolean',
                                description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            secret: {
                                maxLength: 32,
                                minLength: 32,
                                type: 'string',
                                description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            hmacAlgorithm: {
                                type: 'string',
                                description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                                enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                            },
                        },
                        description: 'Configuration information for this Notification entity.',
                    },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
                type: 'object',
                properties: {
                    id: { type: 'string', description: 'Unique Identifier for the notification.' },
                    customerId: {
                        type: 'string',
                        description: 'Unique Identifier for the customer of this notification.',
                    },
                    type: {
                        type: 'string',
                        description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                        enum: [
                            'PAYIN',
                            'PAYOUT',
                            'BALANCE_LOW',
                            'BALANCE_HIGH',
                            'BALANCE',
                            'DDMANDATE',
                            'CUSTVSTAT',
                            'ACCOUNT_STATEMENT',
                            'PENDING_PAYMENTS',
                            'DD_INCOMING_DEBIT',
                            'DD_FAILED_CLAIM',
                            'DD_FUNDS_RETURNED',
                            'CARD_AUTH',
                            'CARD_CREATION',
                            'UPCOMING_CREDIT',
                            'UPCOMING_COLLECTION_CREDIT',
                            'UPCOMING_COLLECTION_DEBIT',
                            'CARD_STATUS_UPDATE',
                            'CARD_TOKEN_PROVISIONING',
                            'PAYMENT_COMPLIANCE_STATUS',
                            'DD_COLLECTION_STATUS',
                            'ACCOUNT_SWITCH_UPDATE',
                            'PAYMENT_FILE_UPLOAD',
                            'ACCOUNT_STATUS_CHANGE',
                        ],
                    },
                    channel: {
                        type: 'string',
                        description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                        enum: ['EMAIL', 'WEBHOOK'],
                    },
                    status: {
                        type: 'string',
                        description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                        enum: ['ACTIVE', 'INACTIVE'],
                    },
                    destinations: {
                        type: 'array',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        items: {
                            type: 'string',
                            description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                        },
                    },
                    config: {
                        type: 'object',
                        properties: {
                            threshold: {
                                minimum: 0,
                                type: 'number',
                                description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                            },
                            timesToRun: {
                                type: 'array',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                    enum: ['AM', 'PM'],
                                },
                            },
                            daysToRun: {
                                type: 'array',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                                items: {
                                    type: 'string',
                                    description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                    enum: [
                                        'MONDAY',
                                        'TUESDAY',
                                        'WEDNESDAY',
                                        'THURSDAY',
                                        'FRIDAY',
                                        'SATURDAY',
                                        'SUNDAY',
                                    ],
                                },
                            },
                            retry: {
                                type: 'boolean',
                                description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            secret: {
                                maxLength: 32,
                                minLength: 32,
                                type: 'string',
                                description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                            },
                            hmacAlgorithm: {
                                type: 'string',
                                description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                                enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                            },
                        },
                        description: 'Configuration information for this Notification entity.',
                    },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAllPartnerNotifications = GetAllPartnerNotifications;
const GetAspsProviders = {
    response: {
        '200': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Unique identifier (within Modulr) of the ASPSP',
                        examples: ['H100000001'],
                    },
                    name: { type: 'string', description: 'Name of the ASPSP', examples: ['Bank of Money'] },
                    capabilities: {
                        type: 'array',
                        description: 'Capability list of the ASPSP',
                        items: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: 'Type of the capability, can be one of SINGLE_IMMEDIATE, STANDING_ORDER\n\n`SINGLE_IMMEDIATE` `STANDING_ORDER` `SWEEPING_VRP`',
                                    enum: ['SINGLE_IMMEDIATE', 'STANDING_ORDER', 'SWEEPING_VRP'],
                                    examples: ['SINGLE_IMMEDIATE'],
                                },
                                status: {
                                    type: 'string',
                                    description: 'Status of the capability, can be one of ENABLED, DISABLED\n\n`ENABLED` `DISABLED` `INACTIVE` `INTERNAL_ONLY`',
                                    enum: ['ENABLED', 'DISABLED', 'INACTIVE', 'INTERNAL_ONLY'],
                                    examples: ['ENABLED'],
                                },
                            },
                            description: 'Capability list of the ASPSP',
                        },
                    },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAspsProviders = GetAspsProviders;
const GetAsyncTask = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card task',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '200': {
            required: ['createdDate', 'status', 'taskBid', 'type'],
            type: 'object',
            properties: {
                taskBid: { type: 'string', description: 'ID of async task', examples: ['T110000003'] },
                resourceUrl: {
                    type: 'string',
                    description: 'Url of available resource after task completion',
                    examples: ['/cards/V110000022'],
                },
                resourceId: {
                    type: 'string',
                    description: 'ID of resource after task completion. Will only be returned for COMPLETE tasks.',
                    examples: ['V110000022'],
                },
                type: {
                    type: 'string',
                    description: 'Type of async task\n\n`PHYSICAL_CARD_CREATE`',
                    enum: ['PHYSICAL_CARD_CREATE'],
                },
                status: {
                    type: 'string',
                    description: 'Status of the task\n\n`RECEIVED` `RUNNING` `COMPLETE` `ERROR`',
                    enum: ['RECEIVED', 'RUNNING', 'COMPLETE', 'ERROR'],
                },
                createdDate: {
                    type: 'string',
                    description: 'The creation date of the task',
                    format: 'date-time',
                },
                errorReason: {
                    type: 'string',
                    description: 'The error reason. Only populated if status is ERROR',
                },
            },
            description: 'List of responses on the current page',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAsyncTask = GetAsyncTask;
const GetAsyncTasks = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        examples: ['T000000001'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card task',
                    },
                    aid: {
                        type: 'string',
                        examples: ['A0000001'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The account ID to retrieve card tasks for',
                    },
                    statuses: {
                        type: 'string',
                        enum: ['RECEIVED', 'RUNNING', 'COMPLETE', 'ERROR'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Statuses of card tasks to be retrieved',
                    },
                    types: {
                        type: 'string',
                        enum: ['PHYSICAL_CARD_CREATE'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Types of card tasks to be retrieved',
                    },
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (0 indexed)',
                    },
                    size: {
                        maximum: 500,
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Size of page to fetch',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['createdDate', 'status', 'taskBid', 'type'],
                        type: 'object',
                        properties: {
                            taskBid: {
                                type: 'string',
                                description: 'ID of async task',
                                examples: ['T110000003'],
                            },
                            resourceUrl: {
                                type: 'string',
                                description: 'Url of available resource after task completion',
                                examples: ['/cards/V110000022'],
                            },
                            resourceId: {
                                type: 'string',
                                description: 'ID of resource after task completion. Will only be returned for COMPLETE tasks.',
                                examples: ['V110000022'],
                            },
                            type: {
                                type: 'string',
                                description: 'Type of async task\n\n`PHYSICAL_CARD_CREATE`',
                                enum: ['PHYSICAL_CARD_CREATE'],
                            },
                            status: {
                                type: 'string',
                                description: 'Status of the task\n\n`RECEIVED` `RUNNING` `COMPLETE` `ERROR`',
                                enum: ['RECEIVED', 'RUNNING', 'COMPLETE', 'ERROR'],
                            },
                            createdDate: {
                                type: 'string',
                                description: 'The creation date of the task',
                                format: 'date-time',
                            },
                            errorReason: {
                                type: 'string',
                                description: 'The error reason. Only populated if status is ERROR',
                            },
                        },
                        description: 'List of responses on the current page',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetAsyncTasks = GetAsyncTasks;
const GetBatchPayment = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'id given when batch request was made',
                    },
                },
                required: ['id'],
            },
            {
                type: 'object',
                properties: {
                    includePayments: {
                        type: 'boolean',
                        default: true,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique id for the Batch Payment. 10 characters long',
                    examples: ['D920000001'],
                },
                externalReference: {
                    type: 'string',
                    description: 'External reference, if provided',
                    examples: ['aReference_00001'],
                },
                status: {
                    type: 'string',
                    description: 'Current status of batch.\n\n`ACCEPTED` `REJECTED` `SUBMITTED` `CANCELLED`',
                    enum: ['ACCEPTED', 'REJECTED', 'SUBMITTED', 'CANCELLED'],
                    examples: ['ACCEPTED'],
                },
                totalPayments: {
                    type: 'integer',
                    description: 'Total count of payments in this batch',
                    format: 'int32',
                    examples: [9123],
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                currentUserCanApprove: {
                    type: 'boolean',
                    description: 'Whether the user is allowed to approve this batch, based on their approval limits, and applicable configuration',
                    examples: [true],
                },
                paymentDetails: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            totalPaymentCount: {
                                type: 'integer',
                                description: 'Total count of payments',
                                format: 'int32',
                                examples: [10],
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            totalAmount: {
                                type: 'number',
                                description: 'Sum total of payment amounts',
                                examples: [100],
                            },
                            pendingApprovalCount: {
                                type: 'integer',
                                description: 'Count of payments currently pending approval',
                                format: 'int32',
                                examples: [5],
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            pendingApprovalAmount: {
                                type: 'number',
                                description: 'Sum total of payment amounts currently pending approval',
                                examples: [50],
                            },
                        },
                        description: 'Summary of payments and approvals',
                    },
                    description: 'Summary of payments and approvals, per currency (as a 3-alpha currency code)',
                },
                approvals: {
                    type: 'array',
                    description: 'List of batch-level approvals',
                    items: {
                        type: 'object',
                        properties: {
                            approvedBy: {
                                type: 'string',
                                description: 'ID of user who approved this batch payment request',
                                examples: ['U2100021'],
                            },
                            approvedOn: {
                                type: 'string',
                                description: 'Date this approval was applied',
                                format: 'date',
                                examples: ['2022-06-25'],
                            },
                        },
                        description: 'A single approval against a batch payment request',
                    },
                },
                currentUserCanCancel: {
                    type: 'boolean',
                    description: 'Whether the user is allowed and currently able to cancel at least one of the payments in this batch',
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the batch payment was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                processingDateFrom: {
                    type: 'string',
                    description: "Earliest processing date in the batch file or the batch creation date if the file does not have any dates. Date format 'yyyy-MM-dd'",
                    format: 'date',
                    examples: ['2017-01-28'],
                },
                processingDateTo: {
                    type: 'string',
                    description: "Last processing date in the batch file or empty if the file does not have any dates. Date format 'Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000'",
                    format: 'date',
                    examples: ['2017-01-28'],
                },
                paymentResponses: {
                    type: 'array',
                    description: 'Full details of all payments in this batch',
                    deprecated: true,
                    items: {
                        required: ['details', 'externalReference', 'id', 'status'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for the Payment request. 10 characters long',
                                examples: ['P000001ABC'],
                            },
                            status: {
                                type: 'string',
                                description: 'Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`',
                                enum: [
                                    'SUBMITTED',
                                    'SCREENING_REQ',
                                    'VALIDATED',
                                    'PENDING_FOR_DATE',
                                    'PENDING_FOR_FUNDS',
                                    'EXT_PROC',
                                    'PROCESSED',
                                    'RECONCILED',
                                    'ER_INVALID',
                                    'ER_EXTCONN',
                                    'ER_EXTSYS',
                                    'ER_EXPIRED',
                                    'ER_GENERAL',
                                    'ER_BATCH',
                                    'EXT_SENT',
                                    'UNALLOCATED',
                                    'HELD',
                                    'RETURNED',
                                    'CANCELLED',
                                    'REPROCESSING',
                                    'VOID',
                                    'CLEARING',
                                    'HELD_IN_SUSPENSE',
                                ],
                                examples: ['VALIDATED'],
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'",
                                format: 'date-time',
                            },
                            externalReference: {
                                type: 'string',
                                description: 'external reference if provided',
                                examples: ['aReference_00001'],
                            },
                            details: {
                                type: 'object',
                                description: 'All the details of the payment from the original request',
                                additionalProperties: true,
                            },
                            approvalStatus: {
                                type: 'string',
                                description: 'Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`',
                                enum: ['NOTNEEDED', 'PENDING', 'APPROVED', 'REJECTED', 'DELETED'],
                                examples: ['NOTNEEDED'],
                            },
                            message: { type: 'string', description: 'Information about payment (if available)' },
                            schemeInfo: {
                                type: 'object',
                                properties: {
                                    name: { type: 'string' },
                                    id: { type: 'string' },
                                    message: { type: 'string' },
                                    responseCode: { type: 'string' },
                                },
                                description: 'Information with regards to the payment scheme',
                            },
                        },
                        description: 'Full details of all payments in this batch',
                    },
                },
                summary: {
                    type: 'object',
                    properties: {
                        total: {
                            type: 'integer',
                            description: 'Total count of payment requests in this batch',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        invalid: {
                            type: 'integer',
                            description: 'Count of invalid payment requests',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        inprogress: {
                            type: 'integer',
                            description: 'Count of payment requests in progress',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        completed: {
                            type: 'integer',
                            description: 'Count of completed payments',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        errors: {
                            type: 'integer',
                            description: 'Count of failed payment requests',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        info: {
                            type: 'string',
                            description: 'Additional information or error message regarding this batch payment request',
                        },
                        strict: { type: 'boolean' },
                    },
                    description: 'Summary of the state of payment requests in this batch',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetBatchPayment = GetBatchPayment;
const GetBatchPayments = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    externalReference: {
                        maxLength: 50,
                        minLength: 0,
                        pattern: '[\\w-\\s]*',
                        type: 'string',
                        description: 'Batch payments External Reference contains this text.',
                        examples: ['aReference_00001'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    fromCreatedDate: {
                        type: 'string',
                        description: 'Batch payments created date equal or after to this date.',
                        examples: ['2022-05-16'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    batchPaymentStatuses: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Current status of batch. Multiple statuses can be specified by repeating the parameter.',
                            enum: ['ACCEPTED', 'REJECTED', 'SUBMITTED', 'CANCELLED'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    paymentStatuses: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Current status of payment. Multiple statuses can be specified by repeating the parameter.',
                            enum: [
                                'SUBMITTED',
                                'SCREENING_REQ',
                                'VALIDATED',
                                'PENDING_FOR_DATE',
                                'PENDING_FOR_FUNDS',
                                'EXT_PROC',
                                'PROCESSED',
                                'RECONCILED',
                                'ER_INVALID',
                                'ER_EXTCONN',
                                'ER_EXTSYS',
                                'ER_EXPIRED',
                                'ER_GENERAL',
                                'ER_BATCH',
                                'EXT_SENT',
                                'UNALLOCATED',
                                'HELD',
                                'RETURNED',
                                'CANCELLED',
                                'REPROCESSING',
                                'VOID',
                                'CLEARING',
                            ],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    approvalStatus: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Filter batch payments which contain payments with the specified approval statuses',
                            enum: ['NOTNEEDED', 'PENDING', 'APPROVED', 'REJECTED', 'DELETED'],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    currentUserCanApprove: {
                        type: 'string',
                        description: 'Only return batch payments the current user can approve.',
                        examples: [true],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    createdByCustomerId: {
                        type: 'string',
                        description: 'Limit results by the customer which created the batch payment request',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    submissionType: {
                        type: 'string',
                        description: 'Limit results to batches with submission type specified',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    page: {
                        type: 'string',
                        description: 'Page to fetch (0 indexed)',
                        default: '0',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        maximum: 500,
                        type: 'string',
                        description: 'Size of Page to fetch',
                        default: '20',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for the Batch Payment. 10 characters long',
                                examples: ['D920000001'],
                            },
                            externalReference: {
                                type: 'string',
                                description: 'External reference, if provided',
                                examples: ['aReference_00001'],
                            },
                            status: {
                                type: 'string',
                                description: 'Current status of batch.\n\n`ACCEPTED` `REJECTED` `SUBMITTED` `CANCELLED`',
                                enum: ['ACCEPTED', 'REJECTED', 'SUBMITTED', 'CANCELLED'],
                                examples: ['ACCEPTED'],
                            },
                            totalPayments: {
                                type: 'integer',
                                description: 'Total count of payments in this batch',
                                format: 'int32',
                                examples: [9123],
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            currentUserCanApprove: {
                                type: 'boolean',
                                description: 'Whether the user is allowed to approve this batch, based on their approval limits, and applicable configuration',
                                examples: [true],
                            },
                            paymentDetails: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'object',
                                    properties: {
                                        totalPaymentCount: {
                                            type: 'integer',
                                            description: 'Total count of payments',
                                            format: 'int32',
                                            examples: [10],
                                            minimum: -2147483648,
                                            maximum: 2147483647,
                                        },
                                        totalAmount: {
                                            type: 'number',
                                            description: 'Sum total of payment amounts',
                                            examples: [100],
                                        },
                                        pendingApprovalCount: {
                                            type: 'integer',
                                            description: 'Count of payments currently pending approval',
                                            format: 'int32',
                                            examples: [5],
                                            minimum: -2147483648,
                                            maximum: 2147483647,
                                        },
                                        pendingApprovalAmount: {
                                            type: 'number',
                                            description: 'Sum total of payment amounts currently pending approval',
                                            examples: [50],
                                        },
                                    },
                                    description: 'Summary of payments and approvals',
                                },
                                description: 'Summary of payments and approvals, per currency (as a 3-alpha currency code)',
                            },
                            approvals: {
                                type: 'array',
                                description: 'List of batch-level approvals',
                                items: {
                                    type: 'object',
                                    properties: {
                                        approvedBy: {
                                            type: 'string',
                                            description: 'ID of user who approved this batch payment request',
                                            examples: ['U2100021'],
                                        },
                                        approvedOn: {
                                            type: 'string',
                                            description: 'Date this approval was applied',
                                            format: 'date',
                                            examples: ['2022-06-25'],
                                        },
                                    },
                                    description: 'A single approval against a batch payment request',
                                },
                            },
                            currentUserCanCancel: {
                                type: 'boolean',
                                description: 'Whether the user is allowed and currently able to cancel at least one of the payments in this batch',
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime when the batch payment was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            processingDateFrom: {
                                type: 'string',
                                description: "Earliest processing date in the batch file or the batch creation date if the file does not have any dates. Date format 'yyyy-MM-dd'",
                                format: 'date',
                                examples: ['2017-01-28'],
                            },
                            processingDateTo: {
                                type: 'string',
                                description: "Last processing date in the batch file or empty if the file does not have any dates. Date format 'Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000'",
                                format: 'date',
                                examples: ['2017-01-28'],
                            },
                        },
                        description: 'List of responses on the current page',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0-based, i.e first page = 0, second page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetBatchPayments = GetBatchPayments;
const GetBeneficiaries = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Id of Beneficiary(s) to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    customerId: {
                        type: 'string',
                        description: 'Filter by Customer Id',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    q: {
                        type: 'string',
                        description: 'Partial name of beneficiary or Scan Details Or IBAN Or external referenceOr default reference to search for. Deprecated use validForAccount, orSortCode, orAccountNumber, orIban, orName, orExternalReference, orDefaultReference instead',
                        deprecated: true,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    modifiedSince: {
                        type: 'string',
                        description: 'Beneficiaries modified after this date time',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    hasExternalReference: {
                        type: 'boolean',
                        description: 'Filter by existence of external reference',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    externalReference: {
                        type: 'string',
                        description: 'External reference for beneficiary',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    iban: {
                        type: 'string',
                        description: 'IBAN',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    qualifier: {
                        type: 'string',
                        description: 'A list of external qualifiers',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    state: {
                        type: 'string',
                        description: 'Approval item state(s) to filter by',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    validForAccount: {
                        type: 'string',
                        description: 'Source account BID. Limit results to beneficiaries which would be valid recipients of payments from the given account (e.g. IBAN can’t be paid from GBP account, SCAN can’t be paid from non-GBP account). The specified account must be accessible to the user',
                        examples: ['A000000001'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orSortCode.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orSortCode.value': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orAccountNumber.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orAccountNumber.value': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orIban.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orIban.value': { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    'orName.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orName.value': { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    'orExternalReference.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orExternalReference.value': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orDefaultReference.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'orDefaultReference.value': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    createdDate: {
                        type: 'string',
                        description: 'Created date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    partialName: {
                        type: 'string',
                        description: 'Partial name',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sortCode: {
                        type: 'string',
                        description: 'Sort code',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    accountNumber: {
                        type: 'string',
                        description: 'Account number',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    page: {
                        type: 'string',
                        description: 'Page to fetch (0 indexed)',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        maximum: 500,
                        type: 'string',
                        description: 'Size of Page to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [
                    'orSortCode.type',
                    'orSortCode.value',
                    'orAccountNumber.type',
                    'orAccountNumber.value',
                    'orIban.type',
                    'orIban.value',
                    'orName.type',
                    'orName.value',
                    'orExternalReference.type',
                    'orExternalReference.value',
                    'orDefaultReference.type',
                    'orDefaultReference.value',
                ],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: [
                            'created',
                            'customerId',
                            'defaultReference',
                            'destinationIdentifier',
                            'id',
                            'name',
                            'status',
                            'updated',
                        ],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique reference for the Beneficiary.',
                                examples: ['B00000001A'],
                            },
                            name: { type: 'string', description: 'Name for the Beneficiary' },
                            birthdate: {
                                type: 'string',
                                description: 'Date of birth for the Beneficiary in yyyy-MM-dd format',
                                format: 'date',
                            },
                            emailAddress: { type: 'string', description: 'Email address for the Beneficiary' },
                            phoneNumber: {
                                type: 'string',
                                description: 'Phone number for the Beneficiary in international pattern',
                            },
                            destinationIdentifier: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                        description: '`SCAN` `IBAN` `DD` `INTL`',
                                    },
                                    accountNumber: {
                                        type: 'string',
                                        description: 'Bank account Sort Code',
                                        examples: ['12345678'],
                                    },
                                    sortCode: {
                                        type: 'string',
                                        description: 'Bank account Sort Code',
                                        examples: ['000000'],
                                    },
                                    iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                                    bic: { type: 'string', examples: ['MODRGB21'] },
                                    currency: { type: 'string', examples: ['GBP'] },
                                    countrySpecificDetails: {
                                        type: 'object',
                                        properties: {
                                            bankName: {
                                                type: 'string',
                                                description: 'The name of the destination bank.',
                                                examples: ['Apple Bank'],
                                            },
                                            bankAddress: {
                                                type: 'string',
                                                description: 'The address of the destination bank.',
                                                examples: ['2100 Broadway'],
                                            },
                                            bankCity: {
                                                type: 'string',
                                                description: 'The city in which the destination bank resides.',
                                                examples: ['New York City'],
                                            },
                                            bankBranchName: {
                                                type: 'string',
                                                description: "The name of the destination bank's branch.",
                                                examples: ['New York'],
                                            },
                                            bankBranchCode: {
                                                type: 'string',
                                                description: "The code of the destination bank's branch.",
                                                examples: ['44-04'],
                                            },
                                            bankCode: {
                                                type: 'string',
                                                description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                            },
                                            chineseId: {
                                                type: 'string',
                                                description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                                examples: ['01101201901018889'],
                                            },
                                            province: {
                                                type: 'string',
                                                description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                                examples: ['Zhejiang'],
                                            },
                                            business: {
                                                type: 'boolean',
                                                description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                                examples: [true],
                                            },
                                            bankCodeType: {
                                                type: 'string',
                                                description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                                enum: ['ABA', 'CHIPS'],
                                                examples: ['ABA'],
                                            },
                                            bankCountry: {
                                                type: 'string',
                                                description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                                enum: [
                                                    'AT',
                                                    'BE',
                                                    'BG',
                                                    'CY',
                                                    'CZ',
                                                    'DK',
                                                    'EE',
                                                    'FI',
                                                    'FR',
                                                    'DE',
                                                    'GR',
                                                    'HR',
                                                    'HU',
                                                    'IS',
                                                    'IE',
                                                    'IT',
                                                    'LV',
                                                    'LI',
                                                    'LT',
                                                    'LU',
                                                    'MT',
                                                    'NL',
                                                    'NO',
                                                    'PL',
                                                    'PT',
                                                    'RO',
                                                    'SK',
                                                    'SI',
                                                    'ES',
                                                    'SE',
                                                    'GB',
                                                    'MQ',
                                                    'YT',
                                                    'GP',
                                                    'GF',
                                                    'RE',
                                                    'MF',
                                                    'GI',
                                                    'GG',
                                                    'IM',
                                                    'JE',
                                                    'MC',
                                                    'CH',
                                                    'AD',
                                                    'SM',
                                                    'VA',
                                                    'AX',
                                                    'PM',
                                                    'BL',
                                                    'AF',
                                                    'AL',
                                                    'DZ',
                                                    'AS',
                                                    'AO',
                                                    'AI',
                                                    'AQ',
                                                    'AG',
                                                    'AR',
                                                    'AM',
                                                    'AW',
                                                    'AU',
                                                    'AZ',
                                                    'BS',
                                                    'BH',
                                                    'BD',
                                                    'BB',
                                                    'BY',
                                                    'BZ',
                                                    'BJ',
                                                    'BM',
                                                    'BT',
                                                    'BO',
                                                    'BQ',
                                                    'BA',
                                                    'BW',
                                                    'BV',
                                                    'BR',
                                                    'IO',
                                                    'VG',
                                                    'BN',
                                                    'BF',
                                                    'BI',
                                                    'KH',
                                                    'CM',
                                                    'CA',
                                                    'CV',
                                                    'KY',
                                                    'CF',
                                                    'TD',
                                                    'CL',
                                                    'CN',
                                                    'CX',
                                                    'CC',
                                                    'CO',
                                                    'KM',
                                                    'CK',
                                                    'CR',
                                                    'CU',
                                                    'CW',
                                                    'CD',
                                                    'DJ',
                                                    'DM',
                                                    'DO',
                                                    'TL',
                                                    'EC',
                                                    'EG',
                                                    'SV',
                                                    'GQ',
                                                    'ER',
                                                    'SZ',
                                                    'ET',
                                                    'FK',
                                                    'FO',
                                                    'FJ',
                                                    'PF',
                                                    'TF',
                                                    'GA',
                                                    'GM',
                                                    'GE',
                                                    'GH',
                                                    'GL',
                                                    'GD',
                                                    'GU',
                                                    'GT',
                                                    'GN',
                                                    'GW',
                                                    'GY',
                                                    'HT',
                                                    'HM',
                                                    'HN',
                                                    'HK',
                                                    'IN',
                                                    'ID',
                                                    'IR',
                                                    'IQ',
                                                    'IL',
                                                    'CI',
                                                    'JM',
                                                    'JP',
                                                    'JO',
                                                    'KZ',
                                                    'KE',
                                                    'KI',
                                                    'XK',
                                                    'KW',
                                                    'KG',
                                                    'LA',
                                                    'LB',
                                                    'LS',
                                                    'LR',
                                                    'LY',
                                                    'MO',
                                                    'MG',
                                                    'MW',
                                                    'MY',
                                                    'MV',
                                                    'ML',
                                                    'MH',
                                                    'MR',
                                                    'MU',
                                                    'MX',
                                                    'FM',
                                                    'MD',
                                                    'MN',
                                                    'ME',
                                                    'MS',
                                                    'MA',
                                                    'MZ',
                                                    'MM',
                                                    'NA',
                                                    'NR',
                                                    'NP',
                                                    'AN',
                                                    'NC',
                                                    'NZ',
                                                    'NI',
                                                    'NE',
                                                    'NG',
                                                    'NU',
                                                    'NF',
                                                    'KP',
                                                    'MK',
                                                    'MP',
                                                    'OM',
                                                    'PK',
                                                    'PW',
                                                    'PS',
                                                    'PA',
                                                    'PG',
                                                    'PY',
                                                    'PE',
                                                    'PH',
                                                    'PN',
                                                    'PR',
                                                    'QA',
                                                    'CG',
                                                    'RU',
                                                    'RW',
                                                    'SH',
                                                    'KN',
                                                    'LC',
                                                    'VC',
                                                    'WS',
                                                    'ST',
                                                    'SA',
                                                    'SN',
                                                    'RS',
                                                    'SC',
                                                    'SL',
                                                    'SG',
                                                    'SX',
                                                    'SB',
                                                    'SO',
                                                    'ZA',
                                                    'KR',
                                                    'GS',
                                                    'SS',
                                                    'LK',
                                                    'SD',
                                                    'SR',
                                                    'SY',
                                                    'SJ',
                                                    'TW',
                                                    'TJ',
                                                    'TZ',
                                                    'TH',
                                                    'TG',
                                                    'TK',
                                                    'TO',
                                                    'TT',
                                                    'TN',
                                                    'TR',
                                                    'TM',
                                                    'TC',
                                                    'TV',
                                                    'UG',
                                                    'UA',
                                                    'AE',
                                                    'UM',
                                                    'US',
                                                    'UY',
                                                    'UZ',
                                                    'VU',
                                                    'VE',
                                                    'VN',
                                                    'VI',
                                                    'WF',
                                                    'EH',
                                                    'YE',
                                                    'ZM',
                                                    'ZW',
                                                ],
                                                examples: ['US'],
                                            },
                                        },
                                    },
                                },
                                description: 'Account Identifier',
                            },
                            redirectedDestination: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                        description: '`SCAN` `IBAN` `DD` `INTL`',
                                    },
                                    accountNumber: {
                                        type: 'string',
                                        description: 'Bank account Sort Code',
                                        examples: ['12345678'],
                                    },
                                    sortCode: {
                                        type: 'string',
                                        description: 'Bank account Sort Code',
                                        examples: ['000000'],
                                    },
                                    iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                                    bic: { type: 'string', examples: ['MODRGB21'] },
                                    currency: { type: 'string', examples: ['GBP'] },
                                    countrySpecificDetails: {
                                        type: 'object',
                                        properties: {
                                            bankName: {
                                                type: 'string',
                                                description: 'The name of the destination bank.',
                                                examples: ['Apple Bank'],
                                            },
                                            bankAddress: {
                                                type: 'string',
                                                description: 'The address of the destination bank.',
                                                examples: ['2100 Broadway'],
                                            },
                                            bankCity: {
                                                type: 'string',
                                                description: 'The city in which the destination bank resides.',
                                                examples: ['New York City'],
                                            },
                                            bankBranchName: {
                                                type: 'string',
                                                description: "The name of the destination bank's branch.",
                                                examples: ['New York'],
                                            },
                                            bankBranchCode: {
                                                type: 'string',
                                                description: "The code of the destination bank's branch.",
                                                examples: ['44-04'],
                                            },
                                            bankCode: {
                                                type: 'string',
                                                description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                            },
                                            chineseId: {
                                                type: 'string',
                                                description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                                examples: ['01101201901018889'],
                                            },
                                            province: {
                                                type: 'string',
                                                description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                                examples: ['Zhejiang'],
                                            },
                                            business: {
                                                type: 'boolean',
                                                description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                                examples: [true],
                                            },
                                            bankCodeType: {
                                                type: 'string',
                                                description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                                enum: ['ABA', 'CHIPS'],
                                                examples: ['ABA'],
                                            },
                                            bankCountry: {
                                                type: 'string',
                                                description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                                enum: [
                                                    'AT',
                                                    'BE',
                                                    'BG',
                                                    'CY',
                                                    'CZ',
                                                    'DK',
                                                    'EE',
                                                    'FI',
                                                    'FR',
                                                    'DE',
                                                    'GR',
                                                    'HR',
                                                    'HU',
                                                    'IS',
                                                    'IE',
                                                    'IT',
                                                    'LV',
                                                    'LI',
                                                    'LT',
                                                    'LU',
                                                    'MT',
                                                    'NL',
                                                    'NO',
                                                    'PL',
                                                    'PT',
                                                    'RO',
                                                    'SK',
                                                    'SI',
                                                    'ES',
                                                    'SE',
                                                    'GB',
                                                    'MQ',
                                                    'YT',
                                                    'GP',
                                                    'GF',
                                                    'RE',
                                                    'MF',
                                                    'GI',
                                                    'GG',
                                                    'IM',
                                                    'JE',
                                                    'MC',
                                                    'CH',
                                                    'AD',
                                                    'SM',
                                                    'VA',
                                                    'AX',
                                                    'PM',
                                                    'BL',
                                                    'AF',
                                                    'AL',
                                                    'DZ',
                                                    'AS',
                                                    'AO',
                                                    'AI',
                                                    'AQ',
                                                    'AG',
                                                    'AR',
                                                    'AM',
                                                    'AW',
                                                    'AU',
                                                    'AZ',
                                                    'BS',
                                                    'BH',
                                                    'BD',
                                                    'BB',
                                                    'BY',
                                                    'BZ',
                                                    'BJ',
                                                    'BM',
                                                    'BT',
                                                    'BO',
                                                    'BQ',
                                                    'BA',
                                                    'BW',
                                                    'BV',
                                                    'BR',
                                                    'IO',
                                                    'VG',
                                                    'BN',
                                                    'BF',
                                                    'BI',
                                                    'KH',
                                                    'CM',
                                                    'CA',
                                                    'CV',
                                                    'KY',
                                                    'CF',
                                                    'TD',
                                                    'CL',
                                                    'CN',
                                                    'CX',
                                                    'CC',
                                                    'CO',
                                                    'KM',
                                                    'CK',
                                                    'CR',
                                                    'CU',
                                                    'CW',
                                                    'CD',
                                                    'DJ',
                                                    'DM',
                                                    'DO',
                                                    'TL',
                                                    'EC',
                                                    'EG',
                                                    'SV',
                                                    'GQ',
                                                    'ER',
                                                    'SZ',
                                                    'ET',
                                                    'FK',
                                                    'FO',
                                                    'FJ',
                                                    'PF',
                                                    'TF',
                                                    'GA',
                                                    'GM',
                                                    'GE',
                                                    'GH',
                                                    'GL',
                                                    'GD',
                                                    'GU',
                                                    'GT',
                                                    'GN',
                                                    'GW',
                                                    'GY',
                                                    'HT',
                                                    'HM',
                                                    'HN',
                                                    'HK',
                                                    'IN',
                                                    'ID',
                                                    'IR',
                                                    'IQ',
                                                    'IL',
                                                    'CI',
                                                    'JM',
                                                    'JP',
                                                    'JO',
                                                    'KZ',
                                                    'KE',
                                                    'KI',
                                                    'XK',
                                                    'KW',
                                                    'KG',
                                                    'LA',
                                                    'LB',
                                                    'LS',
                                                    'LR',
                                                    'LY',
                                                    'MO',
                                                    'MG',
                                                    'MW',
                                                    'MY',
                                                    'MV',
                                                    'ML',
                                                    'MH',
                                                    'MR',
                                                    'MU',
                                                    'MX',
                                                    'FM',
                                                    'MD',
                                                    'MN',
                                                    'ME',
                                                    'MS',
                                                    'MA',
                                                    'MZ',
                                                    'MM',
                                                    'NA',
                                                    'NR',
                                                    'NP',
                                                    'AN',
                                                    'NC',
                                                    'NZ',
                                                    'NI',
                                                    'NE',
                                                    'NG',
                                                    'NU',
                                                    'NF',
                                                    'KP',
                                                    'MK',
                                                    'MP',
                                                    'OM',
                                                    'PK',
                                                    'PW',
                                                    'PS',
                                                    'PA',
                                                    'PG',
                                                    'PY',
                                                    'PE',
                                                    'PH',
                                                    'PN',
                                                    'PR',
                                                    'QA',
                                                    'CG',
                                                    'RU',
                                                    'RW',
                                                    'SH',
                                                    'KN',
                                                    'LC',
                                                    'VC',
                                                    'WS',
                                                    'ST',
                                                    'SA',
                                                    'SN',
                                                    'RS',
                                                    'SC',
                                                    'SL',
                                                    'SG',
                                                    'SX',
                                                    'SB',
                                                    'SO',
                                                    'ZA',
                                                    'KR',
                                                    'GS',
                                                    'SS',
                                                    'LK',
                                                    'SD',
                                                    'SR',
                                                    'SY',
                                                    'SJ',
                                                    'TW',
                                                    'TJ',
                                                    'TZ',
                                                    'TH',
                                                    'TG',
                                                    'TK',
                                                    'TO',
                                                    'TT',
                                                    'TN',
                                                    'TR',
                                                    'TM',
                                                    'TC',
                                                    'TV',
                                                    'UG',
                                                    'UA',
                                                    'AE',
                                                    'UM',
                                                    'US',
                                                    'UY',
                                                    'UZ',
                                                    'VU',
                                                    'VE',
                                                    'VN',
                                                    'VI',
                                                    'WF',
                                                    'EH',
                                                    'YE',
                                                    'ZM',
                                                    'ZW',
                                                ],
                                                examples: ['US'],
                                            },
                                        },
                                    },
                                },
                                description: 'Account Identifier',
                            },
                            defaultReference: {
                                type: 'string',
                                description: 'Default reference used for payments to the Beneficiary.',
                            },
                            status: { type: 'string', description: 'Status of the Beneficiary. Can be:' },
                            created: {
                                type: 'string',
                                description: "Datetime the Beneficiary was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            accountId: {
                                type: 'string',
                                description: 'Id of the account if this beneficiary is a Modulr account, null otherwise',
                            },
                            externalReference: {
                                type: 'string',
                                description: 'External system reference for the Beneficiary',
                            },
                            approvalRequired: {
                                type: 'boolean',
                                description: 'Indicates if the beneficiary creation is pending approval',
                            },
                            customerId: {
                                type: 'string',
                                description: 'Id of the customer than owns this beneficiary',
                                examples: ['C0000001'],
                            },
                            updated: {
                                type: 'string',
                                description: "Datetime the Beneficiary was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            address: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: { type: 'string' },
                                    addressLine2: { type: 'string' },
                                    postTown: { type: 'string' },
                                    postCode: { type: 'string' },
                                    country: { type: 'string' },
                                    countrySubDivision: { type: 'string' },
                                },
                                description: 'Address',
                            },
                            qualifier: { type: 'string', description: 'Qualifier for this beneficiary' },
                            approvalRequestId: {
                                type: 'string',
                                description: 'Approval request ID for pending records.',
                            },
                            approvalStatus: {
                                type: 'string',
                                description: 'Approval status of item.\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`',
                                enum: ['NOTNEEDED', 'PENDING', 'APPROVED', 'REJECTED', 'DELETED'],
                            },
                            accessGroups: {
                                uniqueItems: true,
                                type: 'array',
                                description: 'Access groups associated with beneficiary.',
                                items: {
                                    type: 'string',
                                    description: 'Access groups associated with beneficiary.',
                                },
                            },
                        },
                        description: 'Beneficiary',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetBeneficiaries = GetBeneficiaries;
const GetCard = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card to view',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '200': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Card identifier. Maximum of 10 alphanumeric characters',
                    examples: ['V000000001'],
                },
                holder: {
                    required: ['billingAddress', 'dateOfBirth', 'firstName', 'lastName', 'mobileNumber'],
                    type: 'object',
                    properties: {
                        title: {
                            pattern: '^[0-9a-zA-Z]{1,4}$',
                            type: 'string',
                            description: 'Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.',
                            examples: ['Mr'],
                        },
                        firstName: {
                            pattern: '[\\x20-\\x7e]{1,20}',
                            type: 'string',
                            description: 'Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                            examples: ['Joe'],
                        },
                        lastName: {
                            pattern: '[\\x20-\\x7e]{1,20}',
                            type: 'string',
                            description: 'Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                            examples: ['Bloggs'],
                        },
                        billingAddress: {
                            required: ['addressLine1', 'country', 'postCode', 'postTown'],
                            type: 'object',
                            properties: {
                                addressLine1: {
                                    maxLength: 50,
                                    minLength: 1,
                                    type: 'string',
                                    description: 'First line of address',
                                    examples: ['Floor 10'],
                                },
                                addressLine2: {
                                    maxLength: 50,
                                    minLength: 0,
                                    type: 'string',
                                    description: 'Second line of address',
                                    examples: ['80 George Street'],
                                },
                                postTown: {
                                    maxLength: 20,
                                    minLength: 1,
                                    type: 'string',
                                    description: 'Post town',
                                    examples: ['EDINBURGH'],
                                },
                                postCode: {
                                    maxLength: 10,
                                    minLength: 1,
                                    type: 'string',
                                    description: 'Postcode',
                                    examples: ['EH2 3BU'],
                                },
                                country: {
                                    type: 'string',
                                    description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                                    enum: [
                                        'AT',
                                        'BE',
                                        'BG',
                                        'CY',
                                        'CZ',
                                        'DK',
                                        'EE',
                                        'FI',
                                        'FR',
                                        'DE',
                                        'GR',
                                        'HR',
                                        'HU',
                                        'IS',
                                        'IE',
                                        'IT',
                                        'LV',
                                        'LI',
                                        'LT',
                                        'LU',
                                        'MT',
                                        'NL',
                                        'NO',
                                        'PL',
                                        'PT',
                                        'RO',
                                        'SK',
                                        'SI',
                                        'ES',
                                        'SE',
                                        'AX',
                                        'AW',
                                        'BL',
                                        'CW',
                                        'GF',
                                        'GL',
                                        'GP',
                                        'ME',
                                        'MF',
                                        'MQ',
                                        'NC',
                                        'PF',
                                        'PM',
                                        'RE',
                                        'SX',
                                        'TF',
                                        'WF',
                                        'YT',
                                        'AI',
                                        'BM',
                                        'FK',
                                        'GB',
                                        'GG',
                                        'GI',
                                        'GS',
                                        'IO',
                                        'JE',
                                        'KY',
                                        'MS',
                                        'PN',
                                        'SH',
                                        'TC',
                                        'VG',
                                    ],
                                    examples: ['GB'],
                                },
                            },
                            description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                        },
                        dateOfBirth: {
                            type: 'string',
                            description: 'Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.',
                            format: 'date',
                            examples: ['2001-01-01'],
                        },
                        mobileNumber: {
                            type: 'string',
                            description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.",
                            examples: ['+447123456000'],
                        },
                        email: {
                            maxLength: 50,
                            minLength: 0,
                            type: 'string',
                            description: 'Cardholder email',
                            examples: ['cardholder@example.com'],
                        },
                    },
                    description: 'CardHolder',
                },
                expiry: {
                    type: 'string',
                    description: 'An ISO 8601 date with year & month components only',
                    examples: ['2018-12'],
                },
                status: {
                    type: 'string',
                    description: 'The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`',
                    enum: ['CREATED', 'ACTIVE', 'BLOCKED', 'SUSPENDED', 'CANCELLED', 'EXPIRED'],
                },
                currency: {
                    type: 'string',
                    description: 'A 3 letter ISO 4217 code representing the card currency',
                    examples: ['GBP'],
                },
                limit: {
                    type: 'string',
                    description: 'Total card authorisation limit',
                    examples: ['1000.0'],
                },
                maxLimit: {
                    type: 'string',
                    description: 'Maximum limit which can be set on this card and is the maximum lifetime spend the card can have',
                    examples: ['4000.0'],
                },
                spend: {
                    type: 'string',
                    description: 'Current total of all authorisations on this card',
                    examples: ['250.0'],
                },
                externalRef: {
                    type: 'string',
                    description: 'Client reference for the newly created card. Maximum of 50 characters.',
                    examples: ['TTQ_51211'],
                },
                maskedPan: {
                    type: 'string',
                    description: 'Masked card PAN',
                    examples: ['527095******3544'],
                },
                cardType: { type: 'string', description: 'Card product type', examples: ['Business'] },
                cardScheme: {
                    type: 'string',
                    description: 'Card scheme. MASTERCARD or VISA',
                    examples: ['MASTERCARD'],
                },
                accountBid: { type: 'string', description: 'Account identifier', examples: ['A020N8PD'] },
                format: {
                    type: 'string',
                    description: 'The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`',
                    enum: ['PHYSICAL', 'VIRTUAL'],
                    examples: ['PHYSICAL'],
                },
                constraints: {
                    required: ['mccWhitelist'],
                    type: 'object',
                    properties: {
                        mccWhitelist: {
                            type: 'array',
                            description: 'mccWhitelist',
                            items: {
                                type: 'string',
                                description: 'mccWhitelist',
                                examples: ['["1000","1002-3000","5060"]'],
                            },
                            examples: ['1000', '1002-3000', '5060'],
                        },
                        authorisation: {
                            type: 'object',
                            properties: {
                                spend: {
                                    type: 'array',
                                    description: 'Spending constraints',
                                    items: {
                                        required: ['currency'],
                                        type: 'object',
                                        properties: {
                                            currency: {
                                                type: 'string',
                                                description: 'A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`',
                                                enum: [
                                                    'GBP',
                                                    'EUR',
                                                    'AED',
                                                    'AFN',
                                                    'ALL',
                                                    'AMD',
                                                    'ANG',
                                                    'AOA',
                                                    'ARS',
                                                    'AUD',
                                                    'AWG',
                                                    'AZN',
                                                    'BAM',
                                                    'BBD',
                                                    'BDT',
                                                    'BGN',
                                                    'BHD',
                                                    'BIF',
                                                    'BMD',
                                                    'BND',
                                                    'BOB',
                                                    'BOV',
                                                    'BRL',
                                                    'BSD',
                                                    'BTN',
                                                    'BWP',
                                                    'BYN',
                                                    'BZD',
                                                    'CAD',
                                                    'CDF',
                                                    'CHE',
                                                    'CHF',
                                                    'CHW',
                                                    'CLF',
                                                    'CLP',
                                                    'CNY',
                                                    'COP',
                                                    'COU',
                                                    'CRC',
                                                    'CUC',
                                                    'CUP',
                                                    'CVE',
                                                    'CZK',
                                                    'DJF',
                                                    'DKK',
                                                    'DOP',
                                                    'DZD',
                                                    'EGP',
                                                    'ERN',
                                                    'ETB',
                                                    'FJD',
                                                    'FKP',
                                                    'GEL',
                                                    'GHS',
                                                    'GIP',
                                                    'GMD',
                                                    'GNF',
                                                    'GTQ',
                                                    'GYD',
                                                    'HKD',
                                                    'HNL',
                                                    'HRK',
                                                    'HTG',
                                                    'HUF',
                                                    'IDR',
                                                    'ILS',
                                                    'INR',
                                                    'IQD',
                                                    'IRR',
                                                    'ISK',
                                                    'JMD',
                                                    'JOD',
                                                    'JPY',
                                                    'KES',
                                                    'KGS',
                                                    'KHR',
                                                    'KMF',
                                                    'KPW',
                                                    'KRW',
                                                    'KWD',
                                                    'KYD',
                                                    'KZT',
                                                    'LAK',
                                                    'LBP',
                                                    'LKR',
                                                    'LRD',
                                                    'LSL',
                                                    'LYD',
                                                    'MAD',
                                                    'MDL',
                                                    'MGA',
                                                    'MKD',
                                                    'MMK',
                                                    'MNT',
                                                    'MOP',
                                                    'MRU',
                                                    'MUR',
                                                    'MVR',
                                                    'MWK',
                                                    'MXN',
                                                    'MXV',
                                                    'MYR',
                                                    'MZN',
                                                    'NAD',
                                                    'NGN',
                                                    'NIO',
                                                    'NOK',
                                                    'NPR',
                                                    'NZD',
                                                    'OMR',
                                                    'PAB',
                                                    'PEN',
                                                    'PGK',
                                                    'PHP',
                                                    'PKR',
                                                    'PLN',
                                                    'PYG',
                                                    'QAR',
                                                    'RON',
                                                    'RSD',
                                                    'RUB',
                                                    'RWF',
                                                    'SAR',
                                                    'SBD',
                                                    'SCR',
                                                    'SDG',
                                                    'SEK',
                                                    'SGD',
                                                    'SLE',
                                                    'SLL',
                                                    'SOS',
                                                    'SRD',
                                                    'SSP',
                                                    'STN',
                                                    'SVC',
                                                    'SYP',
                                                    'SZL',
                                                    'SHP',
                                                    'THB',
                                                    'TJS',
                                                    'TMT',
                                                    'TND',
                                                    'TOP',
                                                    'TRY',
                                                    'TTD',
                                                    'TWD',
                                                    'TZS',
                                                    'UAH',
                                                    'UGX',
                                                    'USD',
                                                    'USN',
                                                    'UYI',
                                                    'UYU',
                                                    'UYW',
                                                    'UZS',
                                                    'VES',
                                                    'VND',
                                                    'VUV',
                                                    'WST',
                                                    'XAF',
                                                    'XAG',
                                                    'XAU',
                                                    'XBA',
                                                    'XBB',
                                                    'XBC',
                                                    'XBD',
                                                    'XCD',
                                                    'XDR',
                                                    'XOF',
                                                    'XPD',
                                                    'XPF',
                                                    'XPT',
                                                    'XSU',
                                                    'XTS',
                                                    'XUA',
                                                    'XXX',
                                                    'YER',
                                                    'ZAR',
                                                    'ZMW',
                                                    'ZWL',
                                                ],
                                                examples: ['GBP'],
                                            },
                                            min: {
                                                type: 'number',
                                                description: 'Minimum spend amount (inclusive)',
                                                examples: [5],
                                            },
                                            max: {
                                                type: 'number',
                                                description: 'Maximum spend amount (inclusive)',
                                                examples: [2000],
                                            },
                                        },
                                        description: 'Spending constraints',
                                    },
                                },
                            },
                            description: 'Authorisation constraints',
                        },
                    },
                    description: 'CardConstraints',
                },
                design: {
                    required: ['cardRef', 'packagingRef'],
                    type: 'object',
                    properties: {
                        cardRef: { type: 'string', description: 'Design reference for card' },
                        packagingRef: { type: 'string', description: 'Design reference for card packaging' },
                    },
                    description: 'Design references for physical card and packaging',
                },
                printedName: {
                    type: 'string',
                    description: 'Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)',
                },
                createdDate: { type: 'string', format: 'date-time' },
                threeDSecureStatus: {
                    type: 'string',
                    description: 'The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                    deprecated: true,
                    enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                    examples: ['ENROLLED'],
                },
                authentication: {
                    type: 'object',
                    properties: {
                        otpSmsStatus: {
                            type: 'string',
                            description: 'The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                            enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                            examples: ['ENROLLED'],
                        },
                        knowledgeBaseStatus: {
                            type: 'string',
                            description: 'The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                            enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                            examples: ['ENROLLED'],
                        },
                    },
                    description: 'The 3DS authentication method statuses',
                },
                shippingAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: {
                            maxLength: 50,
                            minLength: 1,
                            type: 'string',
                            description: 'First line of address',
                            examples: ['Floor 10'],
                        },
                        addressLine2: {
                            maxLength: 50,
                            minLength: 0,
                            type: 'string',
                            description: 'Second line of address',
                            examples: ['80 George Street'],
                        },
                        postTown: {
                            maxLength: 20,
                            minLength: 1,
                            type: 'string',
                            description: 'Post town',
                            examples: ['EDINBURGH'],
                        },
                        postCode: {
                            maxLength: 10,
                            minLength: 1,
                            type: 'string',
                            description: 'Postcode',
                            examples: ['EH2 3BU'],
                        },
                        country: {
                            type: 'string',
                            description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                            enum: [
                                'AT',
                                'BE',
                                'BG',
                                'CY',
                                'CZ',
                                'DK',
                                'EE',
                                'FI',
                                'FR',
                                'DE',
                                'GR',
                                'HR',
                                'HU',
                                'IS',
                                'IE',
                                'IT',
                                'LV',
                                'LI',
                                'LT',
                                'LU',
                                'MT',
                                'NL',
                                'NO',
                                'PL',
                                'PT',
                                'RO',
                                'SK',
                                'SI',
                                'ES',
                                'SE',
                                'AX',
                                'AW',
                                'BL',
                                'CW',
                                'GF',
                                'GL',
                                'GP',
                                'ME',
                                'MF',
                                'MQ',
                                'NC',
                                'PF',
                                'PM',
                                'RE',
                                'SX',
                                'TF',
                                'WF',
                                'YT',
                                'AI',
                                'BM',
                                'FK',
                                'GB',
                                'GG',
                                'GI',
                                'GS',
                                'IO',
                                'JE',
                                'KY',
                                'MS',
                                'PN',
                                'SH',
                                'TC',
                                'VG',
                            ],
                            examples: ['GB'],
                        },
                    },
                    description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCard = GetCard;
const GetCardActivities = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    fromCreatedDate: {
                        type: 'string',
                        examples: ['2019-01-01T15:14:38-0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Activities with a created date equal to or after this date. Format: 'yyyy-MM-dd'T'HH:mm:ssZ'. Value cannot be more than 7 days in the past when mandatory. Value is optional if only a single Card ID has been provided",
                    },
                    toCreatedDate: {
                        type: 'string',
                        examples: ['2019-01-01T15:14:38-0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Activities with a created date before this date. Format: 'yyyy-MM-dd'T'HH:mm:ssZ'. Value is optional if only a single Card ID has been provided",
                    },
                    statuses: {
                        type: 'string',
                        enum: ['DECLINED', 'APPROVED', 'SETTLED', 'EXPIRED', 'APPLIED'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Activities with possibly multiple statuses equal to this value. Omitting this is equivalent to supplying all values',
                    },
                    types: {
                        type: 'string',
                        enum: ['AUTHORISATION', 'REVERSAL', 'SETTLEMENT', 'REFUND', 'ORIGINAL_CREDIT'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Activities with possibly multiple types equal to this value. Omitting this is equivalent to supplying all values',
                    },
                    cards: {
                        type: 'array',
                        items: { type: 'string' },
                        default: [],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Activities with possibly multiple card IDs equal to this value. Only one of 'cards' or 'accounts' must be supplied",
                    },
                    accounts: {
                        type: 'array',
                        items: { type: 'string' },
                        default: [],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Activities with possibly multiple account IDs equal to this value. Only one of 'cards' or 'accounts' must be supplied",
                    },
                    ids: {
                        uniqueItems: true,
                        type: 'array',
                        items: { type: 'string' },
                        default: [],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Activities with the specified IDs. Only 'page' and/or 'size' may be used in conjunction with this filter.",
                    },
                    orderId: {
                        type: 'integer',
                        format: 'int64',
                        minimum: -9223372036854776000,
                        maximum: 9223372036854776000,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Activites with specified Order Id',
                    },
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (0 indexed)',
                    },
                    size: {
                        maximum: 500,
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Max page size is 500',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: [
                            'billingAmount',
                            'billingCurrency',
                            'cardId',
                            'createdDate',
                            'fxRate',
                            'id',
                            'mcc',
                            'orderId',
                            'transactionAmount',
                            'transactionCurrency',
                            'type',
                        ],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'The card activity identifier. Maximum of 10 alphanumeric characters',
                                examples: ['X000000001'],
                            },
                            orderId: {
                                type: 'string',
                                description: 'Order identifier which links together related authorisations, reversals & settlements. Maximum of 10 alphanumeric characters',
                                examples: ['1234'],
                            },
                            cardId: {
                                type: 'string',
                                description: 'Card identifier. Maximum of 10 alphanumeric characters',
                                examples: ['V000000001'],
                            },
                            type: {
                                type: 'string',
                                description: 'Type of card activity\n\n`AUTHORISATION` `REVERSAL` `SETTLEMENT` `REFUND`',
                                enum: ['AUTHORISATION', 'REVERSAL', 'SETTLEMENT', 'REFUND'],
                            },
                            status: {
                                type: 'string',
                                description: 'Status of card activity. Only applies to activities of type AUTHORISATION\n\n`DECLINED` `APPROVED` `SETTLED` `EXPIRED`',
                                enum: ['DECLINED', 'APPROVED', 'SETTLED', 'EXPIRED'],
                            },
                            reason: {
                                type: 'string',
                                description: 'The reason why this activity was declined. Only applies to activities with status DECLINED',
                                examples: ['Account has insufficient funds'],
                            },
                            verifiedBy3DS: {
                                type: 'boolean',
                                description: 'Whether the activity was 3DS enabled',
                            },
                            createdDate: {
                                type: 'string',
                                description: 'The creation date of the card activity',
                                format: 'date-time',
                            },
                            transactionAmount: {
                                type: 'number',
                                description: 'The card activity transaction amount',
                                examples: [123.45],
                            },
                            transactionCurrency: {
                                type: 'string',
                                description: 'The 3 letter ISO 4217 card activity transaction currency',
                                examples: ['EUR'],
                            },
                            billingAmount: {
                                type: 'number',
                                description: 'The card activity billing amount',
                                examples: [678.91],
                            },
                            billingCurrency: {
                                type: 'string',
                                description: 'The 3 letter ISO 4217 card activity billing currency',
                                examples: ['GBP'],
                            },
                            fxRate: {
                                type: 'number',
                                description: 'The FX rate applied to any conversion between transaction & billing amount. Rounded to 6 decimal places and zero padded',
                                examples: [1.123456],
                            },
                            mcc: {
                                type: 'string',
                                description: 'The Merchant Category Code (MCC) for the card activity. Follows ISO-18245 format',
                                examples: ['5182'],
                            },
                            merchantName: {
                                type: 'string',
                                description: 'The merchant name',
                                examples: ['Loudons Cafe'],
                            },
                            merchantCountry: {
                                type: 'string',
                                description: 'The 3 letter ISO 3166 merchant country code',
                                examples: ['GBR'],
                            },
                            authorisationInfo: {
                                required: ['inputMethod', 'type'],
                                type: 'object',
                                properties: {
                                    type: { type: 'string', description: 'Transaction type' },
                                    inputMethod: { type: 'string', description: 'Input method' },
                                },
                                description: 'Authorisation information of the activity',
                            },
                            cardTokenId: {
                                type: 'string',
                                description: 'The card token associated with this activity, if a tokenised card was used.',
                            },
                            cardTokenDeviceId: {
                                type: 'string',
                                description: 'The bound card token device associated with this activity, if a tokenised card was used.',
                            },
                        },
                        description: 'List of responses on the current page',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCardActivities = GetCardActivities;
const GetCards = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    fromCreatedDate: {
                        type: 'string',
                        examples: ['2019-03-01T01:01:01+0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Cards created on or after this date. Cannot be older than 7 days. Format is `yyyy-MM-dd'T'HH:mm:ss` with zero offset from UTC.",
                    },
                    toCreatedDate: {
                        type: 'string',
                        examples: ['2019-03-01T01:01:01+0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: "Cards created on or before this date. Format is `yyyy-MM-dd'T'HH:mm:ss` with zero offset from UTC.",
                    },
                    statuses: {
                        type: 'string',
                        enum: ['CREATED', 'ACTIVE', 'BLOCKED', 'SUSPENDED', 'CANCELLED', 'EXPIRED'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Statuses of cards to be retrieved',
                    },
                    id: {
                        type: 'string',
                        examples: ['V000000001'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card to view.',
                    },
                    accountId: {
                        type: 'string',
                        examples: ['A0000001'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of account to retrieve cards for.',
                    },
                    externalRef: {
                        type: 'string',
                        examples: ['ExampleCardRef123'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The client reference of the card to retrieve.',
                    },
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (0 indexed)',
                    },
                    size: {
                        maximum: 500,
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Size of page to fetch',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Card identifier. Maximum of 10 alphanumeric characters',
                                examples: ['V000000001'],
                            },
                            holder: {
                                required: [
                                    'billingAddress',
                                    'dateOfBirth',
                                    'firstName',
                                    'lastName',
                                    'mobileNumber',
                                ],
                                type: 'object',
                                properties: {
                                    title: {
                                        pattern: '^[0-9a-zA-Z]{1,4}$',
                                        type: 'string',
                                        description: 'Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.',
                                        examples: ['Mr'],
                                    },
                                    firstName: {
                                        pattern: '[\\x20-\\x7e]{1,20}',
                                        type: 'string',
                                        description: 'Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                                        examples: ['Joe'],
                                    },
                                    lastName: {
                                        pattern: '[\\x20-\\x7e]{1,20}',
                                        type: 'string',
                                        description: 'Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                                        examples: ['Bloggs'],
                                    },
                                    billingAddress: {
                                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                        type: 'object',
                                        properties: {
                                            addressLine1: {
                                                maxLength: 50,
                                                minLength: 1,
                                                type: 'string',
                                                description: 'First line of address',
                                                examples: ['Floor 10'],
                                            },
                                            addressLine2: {
                                                maxLength: 50,
                                                minLength: 0,
                                                type: 'string',
                                                description: 'Second line of address',
                                                examples: ['80 George Street'],
                                            },
                                            postTown: {
                                                maxLength: 20,
                                                minLength: 1,
                                                type: 'string',
                                                description: 'Post town',
                                                examples: ['EDINBURGH'],
                                            },
                                            postCode: {
                                                maxLength: 10,
                                                minLength: 1,
                                                type: 'string',
                                                description: 'Postcode',
                                                examples: ['EH2 3BU'],
                                            },
                                            country: {
                                                type: 'string',
                                                description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                                                enum: [
                                                    'AT',
                                                    'BE',
                                                    'BG',
                                                    'CY',
                                                    'CZ',
                                                    'DK',
                                                    'EE',
                                                    'FI',
                                                    'FR',
                                                    'DE',
                                                    'GR',
                                                    'HR',
                                                    'HU',
                                                    'IS',
                                                    'IE',
                                                    'IT',
                                                    'LV',
                                                    'LI',
                                                    'LT',
                                                    'LU',
                                                    'MT',
                                                    'NL',
                                                    'NO',
                                                    'PL',
                                                    'PT',
                                                    'RO',
                                                    'SK',
                                                    'SI',
                                                    'ES',
                                                    'SE',
                                                    'AX',
                                                    'AW',
                                                    'BL',
                                                    'CW',
                                                    'GF',
                                                    'GL',
                                                    'GP',
                                                    'ME',
                                                    'MF',
                                                    'MQ',
                                                    'NC',
                                                    'PF',
                                                    'PM',
                                                    'RE',
                                                    'SX',
                                                    'TF',
                                                    'WF',
                                                    'YT',
                                                    'AI',
                                                    'BM',
                                                    'FK',
                                                    'GB',
                                                    'GG',
                                                    'GI',
                                                    'GS',
                                                    'IO',
                                                    'JE',
                                                    'KY',
                                                    'MS',
                                                    'PN',
                                                    'SH',
                                                    'TC',
                                                    'VG',
                                                ],
                                                examples: ['GB'],
                                            },
                                        },
                                        description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                                    },
                                    dateOfBirth: {
                                        type: 'string',
                                        description: 'Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.',
                                        format: 'date',
                                        examples: ['2001-01-01'],
                                    },
                                    mobileNumber: {
                                        type: 'string',
                                        description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.",
                                        examples: ['+447123456000'],
                                    },
                                    email: {
                                        maxLength: 50,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Cardholder email',
                                        examples: ['cardholder@example.com'],
                                    },
                                },
                                description: 'CardHolder',
                            },
                            expiry: {
                                type: 'string',
                                description: 'An ISO 8601 date with year & month components only',
                                examples: ['2018-12'],
                            },
                            status: {
                                type: 'string',
                                description: 'The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`',
                                enum: ['CREATED', 'ACTIVE', 'BLOCKED', 'SUSPENDED', 'CANCELLED', 'EXPIRED'],
                            },
                            currency: {
                                type: 'string',
                                description: 'A 3 letter ISO 4217 code representing the card currency',
                                examples: ['GBP'],
                            },
                            limit: {
                                type: 'string',
                                description: 'Total card authorisation limit',
                                examples: ['1000.0'],
                            },
                            maxLimit: {
                                type: 'string',
                                description: 'Maximum limit which can be set on this card and is the maximum lifetime spend the card can have',
                                examples: ['4000.0'],
                            },
                            spend: {
                                type: 'string',
                                description: 'Current total of all authorisations on this card',
                                examples: ['250.0'],
                            },
                            externalRef: {
                                type: 'string',
                                description: 'Client reference for the newly created card. Maximum of 50 characters.',
                                examples: ['TTQ_51211'],
                            },
                            maskedPan: {
                                type: 'string',
                                description: 'Masked card PAN',
                                examples: ['527095******3544'],
                            },
                            cardType: {
                                type: 'string',
                                description: 'Card product type',
                                examples: ['Business'],
                            },
                            cardScheme: {
                                type: 'string',
                                description: 'Card scheme. MASTERCARD or VISA',
                                examples: ['MASTERCARD'],
                            },
                            accountBid: {
                                type: 'string',
                                description: 'Account identifier',
                                examples: ['A020N8PD'],
                            },
                            format: {
                                type: 'string',
                                description: 'The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`',
                                enum: ['PHYSICAL', 'VIRTUAL'],
                                examples: ['PHYSICAL'],
                            },
                            constraints: {
                                required: ['mccWhitelist'],
                                type: 'object',
                                properties: {
                                    mccWhitelist: {
                                        type: 'array',
                                        description: 'mccWhitelist',
                                        items: {
                                            type: 'string',
                                            description: 'mccWhitelist',
                                            examples: ['["1000","1002-3000","5060"]'],
                                        },
                                        examples: ['1000', '1002-3000', '5060'],
                                    },
                                    authorisation: {
                                        type: 'object',
                                        properties: {
                                            spend: {
                                                type: 'array',
                                                description: 'Spending constraints',
                                                items: {
                                                    required: ['currency'],
                                                    type: 'object',
                                                    properties: {
                                                        currency: {
                                                            type: 'string',
                                                            description: 'A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`',
                                                            enum: [
                                                                'GBP',
                                                                'EUR',
                                                                'AED',
                                                                'AFN',
                                                                'ALL',
                                                                'AMD',
                                                                'ANG',
                                                                'AOA',
                                                                'ARS',
                                                                'AUD',
                                                                'AWG',
                                                                'AZN',
                                                                'BAM',
                                                                'BBD',
                                                                'BDT',
                                                                'BGN',
                                                                'BHD',
                                                                'BIF',
                                                                'BMD',
                                                                'BND',
                                                                'BOB',
                                                                'BOV',
                                                                'BRL',
                                                                'BSD',
                                                                'BTN',
                                                                'BWP',
                                                                'BYN',
                                                                'BZD',
                                                                'CAD',
                                                                'CDF',
                                                                'CHE',
                                                                'CHF',
                                                                'CHW',
                                                                'CLF',
                                                                'CLP',
                                                                'CNY',
                                                                'COP',
                                                                'COU',
                                                                'CRC',
                                                                'CUC',
                                                                'CUP',
                                                                'CVE',
                                                                'CZK',
                                                                'DJF',
                                                                'DKK',
                                                                'DOP',
                                                                'DZD',
                                                                'EGP',
                                                                'ERN',
                                                                'ETB',
                                                                'FJD',
                                                                'FKP',
                                                                'GEL',
                                                                'GHS',
                                                                'GIP',
                                                                'GMD',
                                                                'GNF',
                                                                'GTQ',
                                                                'GYD',
                                                                'HKD',
                                                                'HNL',
                                                                'HRK',
                                                                'HTG',
                                                                'HUF',
                                                                'IDR',
                                                                'ILS',
                                                                'INR',
                                                                'IQD',
                                                                'IRR',
                                                                'ISK',
                                                                'JMD',
                                                                'JOD',
                                                                'JPY',
                                                                'KES',
                                                                'KGS',
                                                                'KHR',
                                                                'KMF',
                                                                'KPW',
                                                                'KRW',
                                                                'KWD',
                                                                'KYD',
                                                                'KZT',
                                                                'LAK',
                                                                'LBP',
                                                                'LKR',
                                                                'LRD',
                                                                'LSL',
                                                                'LYD',
                                                                'MAD',
                                                                'MDL',
                                                                'MGA',
                                                                'MKD',
                                                                'MMK',
                                                                'MNT',
                                                                'MOP',
                                                                'MRU',
                                                                'MUR',
                                                                'MVR',
                                                                'MWK',
                                                                'MXN',
                                                                'MXV',
                                                                'MYR',
                                                                'MZN',
                                                                'NAD',
                                                                'NGN',
                                                                'NIO',
                                                                'NOK',
                                                                'NPR',
                                                                'NZD',
                                                                'OMR',
                                                                'PAB',
                                                                'PEN',
                                                                'PGK',
                                                                'PHP',
                                                                'PKR',
                                                                'PLN',
                                                                'PYG',
                                                                'QAR',
                                                                'RON',
                                                                'RSD',
                                                                'RUB',
                                                                'RWF',
                                                                'SAR',
                                                                'SBD',
                                                                'SCR',
                                                                'SDG',
                                                                'SEK',
                                                                'SGD',
                                                                'SLE',
                                                                'SLL',
                                                                'SOS',
                                                                'SRD',
                                                                'SSP',
                                                                'STN',
                                                                'SVC',
                                                                'SYP',
                                                                'SZL',
                                                                'SHP',
                                                                'THB',
                                                                'TJS',
                                                                'TMT',
                                                                'TND',
                                                                'TOP',
                                                                'TRY',
                                                                'TTD',
                                                                'TWD',
                                                                'TZS',
                                                                'UAH',
                                                                'UGX',
                                                                'USD',
                                                                'USN',
                                                                'UYI',
                                                                'UYU',
                                                                'UYW',
                                                                'UZS',
                                                                'VES',
                                                                'VND',
                                                                'VUV',
                                                                'WST',
                                                                'XAF',
                                                                'XAG',
                                                                'XAU',
                                                                'XBA',
                                                                'XBB',
                                                                'XBC',
                                                                'XBD',
                                                                'XCD',
                                                                'XDR',
                                                                'XOF',
                                                                'XPD',
                                                                'XPF',
                                                                'XPT',
                                                                'XSU',
                                                                'XTS',
                                                                'XUA',
                                                                'XXX',
                                                                'YER',
                                                                'ZAR',
                                                                'ZMW',
                                                                'ZWL',
                                                            ],
                                                            examples: ['GBP'],
                                                        },
                                                        min: {
                                                            type: 'number',
                                                            description: 'Minimum spend amount (inclusive)',
                                                            examples: [5],
                                                        },
                                                        max: {
                                                            type: 'number',
                                                            description: 'Maximum spend amount (inclusive)',
                                                            examples: [2000],
                                                        },
                                                    },
                                                    description: 'Spending constraints',
                                                },
                                            },
                                        },
                                        description: 'Authorisation constraints',
                                    },
                                },
                                description: 'CardConstraints',
                            },
                            design: {
                                required: ['cardRef', 'packagingRef'],
                                type: 'object',
                                properties: {
                                    cardRef: { type: 'string', description: 'Design reference for card' },
                                    packagingRef: {
                                        type: 'string',
                                        description: 'Design reference for card packaging',
                                    },
                                },
                                description: 'Design references for physical card and packaging',
                            },
                            printedName: {
                                type: 'string',
                                description: 'Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)',
                            },
                            createdDate: { type: 'string', format: 'date-time' },
                            threeDSecureStatus: {
                                type: 'string',
                                description: 'The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                                deprecated: true,
                                enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                                examples: ['ENROLLED'],
                            },
                            authentication: {
                                type: 'object',
                                properties: {
                                    otpSmsStatus: {
                                        type: 'string',
                                        description: 'The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                                        enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                                        examples: ['ENROLLED'],
                                    },
                                    knowledgeBaseStatus: {
                                        type: 'string',
                                        description: 'The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                                        enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                                        examples: ['ENROLLED'],
                                    },
                                },
                                description: 'The 3DS authentication method statuses',
                            },
                            shippingAddress: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: {
                                        maxLength: 50,
                                        minLength: 1,
                                        type: 'string',
                                        description: 'First line of address',
                                        examples: ['Floor 10'],
                                    },
                                    addressLine2: {
                                        maxLength: 50,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Second line of address',
                                        examples: ['80 George Street'],
                                    },
                                    postTown: {
                                        maxLength: 20,
                                        minLength: 1,
                                        type: 'string',
                                        description: 'Post town',
                                        examples: ['EDINBURGH'],
                                    },
                                    postCode: {
                                        maxLength: 10,
                                        minLength: 1,
                                        type: 'string',
                                        description: 'Postcode',
                                        examples: ['EH2 3BU'],
                                    },
                                    country: {
                                        type: 'string',
                                        description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                                        enum: [
                                            'AT',
                                            'BE',
                                            'BG',
                                            'CY',
                                            'CZ',
                                            'DK',
                                            'EE',
                                            'FI',
                                            'FR',
                                            'DE',
                                            'GR',
                                            'HR',
                                            'HU',
                                            'IS',
                                            'IE',
                                            'IT',
                                            'LV',
                                            'LI',
                                            'LT',
                                            'LU',
                                            'MT',
                                            'NL',
                                            'NO',
                                            'PL',
                                            'PT',
                                            'RO',
                                            'SK',
                                            'SI',
                                            'ES',
                                            'SE',
                                            'AX',
                                            'AW',
                                            'BL',
                                            'CW',
                                            'GF',
                                            'GL',
                                            'GP',
                                            'ME',
                                            'MF',
                                            'MQ',
                                            'NC',
                                            'PF',
                                            'PM',
                                            'RE',
                                            'SX',
                                            'TF',
                                            'WF',
                                            'YT',
                                            'AI',
                                            'BM',
                                            'FK',
                                            'GB',
                                            'GG',
                                            'GI',
                                            'GS',
                                            'IO',
                                            'JE',
                                            'KY',
                                            'MS',
                                            'PN',
                                            'SH',
                                            'TC',
                                            'VG',
                                        ],
                                        examples: ['GB'],
                                    },
                                },
                                description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                            },
                        },
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCards = GetCards;
const GetCardsByAccount = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    aid: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account ID',
                    },
                },
                required: ['aid'],
            },
            {
                type: 'object',
                properties: {
                    statuses: {
                        type: 'string',
                        enum: ['CREATED', 'ACTIVE', 'BLOCKED', 'SUSPENDED', 'CANCELLED', 'EXPIRED'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Statuses of cards to be retrieved',
                    },
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Card identifier. Maximum of 10 alphanumeric characters',
                                examples: ['V000000001'],
                            },
                            holder: {
                                required: [
                                    'billingAddress',
                                    'dateOfBirth',
                                    'firstName',
                                    'lastName',
                                    'mobileNumber',
                                ],
                                type: 'object',
                                properties: {
                                    title: {
                                        pattern: '^[0-9a-zA-Z]{1,4}$',
                                        type: 'string',
                                        description: 'Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.',
                                        examples: ['Mr'],
                                    },
                                    firstName: {
                                        pattern: '[\\x20-\\x7e]{1,20}',
                                        type: 'string',
                                        description: 'Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                                        examples: ['Joe'],
                                    },
                                    lastName: {
                                        pattern: '[\\x20-\\x7e]{1,20}',
                                        type: 'string',
                                        description: 'Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.',
                                        examples: ['Bloggs'],
                                    },
                                    billingAddress: {
                                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                        type: 'object',
                                        properties: {
                                            addressLine1: {
                                                maxLength: 50,
                                                minLength: 1,
                                                type: 'string',
                                                description: 'First line of address',
                                                examples: ['Floor 10'],
                                            },
                                            addressLine2: {
                                                maxLength: 50,
                                                minLength: 0,
                                                type: 'string',
                                                description: 'Second line of address',
                                                examples: ['80 George Street'],
                                            },
                                            postTown: {
                                                maxLength: 20,
                                                minLength: 1,
                                                type: 'string',
                                                description: 'Post town',
                                                examples: ['EDINBURGH'],
                                            },
                                            postCode: {
                                                maxLength: 10,
                                                minLength: 1,
                                                type: 'string',
                                                description: 'Postcode',
                                                examples: ['EH2 3BU'],
                                            },
                                            country: {
                                                type: 'string',
                                                description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                                                enum: [
                                                    'AT',
                                                    'BE',
                                                    'BG',
                                                    'CY',
                                                    'CZ',
                                                    'DK',
                                                    'EE',
                                                    'FI',
                                                    'FR',
                                                    'DE',
                                                    'GR',
                                                    'HR',
                                                    'HU',
                                                    'IS',
                                                    'IE',
                                                    'IT',
                                                    'LV',
                                                    'LI',
                                                    'LT',
                                                    'LU',
                                                    'MT',
                                                    'NL',
                                                    'NO',
                                                    'PL',
                                                    'PT',
                                                    'RO',
                                                    'SK',
                                                    'SI',
                                                    'ES',
                                                    'SE',
                                                    'AX',
                                                    'AW',
                                                    'BL',
                                                    'CW',
                                                    'GF',
                                                    'GL',
                                                    'GP',
                                                    'ME',
                                                    'MF',
                                                    'MQ',
                                                    'NC',
                                                    'PF',
                                                    'PM',
                                                    'RE',
                                                    'SX',
                                                    'TF',
                                                    'WF',
                                                    'YT',
                                                    'AI',
                                                    'BM',
                                                    'FK',
                                                    'GB',
                                                    'GG',
                                                    'GI',
                                                    'GS',
                                                    'IO',
                                                    'JE',
                                                    'KY',
                                                    'MS',
                                                    'PN',
                                                    'SH',
                                                    'TC',
                                                    'VG',
                                                ],
                                                examples: ['GB'],
                                            },
                                        },
                                        description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                                    },
                                    dateOfBirth: {
                                        type: 'string',
                                        description: 'Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.',
                                        format: 'date',
                                        examples: ['2001-01-01'],
                                    },
                                    mobileNumber: {
                                        type: 'string',
                                        description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.",
                                        examples: ['+447123456000'],
                                    },
                                    email: {
                                        maxLength: 50,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Cardholder email',
                                        examples: ['cardholder@example.com'],
                                    },
                                },
                                description: 'CardHolder',
                            },
                            expiry: {
                                type: 'string',
                                description: 'An ISO 8601 date with year & month components only',
                                examples: ['2018-12'],
                            },
                            status: {
                                type: 'string',
                                description: 'The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`',
                                enum: ['CREATED', 'ACTIVE', 'BLOCKED', 'SUSPENDED', 'CANCELLED', 'EXPIRED'],
                            },
                            currency: {
                                type: 'string',
                                description: 'A 3 letter ISO 4217 code representing the card currency',
                                examples: ['GBP'],
                            },
                            limit: {
                                type: 'string',
                                description: 'Total card authorisation limit',
                                examples: ['1000.0'],
                            },
                            maxLimit: {
                                type: 'string',
                                description: 'Maximum limit which can be set on this card and is the maximum lifetime spend the card can have',
                                examples: ['4000.0'],
                            },
                            spend: {
                                type: 'string',
                                description: 'Current total of all authorisations on this card',
                                examples: ['250.0'],
                            },
                            externalRef: {
                                type: 'string',
                                description: 'Client reference for the newly created card. Maximum of 50 characters.',
                                examples: ['TTQ_51211'],
                            },
                            maskedPan: {
                                type: 'string',
                                description: 'Masked card PAN',
                                examples: ['527095******3544'],
                            },
                            cardType: {
                                type: 'string',
                                description: 'Card product type',
                                examples: ['Business'],
                            },
                            cardScheme: {
                                type: 'string',
                                description: 'Card scheme. MASTERCARD or VISA',
                                examples: ['MASTERCARD'],
                            },
                            accountBid: {
                                type: 'string',
                                description: 'Account identifier',
                                examples: ['A020N8PD'],
                            },
                            format: {
                                type: 'string',
                                description: 'The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`',
                                enum: ['PHYSICAL', 'VIRTUAL'],
                                examples: ['PHYSICAL'],
                            },
                            constraints: {
                                required: ['mccWhitelist'],
                                type: 'object',
                                properties: {
                                    mccWhitelist: {
                                        type: 'array',
                                        description: 'mccWhitelist',
                                        items: {
                                            type: 'string',
                                            description: 'mccWhitelist',
                                            examples: ['["1000","1002-3000","5060"]'],
                                        },
                                        examples: ['1000', '1002-3000', '5060'],
                                    },
                                    authorisation: {
                                        type: 'object',
                                        properties: {
                                            spend: {
                                                type: 'array',
                                                description: 'Spending constraints',
                                                items: {
                                                    required: ['currency'],
                                                    type: 'object',
                                                    properties: {
                                                        currency: {
                                                            type: 'string',
                                                            description: 'A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`',
                                                            enum: [
                                                                'GBP',
                                                                'EUR',
                                                                'AED',
                                                                'AFN',
                                                                'ALL',
                                                                'AMD',
                                                                'ANG',
                                                                'AOA',
                                                                'ARS',
                                                                'AUD',
                                                                'AWG',
                                                                'AZN',
                                                                'BAM',
                                                                'BBD',
                                                                'BDT',
                                                                'BGN',
                                                                'BHD',
                                                                'BIF',
                                                                'BMD',
                                                                'BND',
                                                                'BOB',
                                                                'BOV',
                                                                'BRL',
                                                                'BSD',
                                                                'BTN',
                                                                'BWP',
                                                                'BYN',
                                                                'BZD',
                                                                'CAD',
                                                                'CDF',
                                                                'CHE',
                                                                'CHF',
                                                                'CHW',
                                                                'CLF',
                                                                'CLP',
                                                                'CNY',
                                                                'COP',
                                                                'COU',
                                                                'CRC',
                                                                'CUC',
                                                                'CUP',
                                                                'CVE',
                                                                'CZK',
                                                                'DJF',
                                                                'DKK',
                                                                'DOP',
                                                                'DZD',
                                                                'EGP',
                                                                'ERN',
                                                                'ETB',
                                                                'FJD',
                                                                'FKP',
                                                                'GEL',
                                                                'GHS',
                                                                'GIP',
                                                                'GMD',
                                                                'GNF',
                                                                'GTQ',
                                                                'GYD',
                                                                'HKD',
                                                                'HNL',
                                                                'HRK',
                                                                'HTG',
                                                                'HUF',
                                                                'IDR',
                                                                'ILS',
                                                                'INR',
                                                                'IQD',
                                                                'IRR',
                                                                'ISK',
                                                                'JMD',
                                                                'JOD',
                                                                'JPY',
                                                                'KES',
                                                                'KGS',
                                                                'KHR',
                                                                'KMF',
                                                                'KPW',
                                                                'KRW',
                                                                'KWD',
                                                                'KYD',
                                                                'KZT',
                                                                'LAK',
                                                                'LBP',
                                                                'LKR',
                                                                'LRD',
                                                                'LSL',
                                                                'LYD',
                                                                'MAD',
                                                                'MDL',
                                                                'MGA',
                                                                'MKD',
                                                                'MMK',
                                                                'MNT',
                                                                'MOP',
                                                                'MRU',
                                                                'MUR',
                                                                'MVR',
                                                                'MWK',
                                                                'MXN',
                                                                'MXV',
                                                                'MYR',
                                                                'MZN',
                                                                'NAD',
                                                                'NGN',
                                                                'NIO',
                                                                'NOK',
                                                                'NPR',
                                                                'NZD',
                                                                'OMR',
                                                                'PAB',
                                                                'PEN',
                                                                'PGK',
                                                                'PHP',
                                                                'PKR',
                                                                'PLN',
                                                                'PYG',
                                                                'QAR',
                                                                'RON',
                                                                'RSD',
                                                                'RUB',
                                                                'RWF',
                                                                'SAR',
                                                                'SBD',
                                                                'SCR',
                                                                'SDG',
                                                                'SEK',
                                                                'SGD',
                                                                'SLE',
                                                                'SLL',
                                                                'SOS',
                                                                'SRD',
                                                                'SSP',
                                                                'STN',
                                                                'SVC',
                                                                'SYP',
                                                                'SZL',
                                                                'SHP',
                                                                'THB',
                                                                'TJS',
                                                                'TMT',
                                                                'TND',
                                                                'TOP',
                                                                'TRY',
                                                                'TTD',
                                                                'TWD',
                                                                'TZS',
                                                                'UAH',
                                                                'UGX',
                                                                'USD',
                                                                'USN',
                                                                'UYI',
                                                                'UYU',
                                                                'UYW',
                                                                'UZS',
                                                                'VES',
                                                                'VND',
                                                                'VUV',
                                                                'WST',
                                                                'XAF',
                                                                'XAG',
                                                                'XAU',
                                                                'XBA',
                                                                'XBB',
                                                                'XBC',
                                                                'XBD',
                                                                'XCD',
                                                                'XDR',
                                                                'XOF',
                                                                'XPD',
                                                                'XPF',
                                                                'XPT',
                                                                'XSU',
                                                                'XTS',
                                                                'XUA',
                                                                'XXX',
                                                                'YER',
                                                                'ZAR',
                                                                'ZMW',
                                                                'ZWL',
                                                            ],
                                                            examples: ['GBP'],
                                                        },
                                                        min: {
                                                            type: 'number',
                                                            description: 'Minimum spend amount (inclusive)',
                                                            examples: [5],
                                                        },
                                                        max: {
                                                            type: 'number',
                                                            description: 'Maximum spend amount (inclusive)',
                                                            examples: [2000],
                                                        },
                                                    },
                                                    description: 'Spending constraints',
                                                },
                                            },
                                        },
                                        description: 'Authorisation constraints',
                                    },
                                },
                                description: 'CardConstraints',
                            },
                            design: {
                                required: ['cardRef', 'packagingRef'],
                                type: 'object',
                                properties: {
                                    cardRef: { type: 'string', description: 'Design reference for card' },
                                    packagingRef: {
                                        type: 'string',
                                        description: 'Design reference for card packaging',
                                    },
                                },
                                description: 'Design references for physical card and packaging',
                            },
                            printedName: {
                                type: 'string',
                                description: 'Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)',
                            },
                            createdDate: { type: 'string', format: 'date-time' },
                            threeDSecureStatus: {
                                type: 'string',
                                description: 'The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                                deprecated: true,
                                enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                                examples: ['ENROLLED'],
                            },
                            authentication: {
                                type: 'object',
                                properties: {
                                    otpSmsStatus: {
                                        type: 'string',
                                        description: 'The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                                        enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                                        examples: ['ENROLLED'],
                                    },
                                    knowledgeBaseStatus: {
                                        type: 'string',
                                        description: 'The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`',
                                        enum: ['NOT_ENROLLED', 'ENROLLED', 'UNENROLLED'],
                                        examples: ['ENROLLED'],
                                    },
                                },
                                description: 'The 3DS authentication method statuses',
                            },
                            shippingAddress: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: {
                                        maxLength: 50,
                                        minLength: 1,
                                        type: 'string',
                                        description: 'First line of address',
                                        examples: ['Floor 10'],
                                    },
                                    addressLine2: {
                                        maxLength: 50,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Second line of address',
                                        examples: ['80 George Street'],
                                    },
                                    postTown: {
                                        maxLength: 20,
                                        minLength: 1,
                                        type: 'string',
                                        description: 'Post town',
                                        examples: ['EDINBURGH'],
                                    },
                                    postCode: {
                                        maxLength: 10,
                                        minLength: 1,
                                        type: 'string',
                                        description: 'Postcode',
                                        examples: ['EH2 3BU'],
                                    },
                                    country: {
                                        type: 'string',
                                        description: 'Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`',
                                        enum: [
                                            'AT',
                                            'BE',
                                            'BG',
                                            'CY',
                                            'CZ',
                                            'DK',
                                            'EE',
                                            'FI',
                                            'FR',
                                            'DE',
                                            'GR',
                                            'HR',
                                            'HU',
                                            'IS',
                                            'IE',
                                            'IT',
                                            'LV',
                                            'LI',
                                            'LT',
                                            'LU',
                                            'MT',
                                            'NL',
                                            'NO',
                                            'PL',
                                            'PT',
                                            'RO',
                                            'SK',
                                            'SI',
                                            'ES',
                                            'SE',
                                            'AX',
                                            'AW',
                                            'BL',
                                            'CW',
                                            'GF',
                                            'GL',
                                            'GP',
                                            'ME',
                                            'MF',
                                            'MQ',
                                            'NC',
                                            'PF',
                                            'PM',
                                            'RE',
                                            'SX',
                                            'TF',
                                            'WF',
                                            'YT',
                                            'AI',
                                            'BM',
                                            'FK',
                                            'GB',
                                            'GG',
                                            'GI',
                                            'GS',
                                            'IO',
                                            'JE',
                                            'KY',
                                            'MS',
                                            'PN',
                                            'SH',
                                            'TC',
                                            'VG',
                                        ],
                                        examples: ['GB'],
                                    },
                                },
                                description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                            },
                        },
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCardsByAccount = GetCardsByAccount;
const GetCollectionSchedules = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    mandateId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Mandate Id to fetch collections for.',
                    },
                    sortField: {
                        pattern: 'id|createdDate|payment|status|externalReference',
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Sort by field',
                    },
                    sortOrder: {
                        pattern: 'asc|desc',
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Sort order',
                    },
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (zero-indexed)',
                    },
                    size: {
                        maximum: 500,
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Size of page to fetch.',
                    },
                },
                required: ['mandateId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['createdDate', 'frequency', 'id', 'numberOfPayments', 'status'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for direct-debit collection.',
                                examples: ['Q0000001'],
                            },
                            frequency: {
                                type: 'string',
                                description: 'Frequency for direct-debit collection',
                                examples: ['MONTHLY'],
                            },
                            numberOfPayments: {
                                type: 'integer',
                                description: 'Number of payments for direct-debit collection',
                                format: 'int32',
                                examples: [12],
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            firstPaymentAmount: {
                                type: 'number',
                                description: 'Amount of the first collection payment',
                                examples: [100],
                            },
                            firstPaymentDate: {
                                type: 'string',
                                description: 'Date of the first collection payment. Format is yyyy-MM-dd.',
                                examples: ['2018-01-10'],
                            },
                            regularPaymentAmount: {
                                type: 'number',
                                description: 'Amount of the regular collection payments',
                                examples: [100],
                            },
                            regularPaymentStartDate: {
                                type: 'string',
                                description: 'Start date of the regular collection payment. Format is yyyy-MM-dd.',
                                examples: ['2018-01-10'],
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime when direct-debit collection was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            status: {
                                type: 'string',
                                description: 'Status of the direct-debit collection. Can be one of ACTIVE, PENDING, SUBMITTED, REJECTED, CANCELLED\n\n`ACTIVE` `PENDING` `SUBMITTED` `REJECTED` `CANCELLED`',
                                enum: ['ACTIVE', 'PENDING', 'SUBMITTED', 'REJECTED', 'CANCELLED'],
                                examples: ['PROCESSING'],
                            },
                            externalReference: { type: 'string' },
                        },
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0-based, i.e first page = 0, second page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCollectionSchedules = GetCollectionSchedules;
const GetCollections = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    accountId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account Id to fetch collections items for.',
                    },
                    mandateId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of mandate whose the collection to fetch.',
                    },
                    type: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'type of collection to fetch',
                    },
                    startDate: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Collection activities happened on or after this date',
                    },
                    endDate: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Collection item activities happened on or before this date',
                    },
                },
                required: ['accountId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: [
                            'activityDate',
                            'amount',
                            'id',
                            'mandateId',
                            'message',
                            'originalActivityDate',
                            'payerName',
                            'reconciliationDate',
                            'reconciliationReference',
                            'status',
                            'type',
                        ],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for a direct-debit collection',
                                examples: ['K000100100'],
                            },
                            mandateId: {
                                type: 'string',
                                description: 'Unique id for direct-debit mandate.',
                                examples: ['G0000001'],
                            },
                            collectionScheduleId: {
                                type: 'string',
                                description: 'Unique id for direct-debit collection schedule for which triggered the collection',
                                examples: ['Q9200001'],
                            },
                            activityDate: {
                                type: 'string',
                                description: 'collection or reportRaised date for indemnity???',
                                examples: ['2018-01-09'],
                            },
                            amount: {
                                type: 'number',
                                description: 'Amount of the collection payment',
                                examples: [100],
                            },
                            type: {
                                type: 'string',
                                description: 'Type of the collection activity.  Can be one of COLLECTION, INDEMNITY\n\n`COLLECTION` `INDEMNITY`',
                                enum: ['COLLECTION', 'INDEMNITY'],
                                examples: ['COLLECTION'],
                            },
                            payerName: {
                                type: 'string',
                                description: 'Name of the payer',
                                examples: ['Mr John Doe'],
                            },
                            status: {
                                type: 'string',
                                description: 'Status of the collection.  Can be one of SUCCESS, FAILED, PROCESSING, SCHEDULED, REPRESENTABLE, REPRESENTED, CANCELLED\n\n`SUCCESS` `FAILED` `PROCESSING` `SCHEDULED` `REPRESENTABLE` `REPRESENTED` `CANCELLED`',
                                enum: [
                                    'SUCCESS',
                                    'FAILED',
                                    'PROCESSING',
                                    'SCHEDULED',
                                    'REPRESENTABLE',
                                    'REPRESENTED',
                                    'CANCELLED',
                                ],
                                examples: ['FAILED'],
                            },
                            message: {
                                type: 'string',
                                description: 'Failure description of the payment activity',
                                examples: ['Instruction Cancelled'],
                            },
                            originalActivityDate: {
                                type: 'string',
                                description: 'The original scheduled date for a payment to be collected',
                                examples: ['2018-01-09'],
                            },
                            reconciliationDate: {
                                type: 'string',
                                description: 'The reconciled date for a payment to be collected',
                                examples: ['2018-01-09'],
                            },
                            reconciliationReference: {
                                type: 'string',
                                description: 'The reconciled reference that links to a payment',
                                examples: ['2018-01-09'],
                            },
                        },
                        description: 'List of responses on the current page',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0-based, i.e first page = 0, second page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCollections = GetCollections;
const GetCreatePhysicalCardAsyncTasksByAccount = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    aid: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The account ID to retrieve create physical card tasks for',
                    },
                },
                required: ['aid'],
            },
            {
                type: 'object',
                properties: {
                    statuses: {
                        type: 'string',
                        enum: ['RECEIVED', 'RUNNING', 'COMPLETE', 'ERROR'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Statuses of tasks to be retrieved',
                    },
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (0 indexed)',
                    },
                    size: {
                        maximum: 500,
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Size of page to fetch',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['createdDate', 'status', 'taskBid', 'type'],
                        type: 'object',
                        properties: {
                            taskBid: {
                                type: 'string',
                                description: 'ID of async task',
                                examples: ['T110000003'],
                            },
                            resourceUrl: {
                                type: 'string',
                                description: 'Url of available resource after task completion',
                                examples: ['/cards/V110000022'],
                            },
                            resourceId: {
                                type: 'string',
                                description: 'ID of resource after task completion. Will only be returned for COMPLETE tasks.',
                                examples: ['V110000022'],
                            },
                            type: {
                                type: 'string',
                                description: 'Type of async task\n\n`PHYSICAL_CARD_CREATE`',
                                enum: ['PHYSICAL_CARD_CREATE'],
                            },
                            status: {
                                type: 'string',
                                description: 'Status of the task\n\n`RECEIVED` `RUNNING` `COMPLETE` `ERROR`',
                                enum: ['RECEIVED', 'RUNNING', 'COMPLETE', 'ERROR'],
                            },
                            createdDate: {
                                type: 'string',
                                description: 'The creation date of the task',
                                format: 'date-time',
                            },
                            errorReason: {
                                type: 'string',
                                description: 'The error reason. Only populated if status is ERROR',
                            },
                        },
                        description: 'List of responses on the current page',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCreatePhysicalCardAsyncTasksByAccount = GetCreatePhysicalCardAsyncTasksByAccount;
const GetCustomer = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of customer to fetch',
                    },
                },
                required: ['customerId'],
            },
            {
                type: 'object',
                properties: {
                    statuses: {
                        type: 'array',
                        items: { type: 'string', enum: ['ACTIVE', 'CLOSED'] },
                        default: ['ACTIVE'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Customer statuses allowed when fetching the customer',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['createdDate', 'id', 'name', 'status', 'type', 'verificationStatus'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: "Unique identifier for a Customer. Begins with 'C'",
                    examples: ['C00000001'],
                },
                name: {
                    type: 'string',
                    description: "Customer's company name - must be unique across the Modulr platform.",
                },
                brandNames: {
                    type: 'array',
                    description: 'The customers brand name(s)',
                    items: {
                        required: ['id', 'name'],
                        type: 'object',
                        properties: {
                            id: { type: 'string', description: 'Unique id for the Brand Name' },
                            name: { type: 'string', description: 'The Brand Name' },
                        },
                        description: 'BrandName',
                    },
                },
                type: {
                    type: 'string',
                    description: 'Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`',
                    enum: [
                        'LLC',
                        'PLC',
                        'SOLETRADER',
                        'OPARTNRSHP',
                        'LPARTNRSHP',
                        'LLP',
                        'CHARITY',
                        'INDIVIDUAL',
                        'PCM_INDIVIDUAL',
                        'PCM_BUSINESS',
                        'TRUST',
                        'PREQUALIFIED',
                    ],
                },
                status: {
                    type: 'string',
                    description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`",
                    enum: ['ACTIVE', 'CLOSED'],
                },
                verificationStatus: {
                    type: 'string',
                    description: 'How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                    enum: [
                        'UNVERIFIED',
                        'VERIFIED',
                        'EXVERIFIED',
                        'REFERRED',
                        'DECLINED',
                        'REVIEWED',
                        'MIGRATED',
                    ],
                },
                companyRegNumber: {
                    type: 'string',
                    description: 'The company registration / incorporation number of the company. Only applicable for companies registered with Companies House',
                },
                expectedMonthlySpend: {
                    type: 'integer',
                    description: 'Indication of the monthly spend of the customer.',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                registeredAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { type: 'string' },
                        addressLine2: { type: 'string' },
                        postTown: { type: 'string' },
                        postCode: { type: 'string' },
                        country: { type: 'string' },
                        countrySubDivision: { type: 'string' },
                    },
                    description: 'Address',
                },
                tradingAddress: {
                    required: ['addressLine1', 'country', 'postCode', 'postTown'],
                    type: 'object',
                    properties: {
                        addressLine1: { type: 'string' },
                        addressLine2: { type: 'string' },
                        postTown: { type: 'string' },
                        postCode: { type: 'string' },
                        country: { type: 'string' },
                        countrySubDivision: { type: 'string' },
                    },
                    description: 'Address',
                },
                partnerId: { type: 'string', description: 'The owning partner identifier' },
                associates: {
                    type: 'array',
                    description: 'Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.',
                    items: {
                        required: ['dateOfBirth', 'firstName', 'id', 'lastName', 'type', 'verificationStatus'],
                        type: 'object',
                        properties: {
                            id: { type: 'string', description: 'Unique id for the Associate' },
                            firstName: { type: 'string', description: "Associate's first name(s)" },
                            middleName: { type: 'string', description: "Associate's middle name" },
                            lastName: { type: 'string', description: "Associate's surname" },
                            email: { type: 'string', description: "Associate's email address" },
                            phone: {
                                type: 'string',
                                description: "Associate's phone number, in international number format",
                            },
                            applicant: {
                                type: 'boolean',
                                description: 'Indicates which Associate originally applied for the Modulr account',
                            },
                            ownership: {
                                type: 'integer',
                                description: "The Associate's percentage ownership of the Customer",
                                format: 'int32',
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            type: {
                                type: 'string',
                                description: 'Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`',
                                enum: [
                                    'DIRECTOR',
                                    'PARTNER',
                                    'CSECRETARY',
                                    'SOLETRADER',
                                    'BENE_OWNER',
                                    'C_INTEREST',
                                    'INDIVIDUAL',
                                    'PCM_INDIVIDUAL',
                                    'SIGNATORY',
                                    'TRUST_SETTLOR',
                                    'TRUST_BENEFICIARY',
                                    'TRUST_TRUSTEE',
                                    'PREQUALIFIED',
                                ],
                            },
                            dateOfBirth: {
                                type: 'string',
                                description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown",
                            },
                            verificationStatus: {
                                type: 'string',
                                description: 'How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                                enum: [
                                    'UNVERIFIED',
                                    'VERIFIED',
                                    'EXVERIFIED',
                                    'REFERRED',
                                    'DECLINED',
                                    'REVIEWED',
                                    'MIGRATED',
                                ],
                            },
                            homeAddress: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: { type: 'string' },
                                    addressLine2: { type: 'string' },
                                    postTown: { type: 'string' },
                                    postCode: { type: 'string' },
                                    country: { type: 'string' },
                                    countrySubDivision: { type: 'string' },
                                },
                                description: 'Address',
                            },
                            documentInfo: {
                                type: 'array',
                                description: 'Documents gathered during Customer Due Diligence checks on an Associate.',
                                items: {
                                    required: ['fileName', 'path', 'uploadedDate'],
                                    type: 'object',
                                    properties: {
                                        path: { type: 'string' },
                                        fileName: { type: 'string' },
                                        uploadedDate: {
                                            type: 'string',
                                            description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                            examples: ['2017-01-28T01:01:01+0000'],
                                        },
                                    },
                                    description: 'Document',
                                },
                            },
                            additionalPersonalIdentifiers: {
                                type: 'array',
                                description: 'Additional personal identifier(s)',
                                items: {
                                    required: ['type', 'value'],
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            description: 'The type of Additional Personal Identifier\n\n`BSN`',
                                            enum: ['BSN'],
                                        },
                                        value: { type: 'string', description: 'Additional Personal Identifier value' },
                                    },
                                    description: 'AdditionalPersonalIdentifier',
                                },
                            },
                            complianceData: {
                                type: 'object',
                                properties: { relationship: { type: 'string' } },
                                description: 'Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.',
                            },
                        },
                        description: 'Associate',
                    },
                },
                industryCode: { type: 'string' },
                tcsVersion: {
                    type: 'integer',
                    description: 'Version of the Modulr Account Terms and Conditions the Customer has agreed to.',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                documentInfo: {
                    type: 'array',
                    description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.",
                    items: {
                        required: ['fileName', 'path', 'uploadedDate'],
                        type: 'object',
                        properties: {
                            path: { type: 'string' },
                            fileName: { type: 'string' },
                            uploadedDate: {
                                type: 'string',
                                description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                examples: ['2017-01-28T01:01:01+0000'],
                            },
                        },
                        description: 'Document',
                    },
                },
                externalReference: { type: 'string' },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                delegate: {
                    required: ['created', 'id', 'name', 'roleId', 'status', 'updated'],
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            description: 'Unique reference for the Delegate.',
                            examples: ['D0000001'],
                        },
                        name: { type: 'string', description: 'Name for the Delegate' },
                        address: {
                            required: ['addressLine1', 'country', 'postCode', 'postTown'],
                            type: 'object',
                            properties: {
                                addressLine1: { type: 'string' },
                                addressLine2: { type: 'string' },
                                postTown: { type: 'string' },
                                postCode: { type: 'string' },
                                country: { type: 'string' },
                                countrySubDivision: { type: 'string' },
                            },
                            description: 'Address',
                        },
                        roleId: {
                            type: 'string',
                            description: 'The id of the Role assigned to the delegate',
                            examples: ['R02002M5'],
                        },
                        externalReference: {
                            type: 'string',
                            description: 'External system reference for the Delegate',
                        },
                        partner: { type: 'string', description: 'Partner Bid.', examples: ['R0000001'] },
                        status: { type: 'string', description: 'Status of the Delegate.' },
                        created: {
                            type: 'string',
                            description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                            format: 'date-time',
                        },
                        updated: {
                            type: 'string',
                            description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                            format: 'date-time',
                        },
                    },
                    description: 'Delegate',
                },
                legalEntity: {
                    type: 'string',
                    description: 'Legal entity of the customer\n\n`GB` `NL` `IE`',
                    enum: ['GB', 'NL', 'IE'],
                },
                customerTrust: {
                    type: 'object',
                    properties: {
                        trustNature: {
                            type: 'string',
                            enum: [
                                'BARE_TRUSTS',
                                'INTEREST_IN_POSSESSION_TRUSTS',
                                'DISCRETIONARY_TRUSTS',
                                'ACCUMULATION_TRUSTS',
                                'MIXED_TRUSTS',
                                'SETTLOR_INTERESTED_TRUSTS',
                                'NON_RESIDENT_TRUSTS',
                                'OFFSHORE_TRUSTS',
                                'FAMILY_LIVING_TRUST',
                                'PILOT_TRUST',
                                'VULNERABLE_BENEFICIARY_TRUST',
                                'CHARITABLE_TRUSTS',
                                'IRREVOCABLE_LIFE_INSURANCE_TRUST',
                                'TESTAMENTARY_TRUSTS',
                                'OTHER',
                            ],
                            description: '`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`',
                        },
                    },
                    description: 'Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.',
                },
                taxProfile: {
                    required: ['taxIdentifier'],
                    type: 'object',
                    properties: {
                        taxIdentifier: {
                            type: 'string',
                            description: 'Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                        },
                    },
                    description: 'Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                },
                complianceData: {
                    type: 'object',
                    properties: { typeDescription: { type: 'string' } },
                    description: 'Required for customers of type PREQUALIFIED. Not allowed for all other customer types.',
                },
            },
            description: 'A Customer is a single legal entity that can have 1 or more accounts',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCustomer = GetCustomer;
const GetCustomerNotification = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    customerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    notificationId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['customerId', 'notificationId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCustomerNotification = GetCustomerNotification;
const GetCustomers = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'ID of Customer(s) to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    q: {
                        type: 'string',
                        description: 'Query parameter. ID, name or external reference of customer to search for',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    type: {
                        type: 'string',
                        description: 'Type to filter, can be one of:\n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    verificationStatus: {
                        type: 'string',
                        description: 'Verification Status to filter, can be one of:\n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    fromCreatedDate: {
                        type: 'string',
                        description: "Customers created after and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    toCreatedDate: {
                        type: 'string',
                        description: "Customers created before and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    page: {
                        minimum: 0,
                        type: 'string',
                        description: 'Page to fetch (0 indexed)',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        maximum: 500,
                        type: 'string',
                        description: 'Size of Page to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sortField: {
                        pattern: '(name|createdDate)',
                        type: 'string',
                        description: 'Sort by field. Sorted by createdDate if not present',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sortOrder: {
                        pattern: '(asc|desc)',
                        type: 'string',
                        description: 'Sorting order:\n1. asc -> ascendant\n2. desc -> descendant',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    externalRef: {
                        type: 'string',
                        description: 'A list of external references to filter',
                        deprecated: true,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    externalReference: {
                        type: 'string',
                        description: 'A list of external references to filter',
                        examples: ['externalReference[0].type'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'name.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'name.value': { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    companyRegNumber: {
                        type: 'string',
                        description: 'Customer registration number',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    legalEntity: {
                        type: 'string',
                        description: 'Customer legal entity',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'tradingAddress.addressLines': {
                        uniqueItems: true,
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'tradingAddress.postCode': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'tradingAddress.postTown': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'tradingAddress.country': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'tradingAddress.startDate': {
                        type: 'string',
                        format: 'date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'tradingAddress.endDate': {
                        type: 'string',
                        format: 'date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'registeredAddress.addressLines': {
                        uniqueItems: true,
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'registeredAddress.postCode': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'registeredAddress.postTown': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'registeredAddress.country': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'registeredAddress.startDate': {
                        type: 'string',
                        format: 'date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'registeredAddress.endDate': {
                        type: 'string',
                        format: 'date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.firstNameInitial': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.lastName.type': {
                        type: 'string',
                        enum: [
                            'WORD_MATCH',
                            'WORD_MATCH_ALPHANUMERIC',
                            'PREFIX',
                            'SUFFIX',
                            'CONTAINS',
                            'EXACT',
                        ],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.lastName.value': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.lastNames': {
                        type: 'array',
                        items: {
                            required: ['type', 'value'],
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: 'WORD_MATCH - using word boundaries,\nWORD_MATCH_ALPHANUMERIC - using word boundaries, but replaces non-alphanumeric characters in the search with a word boundary match,\nPREFIX - same case prefix,\nSUFFIX - same case suffix,\nCONTAINS - same case contains\nEXACT - same case exact\n',
                                    enum: [
                                        'WORD_MATCH',
                                        'WORD_MATCH_ALPHANUMERIC',
                                        'PREFIX',
                                        'SUFFIX',
                                        'CONTAINS',
                                        'EXACT',
                                    ],
                                },
                                value: { type: 'string' },
                            },
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.lastNamePrefix': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.dateOfBirth': {
                        type: 'string',
                        format: 'date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.additionalIdentifier.type': {
                        type: 'string',
                        description: 'Type of additional personal identifier',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.additionalIdentifier.value': {
                        type: 'string',
                        description: 'Personal identifier value',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.homeAddress.addressLines': {
                        uniqueItems: true,
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.homeAddress.postCode': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.homeAddress.postTown': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.homeAddress.country': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.homeAddress.startDate': {
                        type: 'string',
                        format: 'date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.homeAddress.endDate': {
                        type: 'string',
                        format: 'date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    'associateSearchCriteria.associateTypes': {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: [
                                'DIRECTOR',
                                'PARTNER',
                                'CSECRETARY',
                                'SOLETRADER',
                                'BENE_OWNER',
                                'C_INTEREST',
                                'INDIVIDUAL',
                                'PCM_INDIVIDUAL',
                                'SIGNATORY',
                                'TRUST_SETTLOR',
                                'TRUST_BENEFICIARY',
                                'TRUST_TRUSTEE',
                                'PREQUALIFIED',
                            ],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [
                    'name.type',
                    'name.value',
                    'associateSearchCriteria.lastName.type',
                    'associateSearchCriteria.lastName.value',
                    'associateSearchCriteria.additionalIdentifier.type',
                    'associateSearchCriteria.additionalIdentifier.value',
                ],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['createdDate', 'id', 'name', 'status', 'type', 'verificationStatus'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: "Unique identifier for a Customer. Begins with 'C'",
                                examples: ['C00000001'],
                            },
                            name: {
                                type: 'string',
                                description: "Customer's company name - must be unique across the Modulr platform.",
                            },
                            brandNames: {
                                type: 'array',
                                description: 'The customers brand name(s)',
                                items: {
                                    required: ['id', 'name'],
                                    type: 'object',
                                    properties: {
                                        id: { type: 'string', description: 'Unique id for the Brand Name' },
                                        name: { type: 'string', description: 'The Brand Name' },
                                    },
                                    description: 'BrandName',
                                },
                            },
                            type: {
                                type: 'string',
                                description: 'Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`',
                                enum: [
                                    'LLC',
                                    'PLC',
                                    'SOLETRADER',
                                    'OPARTNRSHP',
                                    'LPARTNRSHP',
                                    'LLP',
                                    'CHARITY',
                                    'INDIVIDUAL',
                                    'PCM_INDIVIDUAL',
                                    'PCM_BUSINESS',
                                    'TRUST',
                                    'PREQUALIFIED',
                                ],
                            },
                            status: {
                                type: 'string',
                                description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`",
                                enum: ['ACTIVE', 'CLOSED'],
                            },
                            verificationStatus: {
                                type: 'string',
                                description: 'How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                                enum: [
                                    'UNVERIFIED',
                                    'VERIFIED',
                                    'EXVERIFIED',
                                    'REFERRED',
                                    'DECLINED',
                                    'REVIEWED',
                                    'MIGRATED',
                                ],
                            },
                            companyRegNumber: {
                                type: 'string',
                                description: 'The company registration / incorporation number of the company. Only applicable for companies registered with Companies House',
                            },
                            expectedMonthlySpend: {
                                type: 'integer',
                                description: 'Indication of the monthly spend of the customer.',
                                format: 'int32',
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            registeredAddress: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: { type: 'string' },
                                    addressLine2: { type: 'string' },
                                    postTown: { type: 'string' },
                                    postCode: { type: 'string' },
                                    country: { type: 'string' },
                                    countrySubDivision: { type: 'string' },
                                },
                                description: 'Address',
                            },
                            tradingAddress: {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: { type: 'string' },
                                    addressLine2: { type: 'string' },
                                    postTown: { type: 'string' },
                                    postCode: { type: 'string' },
                                    country: { type: 'string' },
                                    countrySubDivision: { type: 'string' },
                                },
                                description: 'Address',
                            },
                            partnerId: { type: 'string', description: 'The owning partner identifier' },
                            associates: {
                                type: 'array',
                                description: 'Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.',
                                items: {
                                    required: [
                                        'dateOfBirth',
                                        'firstName',
                                        'id',
                                        'lastName',
                                        'type',
                                        'verificationStatus',
                                    ],
                                    type: 'object',
                                    properties: {
                                        id: { type: 'string', description: 'Unique id for the Associate' },
                                        firstName: { type: 'string', description: "Associate's first name(s)" },
                                        middleName: { type: 'string', description: "Associate's middle name" },
                                        lastName: { type: 'string', description: "Associate's surname" },
                                        email: { type: 'string', description: "Associate's email address" },
                                        phone: {
                                            type: 'string',
                                            description: "Associate's phone number, in international number format",
                                        },
                                        applicant: {
                                            type: 'boolean',
                                            description: 'Indicates which Associate originally applied for the Modulr account',
                                        },
                                        ownership: {
                                            type: 'integer',
                                            description: "The Associate's percentage ownership of the Customer",
                                            format: 'int32',
                                            minimum: -2147483648,
                                            maximum: 2147483647,
                                        },
                                        type: {
                                            type: 'string',
                                            description: 'Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`',
                                            enum: [
                                                'DIRECTOR',
                                                'PARTNER',
                                                'CSECRETARY',
                                                'SOLETRADER',
                                                'BENE_OWNER',
                                                'C_INTEREST',
                                                'INDIVIDUAL',
                                                'PCM_INDIVIDUAL',
                                                'SIGNATORY',
                                                'TRUST_SETTLOR',
                                                'TRUST_BENEFICIARY',
                                                'TRUST_TRUSTEE',
                                                'PREQUALIFIED',
                                            ],
                                        },
                                        dateOfBirth: {
                                            type: 'string',
                                            description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown",
                                        },
                                        verificationStatus: {
                                            type: 'string',
                                            description: 'How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`',
                                            enum: [
                                                'UNVERIFIED',
                                                'VERIFIED',
                                                'EXVERIFIED',
                                                'REFERRED',
                                                'DECLINED',
                                                'REVIEWED',
                                                'MIGRATED',
                                            ],
                                        },
                                        homeAddress: {
                                            required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                            type: 'object',
                                            properties: {
                                                addressLine1: { type: 'string' },
                                                addressLine2: { type: 'string' },
                                                postTown: { type: 'string' },
                                                postCode: { type: 'string' },
                                                country: { type: 'string' },
                                                countrySubDivision: { type: 'string' },
                                            },
                                            description: 'Address',
                                        },
                                        documentInfo: {
                                            type: 'array',
                                            description: 'Documents gathered during Customer Due Diligence checks on an Associate.',
                                            items: {
                                                required: ['fileName', 'path', 'uploadedDate'],
                                                type: 'object',
                                                properties: {
                                                    path: { type: 'string' },
                                                    fileName: { type: 'string' },
                                                    uploadedDate: {
                                                        type: 'string',
                                                        description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                                        examples: ['2017-01-28T01:01:01+0000'],
                                                    },
                                                },
                                                description: 'Document',
                                            },
                                        },
                                        additionalPersonalIdentifiers: {
                                            type: 'array',
                                            description: 'Additional personal identifier(s)',
                                            items: {
                                                required: ['type', 'value'],
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        description: 'The type of Additional Personal Identifier\n\n`BSN`',
                                                        enum: ['BSN'],
                                                    },
                                                    value: {
                                                        type: 'string',
                                                        description: 'Additional Personal Identifier value',
                                                    },
                                                },
                                                description: 'AdditionalPersonalIdentifier',
                                            },
                                        },
                                        complianceData: {
                                            type: 'object',
                                            properties: { relationship: { type: 'string' } },
                                            description: 'Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.',
                                        },
                                    },
                                    description: 'Associate',
                                },
                            },
                            industryCode: { type: 'string' },
                            tcsVersion: {
                                type: 'integer',
                                description: 'Version of the Modulr Account Terms and Conditions the Customer has agreed to.',
                                format: 'int32',
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            documentInfo: {
                                type: 'array',
                                description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.",
                                items: {
                                    required: ['fileName', 'path', 'uploadedDate'],
                                    type: 'object',
                                    properties: {
                                        path: { type: 'string' },
                                        fileName: { type: 'string' },
                                        uploadedDate: {
                                            type: 'string',
                                            description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                            examples: ['2017-01-28T01:01:01+0000'],
                                        },
                                    },
                                    description: 'Document',
                                },
                            },
                            externalReference: { type: 'string' },
                            createdDate: {
                                type: 'string',
                                description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            delegate: {
                                required: ['created', 'id', 'name', 'roleId', 'status', 'updated'],
                                type: 'object',
                                properties: {
                                    id: {
                                        type: 'string',
                                        description: 'Unique reference for the Delegate.',
                                        examples: ['D0000001'],
                                    },
                                    name: { type: 'string', description: 'Name for the Delegate' },
                                    address: {
                                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                        type: 'object',
                                        properties: {
                                            addressLine1: { type: 'string' },
                                            addressLine2: { type: 'string' },
                                            postTown: { type: 'string' },
                                            postCode: { type: 'string' },
                                            country: { type: 'string' },
                                            countrySubDivision: { type: 'string' },
                                        },
                                        description: 'Address',
                                    },
                                    roleId: {
                                        type: 'string',
                                        description: 'The id of the Role assigned to the delegate',
                                        examples: ['R02002M5'],
                                    },
                                    externalReference: {
                                        type: 'string',
                                        description: 'External system reference for the Delegate',
                                    },
                                    partner: { type: 'string', description: 'Partner Bid.', examples: ['R0000001'] },
                                    status: { type: 'string', description: 'Status of the Delegate.' },
                                    created: {
                                        type: 'string',
                                        description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                        format: 'date-time',
                                    },
                                    updated: {
                                        type: 'string',
                                        description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                        format: 'date-time',
                                    },
                                },
                                description: 'Delegate',
                            },
                            legalEntity: {
                                type: 'string',
                                description: 'Legal entity of the customer\n\n`GB` `NL` `IE`',
                                enum: ['GB', 'NL', 'IE'],
                            },
                            customerTrust: {
                                type: 'object',
                                properties: {
                                    trustNature: {
                                        type: 'string',
                                        enum: [
                                            'BARE_TRUSTS',
                                            'INTEREST_IN_POSSESSION_TRUSTS',
                                            'DISCRETIONARY_TRUSTS',
                                            'ACCUMULATION_TRUSTS',
                                            'MIXED_TRUSTS',
                                            'SETTLOR_INTERESTED_TRUSTS',
                                            'NON_RESIDENT_TRUSTS',
                                            'OFFSHORE_TRUSTS',
                                            'FAMILY_LIVING_TRUST',
                                            'PILOT_TRUST',
                                            'VULNERABLE_BENEFICIARY_TRUST',
                                            'CHARITABLE_TRUSTS',
                                            'IRREVOCABLE_LIFE_INSURANCE_TRUST',
                                            'TESTAMENTARY_TRUSTS',
                                            'OTHER',
                                        ],
                                        description: '`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`',
                                    },
                                },
                                description: 'Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.',
                            },
                            taxProfile: {
                                required: ['taxIdentifier'],
                                type: 'object',
                                properties: {
                                    taxIdentifier: {
                                        type: 'string',
                                        description: 'Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                                    },
                                },
                                description: 'Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.',
                            },
                            complianceData: {
                                type: 'object',
                                properties: { typeDescription: { type: 'string' } },
                                description: 'Required for customers of type PREQUALIFIED. Not allowed for all other customer types.',
                            },
                        },
                        description: 'A Customer is a single legal entity that can have 1 or more accounts',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetCustomers = GetCustomers;
const GetFailedWebHooks = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    webhookId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of Webhook ',
                    },
                },
                required: ['webhookId'],
            },
            {
                type: 'object',
                properties: {
                    from: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Failed since Date. Needs to be urlEncoded value',
                    },
                },
                required: ['from'],
            },
        ],
    },
    response: {
        '200': {
            type: 'array',
            items: {
                required: ['customerBid', 'eventName', 'lastFailedTime', 'retry', 'url'],
                type: 'object',
                properties: {
                    url: { type: 'string', description: 'Endpoint URL for receiving webhook data' },
                    eventName: {
                        type: 'string',
                        description: 'Event which would trigger the webhook\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                        enum: [
                            'PAYIN',
                            'PAYOUT',
                            'BALANCE_LOW',
                            'BALANCE_HIGH',
                            'BALANCE',
                            'DDMANDATE',
                            'CUSTVSTAT',
                            'ACCOUNT_STATEMENT',
                            'PENDING_PAYMENTS',
                            'DD_INCOMING_DEBIT',
                            'DD_FAILED_CLAIM',
                            'DD_FUNDS_RETURNED',
                            'CARD_AUTH',
                            'CARD_CREATION',
                            'UPCOMING_CREDIT',
                            'UPCOMING_COLLECTION_CREDIT',
                            'UPCOMING_COLLECTION_DEBIT',
                            'CARD_STATUS_UPDATE',
                            'CARD_TOKEN_PROVISIONING',
                            'PAYMENT_COMPLIANCE_STATUS',
                            'DD_COLLECTION_STATUS',
                            'ACCOUNT_SWITCH_UPDATE',
                            'PAYMENT_FILE_UPLOAD',
                            'ACCOUNT_STATUS_CHANGE',
                        ],
                    },
                    customerBid: {
                        type: 'string',
                        description: 'Unique Identifier for the customer of this webhook.',
                    },
                    retry: { type: 'boolean', description: 'Turn webhook retry mechanism on/off' },
                    lastFailedTime: {
                        type: 'string',
                        description: "Last failure time. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01+0000'",
                        format: 'date-time',
                    },
                    data: { type: 'object', additionalProperties: true },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetFailedWebHooks = GetFailedWebHooks;
const GetLocks = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    beneficiaryId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['beneficiaryId'],
            },
            {
                type: 'object',
                properties: {
                    page: {
                        minimum: 0,
                        type: 'string',
                        description: 'Page to fetch (0 indexed)',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        maximum: 500,
                        minimum: 1,
                        type: 'string',
                        description: 'Size of Page to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['ownerId', 'ownerType'],
                        type: 'object',
                        properties: {
                            ownerId: {
                                type: 'string',
                                description: 'Reference for the entity owning the lock.',
                                examples: ['R00000001A'],
                            },
                            ownerType: {
                                type: 'string',
                                description: 'Entity type owning the lock.\n\n`RULE` `PAYMENT`',
                                enum: ['RULE', 'PAYMENT'],
                            },
                        },
                        description: 'BeneficiaryLock',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetLocks = GetLocks;
const GetMandates = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id(s) of Mandate(s) to fetch.',
                    },
                    accountId: {
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id(s) of account to fetch Mandates for.',
                    },
                    q: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Query parameter. ID, name or reference of mandate to search for',
                    },
                    fromCreatedDate: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Mandates created on or after this date.',
                    },
                    toCreatedDate: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Mandates created on or before this date.',
                    },
                    fromSubmittedDate: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Mandates submitted on or after this date.',
                    },
                    toSubmittedDate: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Mandates submitted on or before this date.',
                    },
                    status: {
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Status of the Mandate',
                    },
                    name: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account Name on the Mandate',
                    },
                    reference: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'reference of the Mandate',
                    },
                    externalReference: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'externalReference of the Mandate',
                    },
                    sortField: {
                        pattern: 'id|createdDate|submittedDate|status|name|reference|externalReference',
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Sort by field',
                    },
                    sortOrder: {
                        pattern: 'asc|desc',
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Sort order',
                    },
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (zero-indexed)',
                    },
                    size: {
                        maximum: 500,
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Size of page to fetch.',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: [
                            'accountId',
                            'accountNumber',
                            'createdDate',
                            'externalReference',
                            'id',
                            'nextValidCollectionDate',
                            'reference',
                            'sortCode',
                            'status',
                        ],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for direct-debit-mandate.',
                                examples: ['G0000001'],
                            },
                            accountId: {
                                type: 'string',
                                description: 'Unique id for account for this mandate.',
                                examples: ['A0000001'],
                            },
                            reference: {
                                type: 'string',
                                description: 'DDI reference that was used during creation.',
                            },
                            externalReference: {
                                type: 'string',
                                description: 'External reference that was used during creation (appears on the bank statement).',
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime when direct-debit-mandate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            status: {
                                type: 'string',
                                description: "Status of the direct-debit-mandate. mandates must be 'ACTIVE' to make collections. Can be one of PENDING, SUBMITTED, ACTIVE, SUSPENDED, REJECTED, CANCELLED\n\n`PENDING` `SUBMITTED` `ACTIVE` `SUSPENDED` `REJECTED` `CANCELLED`",
                                enum: ['PENDING', 'SUBMITTED', 'ACTIVE', 'SUSPENDED', 'REJECTED', 'CANCELLED'],
                                examples: ['ACTIVE'],
                            },
                            nextValidCollectionDate: {
                                type: 'string',
                                description: 'The earliest date a collection can be created. Format is yyyy-MM-dd.',
                                examples: ['2018-01-10'],
                            },
                            'Name given on Mandate': { type: 'string' },
                            'Address given on Mandate': {
                                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                                type: 'object',
                                properties: {
                                    addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                                    addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                                    postTown: { maxLength: 50, minLength: 0, type: 'string' },
                                    postCode: { maxLength: 8, minLength: 0, type: 'string' },
                                    country: {
                                        type: 'string',
                                        enum: [
                                            'AT',
                                            'BE',
                                            'BG',
                                            'CY',
                                            'CZ',
                                            'DK',
                                            'EE',
                                            'FI',
                                            'FR',
                                            'DE',
                                            'GR',
                                            'HR',
                                            'HU',
                                            'IS',
                                            'IE',
                                            'IT',
                                            'LV',
                                            'LI',
                                            'LT',
                                            'LU',
                                            'MT',
                                            'NL',
                                            'NO',
                                            'PL',
                                            'PT',
                                            'RO',
                                            'SK',
                                            'SI',
                                            'ES',
                                            'SE',
                                            'GB',
                                            'MQ',
                                            'YT',
                                            'GP',
                                            'GF',
                                            'RE',
                                            'MF',
                                            'GI',
                                            'GG',
                                            'IM',
                                            'JE',
                                            'MC',
                                            'CH',
                                            'AD',
                                            'SM',
                                            'VA',
                                            'AX',
                                            'PM',
                                            'BL',
                                            'AF',
                                            'AL',
                                            'DZ',
                                            'AS',
                                            'AO',
                                            'AI',
                                            'AQ',
                                            'AG',
                                            'AR',
                                            'AM',
                                            'AW',
                                            'AU',
                                            'AZ',
                                            'BS',
                                            'BH',
                                            'BD',
                                            'BB',
                                            'BY',
                                            'BZ',
                                            'BJ',
                                            'BM',
                                            'BT',
                                            'BO',
                                            'BQ',
                                            'BA',
                                            'BW',
                                            'BV',
                                            'BR',
                                            'IO',
                                            'VG',
                                            'BN',
                                            'BF',
                                            'BI',
                                            'KH',
                                            'CM',
                                            'CA',
                                            'CV',
                                            'KY',
                                            'CF',
                                            'TD',
                                            'CL',
                                            'CN',
                                            'CX',
                                            'CC',
                                            'CO',
                                            'KM',
                                            'CK',
                                            'CR',
                                            'CU',
                                            'CW',
                                            'CD',
                                            'DJ',
                                            'DM',
                                            'DO',
                                            'TL',
                                            'EC',
                                            'EG',
                                            'SV',
                                            'GQ',
                                            'ER',
                                            'SZ',
                                            'ET',
                                            'FK',
                                            'FO',
                                            'FJ',
                                            'PF',
                                            'TF',
                                            'GA',
                                            'GM',
                                            'GE',
                                            'GH',
                                            'GL',
                                            'GD',
                                            'GU',
                                            'GT',
                                            'GN',
                                            'GW',
                                            'GY',
                                            'HT',
                                            'HM',
                                            'HN',
                                            'HK',
                                            'IN',
                                            'ID',
                                            'IR',
                                            'IQ',
                                            'IL',
                                            'CI',
                                            'JM',
                                            'JP',
                                            'JO',
                                            'KZ',
                                            'KE',
                                            'KI',
                                            'XK',
                                            'KW',
                                            'KG',
                                            'LA',
                                            'LB',
                                            'LS',
                                            'LR',
                                            'LY',
                                            'MO',
                                            'MG',
                                            'MW',
                                            'MY',
                                            'MV',
                                            'ML',
                                            'MH',
                                            'MR',
                                            'MU',
                                            'MX',
                                            'FM',
                                            'MD',
                                            'MN',
                                            'ME',
                                            'MS',
                                            'MA',
                                            'MZ',
                                            'MM',
                                            'NA',
                                            'NR',
                                            'NP',
                                            'AN',
                                            'NC',
                                            'NZ',
                                            'NI',
                                            'NE',
                                            'NG',
                                            'NU',
                                            'NF',
                                            'KP',
                                            'MK',
                                            'MP',
                                            'OM',
                                            'PK',
                                            'PW',
                                            'PS',
                                            'PA',
                                            'PG',
                                            'PY',
                                            'PE',
                                            'PH',
                                            'PN',
                                            'PR',
                                            'QA',
                                            'CG',
                                            'RU',
                                            'RW',
                                            'SH',
                                            'KN',
                                            'LC',
                                            'VC',
                                            'WS',
                                            'ST',
                                            'SA',
                                            'SN',
                                            'RS',
                                            'SC',
                                            'SL',
                                            'SG',
                                            'SX',
                                            'SB',
                                            'SO',
                                            'ZA',
                                            'KR',
                                            'GS',
                                            'SS',
                                            'LK',
                                            'SD',
                                            'SR',
                                            'SY',
                                            'SJ',
                                            'TW',
                                            'TJ',
                                            'TZ',
                                            'TH',
                                            'TG',
                                            'TK',
                                            'TO',
                                            'TT',
                                            'TN',
                                            'TR',
                                            'TM',
                                            'TC',
                                            'TV',
                                            'UG',
                                            'UA',
                                            'AE',
                                            'UM',
                                            'US',
                                            'UY',
                                            'UZ',
                                            'VU',
                                            'VE',
                                            'VN',
                                            'VI',
                                            'WF',
                                            'EH',
                                            'YE',
                                            'ZM',
                                            'ZW',
                                        ],
                                        description: '`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                    },
                                },
                            },
                            sortCode: {
                                type: 'string',
                                description: 'Sort Code of the account for which direct-debit-mandate has been created.',
                                examples: ['123456'],
                            },
                            accountNumber: {
                                type: 'string',
                                description: 'Account Number for which direct-debit-mandate has been created.',
                                examples: ['87654321'],
                            },
                            payeeAccountBid: {
                                type: 'string',
                                description: 'Unique id for individual recipient account used for internal transfers',
                                examples: ['A0000001'],
                            },
                        },
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0-based, i.e first page = 0, second page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetMandates = GetMandates;
const GetPartnerNotification = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    partnerId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                    notificationId: { type: 'string', $schema: 'http://json-schema.org/draft-04/schema#' },
                },
                required: ['partnerId', 'notificationId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            required: ['channel', 'config', 'customerId', 'destinations', 'id', 'status', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique Identifier for the notification.' },
                customerId: {
                    type: 'string',
                    description: 'Unique Identifier for the customer of this notification.',
                },
                type: {
                    type: 'string',
                    description: 'Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`',
                    enum: [
                        'PAYIN',
                        'PAYOUT',
                        'BALANCE_LOW',
                        'BALANCE_HIGH',
                        'BALANCE',
                        'DDMANDATE',
                        'CUSTVSTAT',
                        'ACCOUNT_STATEMENT',
                        'PENDING_PAYMENTS',
                        'DD_INCOMING_DEBIT',
                        'DD_FAILED_CLAIM',
                        'DD_FUNDS_RETURNED',
                        'CARD_AUTH',
                        'CARD_CREATION',
                        'UPCOMING_CREDIT',
                        'UPCOMING_COLLECTION_CREDIT',
                        'UPCOMING_COLLECTION_DEBIT',
                        'CARD_STATUS_UPDATE',
                        'CARD_TOKEN_PROVISIONING',
                        'PAYMENT_COMPLIANCE_STATUS',
                        'DD_COLLECTION_STATUS',
                        'ACCOUNT_SWITCH_UPDATE',
                        'PAYMENT_FILE_UPLOAD',
                        'ACCOUNT_STATUS_CHANGE',
                    ],
                },
                channel: {
                    type: 'string',
                    description: 'Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`',
                    enum: ['EMAIL', 'WEBHOOK'],
                },
                status: {
                    type: 'string',
                    description: 'Status of notification.\n\n`ACTIVE` `INACTIVE`',
                    enum: ['ACTIVE', 'INACTIVE'],
                },
                destinations: {
                    type: 'array',
                    description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    items: {
                        type: 'string',
                        description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.",
                    },
                },
                config: {
                    type: 'object',
                    properties: {
                        threshold: {
                            minimum: 0,
                            type: 'number',
                            description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.",
                        },
                        timesToRun: {
                            type: 'array',
                            description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`",
                                enum: ['AM', 'PM'],
                            },
                        },
                        daysToRun: {
                            type: 'array',
                            description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.",
                            items: {
                                type: 'string',
                                description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`",
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        retry: {
                            type: 'boolean',
                            description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        secret: {
                            maxLength: 32,
                            minLength: 32,
                            type: 'string',
                            description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.",
                        },
                        hmacAlgorithm: {
                            type: 'string',
                            description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`",
                            enum: ['hmac-sha1', 'hmac-sha256', 'hmac-sha384', 'hmac-sha512'],
                        },
                    },
                    description: 'Configuration information for this Notification entity.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetPartnerNotification = GetPartnerNotification;
const GetPaymentInitiation = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    paymentInitiationId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Payment initiation ID',
                    },
                },
                required: ['paymentInitiationId'],
            },
        ],
    },
    response: {
        '200': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'The identifier of the payment initiation',
                    examples: ['I000000001'],
                },
                status: {
                    type: 'string',
                    description: 'The status of the payment initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL',
                    examples: ['AWAITING_CONSENT'],
                },
                paymentAmount: {
                    required: ['currency', 'value'],
                    type: 'object',
                    properties: {
                        currency: {
                            type: 'string',
                            description: 'Currency of the account in ISO 4217 format. Only allowable value is GBP\n\n`GBP`',
                            enum: ['GBP'],
                        },
                        value: {
                            maximum: 2147483647,
                            minimum: 0.01,
                            type: 'number',
                            description: "Amount of the payment in Major Currency Units - '1' = 1.00 GBP",
                            examples: [100],
                        },
                    },
                    description: 'The amount of the payment',
                },
                paymentReference: { type: 'string', description: 'The payment reference' },
                destination: {
                    required: ['type'],
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            description: 'Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`',
                            enum: ['ACCOUNT', 'SCAN'],
                        },
                        id: {
                            type: 'string',
                            description: 'Identifier of the destination account if using ACCOUNT type',
                            examples: ['A1100001'],
                        },
                        accountNumber: {
                            pattern: '^[0-9]{8}$',
                            type: 'string',
                            description: 'Account Number of destination account if using SCAN type',
                            examples: ['12345678'],
                        },
                        sortCode: {
                            pattern: '^[0-9]{6}$',
                            type: 'string',
                            description: 'Sort Code of destination account if using SCAN type',
                            examples: ['000000'],
                        },
                        name: {
                            maxLength: 70,
                            minLength: 0,
                            type: 'string',
                            description: 'Name of destination account if using SCAN type (this may be truncated)',
                            examples: ['Test'],
                        },
                    },
                    description: 'The destination account for the payment',
                },
                aspspId: {
                    type: 'string',
                    description: 'The identifier of the ASPSP used for the payment',
                    examples: ['H100000001'],
                },
                aspspPaymentStatus: {
                    type: 'string',
                    description: 'The status of the payment at the ASPSP. When available, this is passed through from the ASPSP without modification.',
                    examples: ['AcceptedSettlementCompleted'],
                },
            },
            description: 'Response object for Get Payment Initiation',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'The identifier of the payment initiation',
                    examples: ['I000000001'],
                },
                status: {
                    type: 'string',
                    description: 'The status of the payment initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL',
                    examples: ['AWAITING_CONSENT'],
                },
                paymentAmount: {
                    required: ['currency', 'value'],
                    type: 'object',
                    properties: {
                        currency: {
                            type: 'string',
                            description: 'Currency of the account in ISO 4217 format. Only allowable value is GBP\n\n`GBP`',
                            enum: ['GBP'],
                        },
                        value: {
                            maximum: 2147483647,
                            minimum: 0.01,
                            type: 'number',
                            description: "Amount of the payment in Major Currency Units - '1' = 1.00 GBP",
                            examples: [100],
                        },
                    },
                    description: 'The amount of the payment',
                },
                paymentReference: { type: 'string', description: 'The payment reference' },
                destination: {
                    required: ['type'],
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            description: 'Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`',
                            enum: ['ACCOUNT', 'SCAN'],
                        },
                        id: {
                            type: 'string',
                            description: 'Identifier of the destination account if using ACCOUNT type',
                            examples: ['A1100001'],
                        },
                        accountNumber: {
                            pattern: '^[0-9]{8}$',
                            type: 'string',
                            description: 'Account Number of destination account if using SCAN type',
                            examples: ['12345678'],
                        },
                        sortCode: {
                            pattern: '^[0-9]{6}$',
                            type: 'string',
                            description: 'Sort Code of destination account if using SCAN type',
                            examples: ['000000'],
                        },
                        name: {
                            maxLength: 70,
                            minLength: 0,
                            type: 'string',
                            description: 'Name of destination account if using SCAN type (this may be truncated)',
                            examples: ['Test'],
                        },
                    },
                    description: 'The destination account for the payment',
                },
                aspspId: {
                    type: 'string',
                    description: 'The identifier of the ASPSP used for the payment',
                    examples: ['H100000001'],
                },
                aspspPaymentStatus: {
                    type: 'string',
                    description: 'The status of the payment at the ASPSP. When available, this is passed through from the ASPSP without modification.',
                    examples: ['AcceptedSettlementCompleted'],
                },
            },
            description: 'Response object for Get Payment Initiation',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetPaymentInitiation = GetPaymentInitiation;
const GetPayments = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Payment ID. If specified then all other parameters are ignored',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    fromCreatedDate: {
                        type: 'string',
                        description: "Payments created date equal or after to this date. Mandatory Parameter(except when 'id' or 'modifiedSince' parameter is used)",
                        examples: ['2016-01-01T01:01:01+0000'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    toCreatedDate: {
                        type: 'string',
                        description: 'Payments created date equal or before to this date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    modifiedSince: {
                        type: 'string',
                        description: 'Payments modified date equal or before to this date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sourceAccountId: {
                        type: 'string',
                        description: 'The source account ID',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    hasExternalReference: {
                        type: 'boolean',
                        description: "True if the API should return all items that have externalReference. False the API should return all items that don't have externalReference",
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    externalReference: {
                        pattern: '[\\w-\\s]*',
                        type: 'string',
                        description: 'External reference can only have alphanumeric characters plus underscore, hyphen and space',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    status: {
                        type: 'array',
                        items: {
                            type: 'string',
                            description: 'Payment status, multiple statuses can be specified by repeating the parameter',
                            enum: [
                                'SUBMITTED',
                                'SCREENING_REQ',
                                'VALIDATED',
                                'PENDING_FOR_DATE',
                                'PENDING_FOR_FUNDS',
                                'EXT_PROC',
                                'PROCESSED',
                                'RECONCILED',
                                'ER_INVALID',
                                'ER_EXTCONN',
                                'ER_EXTSYS',
                                'ER_EXPIRED',
                                'ER_GENERAL',
                                'ER_BATCH',
                                'EXT_SENT',
                                'UNALLOCATED',
                                'HELD',
                                'RETURNED',
                                'CANCELLED',
                                'REPROCESSING',
                                'VOID',
                                'CLEARING',
                            ],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    type: {
                        type: 'string',
                        description: 'The payment type to search for.',
                        default: 'PAYOUT',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    excludeBatchPayments: {
                        type: 'boolean',
                        description: 'Exclude payments which are part of a batch with submission type BATCH',
                        default: false,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    batchPaymentId: {
                        type: 'string',
                        description: 'Filter on batch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    page: {
                        minimum: 0,
                        type: 'string',
                        description: 'The page to fetch. 0 indexed',
                        default: '0',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        minimum: 1,
                        type: 'string',
                        description: 'The size of the page(s)',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['details', 'externalReference', 'id', 'status'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for the Payment request. 10 characters long',
                                examples: ['P000001ABC'],
                            },
                            status: {
                                type: 'string',
                                description: 'Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`',
                                enum: [
                                    'SUBMITTED',
                                    'SCREENING_REQ',
                                    'VALIDATED',
                                    'PENDING_FOR_DATE',
                                    'PENDING_FOR_FUNDS',
                                    'EXT_PROC',
                                    'PROCESSED',
                                    'RECONCILED',
                                    'ER_INVALID',
                                    'ER_EXTCONN',
                                    'ER_EXTSYS',
                                    'ER_EXPIRED',
                                    'ER_GENERAL',
                                    'ER_BATCH',
                                    'EXT_SENT',
                                    'UNALLOCATED',
                                    'HELD',
                                    'RETURNED',
                                    'CANCELLED',
                                    'REPROCESSING',
                                    'VOID',
                                    'CLEARING',
                                    'HELD_IN_SUSPENSE',
                                ],
                                examples: ['VALIDATED'],
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'",
                                format: 'date-time',
                            },
                            externalReference: {
                                type: 'string',
                                description: 'external reference if provided',
                                examples: ['aReference_00001'],
                            },
                            details: {
                                type: 'object',
                                description: 'All the details of the payment from the original request',
                                additionalProperties: true,
                            },
                            approvalStatus: {
                                type: 'string',
                                description: 'Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`',
                                enum: ['NOTNEEDED', 'PENDING', 'APPROVED', 'REJECTED', 'DELETED'],
                                examples: ['NOTNEEDED'],
                            },
                            message: { type: 'string', description: 'Information about payment (if available)' },
                            schemeInfo: {
                                type: 'object',
                                properties: {
                                    name: { type: 'string' },
                                    id: { type: 'string' },
                                    message: { type: 'string' },
                                    responseCode: { type: 'string' },
                                },
                                description: 'Information with regards to the payment scheme',
                            },
                        },
                        description: 'Full details of all payments in this batch',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0-based, i.e first page = 0, second page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetPayments = GetPayments;
const GetRule = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    accountId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account ID of the rule',
                    },
                    rtype: {
                        type: 'string',
                        examples: ['SPLIT, SWEEP, FUNDING'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The type of Rule.',
                    },
                },
                required: ['accountId', 'rtype'],
            },
        ],
    },
    response: {
        '200': {
            required: ['accountId', 'data', 'id', 'name', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique identifier for a Rule', examples: ['R1000001'] },
                type: {
                    type: 'string',
                    description: 'The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`',
                    enum: ['SPLIT', 'SWEEP', 'FUNDING'],
                },
                name: { type: 'string', description: "Rule's name", examples: ['My new rule'] },
                accountId: {
                    type: 'string',
                    description: 'The Account which the Rule is created on.',
                    examples: ['A1000001'],
                },
                data: {
                    type: 'object',
                    properties: {
                        daysToRun: {
                            type: 'array',
                            description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                            items: {
                                type: 'string',
                                description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`',
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        frequency: {
                            type: 'string',
                            description: 'Frequency of the rule. Sweep Rule Only\n\n`Daily`',
                            enum: ['Daily'],
                        },
                        destinationId: {
                            type: 'string',
                            description: 'Id of destination beneficiary. e.g. B1000001. Sweep Rule Only',
                        },
                        balanceToLeave: {
                            type: 'number',
                            description: 'Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only',
                        },
                        triggerBalance: {
                            type: 'number',
                            description: 'Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only',
                        },
                        splits: {
                            type: 'array',
                            items: {
                                required: ['destinationId', 'percent'],
                                type: 'object',
                                properties: {
                                    destinationId: {
                                        type: 'string',
                                        description: 'Id of destination beneficiary. e.g. B1000001.',
                                    },
                                    percent: {
                                        type: 'string',
                                        description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                    },
                                },
                                description: 'Configuration for a Split Rule',
                            },
                        },
                        conditionalSplits: {
                            type: 'array',
                            items: {
                                required: ['destinationId', 'percent'],
                                type: 'object',
                                properties: {
                                    destinationId: {
                                        type: 'string',
                                        description: 'Id of destination beneficiary. e.g. B1000001.',
                                    },
                                    percent: {
                                        type: 'string',
                                        description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                    },
                                },
                                description: 'Configuration for a Split Rule',
                            },
                        },
                        conditionalSplitConfig: {
                            required: ['conditionAmount', 'destinationId', 'percent'],
                            type: 'object',
                            properties: {
                                destinationId: {
                                    type: 'string',
                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                },
                                percent: {
                                    type: 'string',
                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                },
                                conditionAmount: {
                                    maximum: 2147483647,
                                    minimum: 0.01,
                                    type: 'number',
                                    description: 'Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.',
                                },
                                conditionDone: {
                                    type: 'boolean',
                                    description: 'Whether the condition amount has been met. e.g. true or false',
                                },
                            },
                            description: 'Configuration for a Conditional Split Rule',
                        },
                        sourceId: {
                            type: 'string',
                            description: 'Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only',
                        },
                    },
                    description: 'Configuration fields for all types of rules. To be populated where applicable based on rule type.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetRule = GetRule;
const GetRules = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    accountId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account ID of the rules',
                    },
                },
                required: ['accountId'],
            },
            {
                type: 'object',
                properties: {
                    page: {
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (0 indexed)',
                    },
                    size: {
                        type: 'integer',
                        format: 'int32',
                        default: 20,
                        minimum: -2147483648,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Size of Page to fetch',
                    },
                    rtype: {
                        type: 'string',
                        examples: ['SPLIT, SWEEP, FUNDING'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Filter to a specific RuleType',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['accountId', 'data', 'id', 'name', 'type'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique identifier for a Rule',
                                examples: ['R1000001'],
                            },
                            type: {
                                type: 'string',
                                description: 'The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`',
                                enum: ['SPLIT', 'SWEEP', 'FUNDING'],
                            },
                            name: { type: 'string', description: "Rule's name", examples: ['My new rule'] },
                            accountId: {
                                type: 'string',
                                description: 'The Account which the Rule is created on.',
                                examples: ['A1000001'],
                            },
                            data: {
                                type: 'object',
                                properties: {
                                    daysToRun: {
                                        type: 'array',
                                        description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                                        items: {
                                            type: 'string',
                                            description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`',
                                            enum: [
                                                'MONDAY',
                                                'TUESDAY',
                                                'WEDNESDAY',
                                                'THURSDAY',
                                                'FRIDAY',
                                                'SATURDAY',
                                                'SUNDAY',
                                            ],
                                        },
                                    },
                                    frequency: {
                                        type: 'string',
                                        description: 'Frequency of the rule. Sweep Rule Only\n\n`Daily`',
                                        enum: ['Daily'],
                                    },
                                    destinationId: {
                                        type: 'string',
                                        description: 'Id of destination beneficiary. e.g. B1000001. Sweep Rule Only',
                                    },
                                    balanceToLeave: {
                                        type: 'number',
                                        description: 'Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only',
                                    },
                                    triggerBalance: {
                                        type: 'number',
                                        description: 'Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only',
                                    },
                                    splits: {
                                        type: 'array',
                                        items: {
                                            required: ['destinationId', 'percent'],
                                            type: 'object',
                                            properties: {
                                                destinationId: {
                                                    type: 'string',
                                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                                },
                                                percent: {
                                                    type: 'string',
                                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                                },
                                            },
                                            description: 'Configuration for a Split Rule',
                                        },
                                    },
                                    conditionalSplits: {
                                        type: 'array',
                                        items: {
                                            required: ['destinationId', 'percent'],
                                            type: 'object',
                                            properties: {
                                                destinationId: {
                                                    type: 'string',
                                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                                },
                                                percent: {
                                                    type: 'string',
                                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                                },
                                            },
                                            description: 'Configuration for a Split Rule',
                                        },
                                    },
                                    conditionalSplitConfig: {
                                        required: ['conditionAmount', 'destinationId', 'percent'],
                                        type: 'object',
                                        properties: {
                                            destinationId: {
                                                type: 'string',
                                                description: 'Id of destination beneficiary. e.g. B1000001.',
                                            },
                                            percent: {
                                                type: 'string',
                                                description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                            },
                                            conditionAmount: {
                                                maximum: 2147483647,
                                                minimum: 0.01,
                                                type: 'number',
                                                description: 'Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.',
                                            },
                                            conditionDone: {
                                                type: 'boolean',
                                                description: 'Whether the condition amount has been met. e.g. true or false',
                                            },
                                        },
                                        description: 'Configuration for a Conditional Split Rule',
                                    },
                                    sourceId: {
                                        type: 'string',
                                        description: 'Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only',
                                    },
                                },
                                description: 'Configuration fields for all types of rules. To be populated where applicable based on rule type.',
                            },
                        },
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetRules = GetRules;
const GetSecureCardDetails = {
    response: {
        '200': {
            required: ['cvv2', 'pan'],
            type: 'object',
            properties: {
                pan: { type: 'string', description: 'PAN', examples: ['4567123412341234'] },
                cvv2: { type: 'string', description: 'CVV', examples: ['123'] },
                pin: { type: 'string', description: 'PIN', examples: ['1234'] },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '403': {
            required: ['cvv2', 'pan'],
            type: 'object',
            properties: {
                pan: { type: 'string', description: 'PAN', examples: ['4567123412341234'] },
                cvv2: { type: 'string', description: 'CVV', examples: ['123'] },
                pin: { type: 'string', description: 'PIN', examples: ['1234'] },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetSecureCardDetails = GetSecureCardDetails;
const GetSrdAccounts = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    page: {
                        minimum: 0,
                        type: 'integer',
                        format: 'int32',
                        default: 0,
                        maximum: 2147483647,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Page to fetch (0 indexed)',
                    },
                    size: {
                        maximum: 500,
                        minimum: 1,
                        type: 'integer',
                        format: 'int32',
                        default: 500,
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Size of Page to fetch',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: ['sortCode'],
                        type: 'object',
                        properties: {
                            sortCode: {
                                type: 'string',
                                description: 'The sort code of one or more accounts that requires Secondary Reference Data to be provided when making account name check requests.\n',
                                examples: ['123456'],
                            },
                            accountNumbers: {
                                type: 'array',
                                description: 'Account numbers that require Secondary Reference Data. If empty, Secondary Reference Data is required for all name check requests for this sort code.',
                                items: {
                                    type: 'string',
                                    description: 'The account number of a specific account that requires Secondary Reference Data to be provided when making account name check requests.',
                                    examples: ['11111111'],
                                },
                                examples: ['11111111', '22222222'],
                            },
                        },
                        description: 'List of responses on the current page',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '401': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '403': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '500': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '503': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetSrdAccounts = GetSrdAccounts;
const GetStandingOrderInitiation = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    standingOrderInitiationId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Standing order initiation ID',
                    },
                },
                required: ['standingOrderInitiationId'],
            },
        ],
    },
    response: {
        '200': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'The identifier of the standing order initiation',
                    examples: ['I000000001'],
                },
                payment: {
                    required: ['amount', 'destination', 'reference'],
                    type: 'object',
                    properties: {
                        destination: {
                            required: ['type'],
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: 'Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`',
                                    enum: ['ACCOUNT', 'SCAN'],
                                },
                                id: {
                                    type: 'string',
                                    description: 'Identifier of the destination account if using ACCOUNT type',
                                    examples: ['A1100001'],
                                },
                                accountNumber: {
                                    pattern: '^[0-9]{8}$',
                                    type: 'string',
                                    description: 'Account Number of destination account if using SCAN type',
                                    examples: ['12345678'],
                                },
                                sortCode: {
                                    pattern: '^[0-9]{6}$',
                                    type: 'string',
                                    description: 'Sort Code of destination account if using SCAN type',
                                    examples: ['000000'],
                                },
                                name: {
                                    maxLength: 70,
                                    minLength: 0,
                                    type: 'string',
                                    description: 'Name of destination account if using SCAN type (this may be truncated)',
                                    examples: ['Test'],
                                },
                            },
                            description: 'The destination account for the payment',
                        },
                        amount: {
                            required: ['currency', 'recurringAmount'],
                            type: 'object',
                            properties: {
                                currency: {
                                    type: 'string',
                                    description: 'Currency of the account in ISO 4217 format. Default is GBP\n\n`GBP`',
                                    enum: ['GBP'],
                                },
                                recurringAmount: {
                                    maximum: 2147483647,
                                    minimum: 0.01,
                                    type: 'number',
                                    description: "Recurring amount of the payment in Major Currency Units - '1' = 1.00 GBP",
                                    examples: [100],
                                },
                            },
                            description: 'The amount of the standing order',
                        },
                        reference: {
                            type: 'string',
                            description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.",
                            examples: ['Invoice ABC123'],
                        },
                    },
                    description: 'The payment of the standing order',
                },
                schedule: {
                    required: ['frequency', 'initialDate'],
                    type: 'object',
                    properties: {
                        frequency: {
                            type: 'string',
                            description: 'Type of the capability, can be one of WEEKLY, MONTHLY\n\n`WEEKLY` `MONTHLY`',
                            enum: ['WEEKLY', 'MONTHLY'],
                        },
                        initialDate: {
                            type: 'string',
                            description: "The date on which the standing order should begin. This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'",
                            examples: ['2021-03-25'],
                        },
                        finalDate: {
                            type: 'string',
                            description: "The optional date on which the standing order should end. If unspecified, the standing order will continue until cancelled.This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'",
                            examples: ['2021-03-25'],
                        },
                    },
                    description: 'The schedule of the standing order',
                },
                status: {
                    type: 'string',
                    description: 'The status of the standing order initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL',
                    examples: ['AWAITING_CONSENT'],
                },
                aspspId: {
                    type: 'string',
                    description: 'The identifier of the ASPSP used for the standing order',
                    examples: ['H100000001'],
                },
                standingOrderStatus: {
                    type: 'string',
                    description: 'The status of the standing order at the ASPSP. When available, this is passed through from the ASPSP without modification.',
                    examples: ['InitiationCompleted'],
                },
            },
            description: 'Response object for Get Standing Order Initiation',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'The identifier of the standing order initiation',
                    examples: ['I000000001'],
                },
                payment: {
                    required: ['amount', 'destination', 'reference'],
                    type: 'object',
                    properties: {
                        destination: {
                            required: ['type'],
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: 'Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`',
                                    enum: ['ACCOUNT', 'SCAN'],
                                },
                                id: {
                                    type: 'string',
                                    description: 'Identifier of the destination account if using ACCOUNT type',
                                    examples: ['A1100001'],
                                },
                                accountNumber: {
                                    pattern: '^[0-9]{8}$',
                                    type: 'string',
                                    description: 'Account Number of destination account if using SCAN type',
                                    examples: ['12345678'],
                                },
                                sortCode: {
                                    pattern: '^[0-9]{6}$',
                                    type: 'string',
                                    description: 'Sort Code of destination account if using SCAN type',
                                    examples: ['000000'],
                                },
                                name: {
                                    maxLength: 70,
                                    minLength: 0,
                                    type: 'string',
                                    description: 'Name of destination account if using SCAN type (this may be truncated)',
                                    examples: ['Test'],
                                },
                            },
                            description: 'The destination account for the payment',
                        },
                        amount: {
                            required: ['currency', 'recurringAmount'],
                            type: 'object',
                            properties: {
                                currency: {
                                    type: 'string',
                                    description: 'Currency of the account in ISO 4217 format. Default is GBP\n\n`GBP`',
                                    enum: ['GBP'],
                                },
                                recurringAmount: {
                                    maximum: 2147483647,
                                    minimum: 0.01,
                                    type: 'number',
                                    description: "Recurring amount of the payment in Major Currency Units - '1' = 1.00 GBP",
                                    examples: [100],
                                },
                            },
                            description: 'The amount of the standing order',
                        },
                        reference: {
                            type: 'string',
                            description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.",
                            examples: ['Invoice ABC123'],
                        },
                    },
                    description: 'The payment of the standing order',
                },
                schedule: {
                    required: ['frequency', 'initialDate'],
                    type: 'object',
                    properties: {
                        frequency: {
                            type: 'string',
                            description: 'Type of the capability, can be one of WEEKLY, MONTHLY\n\n`WEEKLY` `MONTHLY`',
                            enum: ['WEEKLY', 'MONTHLY'],
                        },
                        initialDate: {
                            type: 'string',
                            description: "The date on which the standing order should begin. This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'",
                            examples: ['2021-03-25'],
                        },
                        finalDate: {
                            type: 'string',
                            description: "The optional date on which the standing order should end. If unspecified, the standing order will continue until cancelled.This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'",
                            examples: ['2021-03-25'],
                        },
                    },
                    description: 'The schedule of the standing order',
                },
                status: {
                    type: 'string',
                    description: 'The status of the standing order initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL',
                    examples: ['AWAITING_CONSENT'],
                },
                aspspId: {
                    type: 'string',
                    description: 'The identifier of the ASPSP used for the standing order',
                    examples: ['H100000001'],
                },
                standingOrderStatus: {
                    type: 'string',
                    description: 'The status of the standing order at the ASPSP. When available, this is passed through from the ASPSP without modification.',
                    examples: ['InitiationCompleted'],
                },
            },
            description: 'Response object for Get Standing Order Initiation',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetStandingOrderInitiation = GetStandingOrderInitiation;
const GetTransactionsByAccount = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    accountId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of account to fetch transactions for',
                    },
                },
                required: ['accountId'],
            },
            {
                type: 'object',
                properties: {
                    q: {
                        type: 'string',
                        description: 'Partial description text to search for',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    minAmount: {
                        minimum: 0,
                        type: 'string',
                        description: 'Transactions with amount equal or more than this amount',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    maxAmount: {
                        minimum: 0.01,
                        type: 'string',
                        description: 'Transactions with amount equal or less than this amount',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    fromPostedDate: {
                        type: 'string',
                        description: 'Transactions with posted date equal or after to this date',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    toPostedDate: {
                        type: 'string',
                        description: "Transactions with posted date equal or before to this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    type: {
                        type: 'array',
                        description: 'Transaction types',
                        items: {
                            type: 'string',
                            description: 'Transaction type',
                            enum: [
                                'PI_BACS',
                                'PI_BACS_CONTRA',
                                'PI_FAST',
                                'PI_CHAPS',
                                'PI_DD',
                                'PI_SECT',
                                'PI_SEPA_INST',
                                'PI_REV',
                                'PI_FAST_REV',
                                'PO_FAST',
                                'PO_CHAPS',
                                'PO_DD',
                                'PO_SECT',
                                'PO_SEPA_INST',
                                'PO_REV',
                                'INT_INTERC',
                                'INT_INTRAC',
                                'ADHOC',
                                'FE_TXN',
                                'FE_ACMNT',
                                'FE_ACOPN',
                                'FE_REV',
                                'PO_MASTER',
                                'PI_MASTER',
                                'PO_REV_MASTER',
                                'PO_VISA',
                                'PI_VISA',
                                'PI_SWIFT',
                                'PO_SWIFT',
                            ],
                        },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    credit: {
                        type: 'boolean',
                        description: 'If true only credit transactions will be returned, if false, only debit transactions will be returned',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    sourceId: {
                        type: 'string',
                        description: 'Transactions with this sourceId',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    size: {
                        maximum: 500,
                        type: 'string',
                        description: 'Size of Page to fetch',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    fromTransactionDate: {
                        type: 'string',
                        description: "Transactions with transaction date equal or after to this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    toTransactionDate: {
                        type: 'string',
                        description: "Transactions with transaction date equal or before to this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                    page: {
                        type: 'string',
                        description: 'Page to fetch (0 indexed)',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            required: ['content', 'page', 'size', 'totalPages', 'totalSize'],
            type: 'object',
            properties: {
                content: {
                    type: 'array',
                    description: 'List of responses on the current page',
                    items: {
                        required: [
                            'amount',
                            'credit',
                            'currency',
                            'id',
                            'postedDate',
                            'sourceId',
                            'transactionDate',
                            'type',
                        ],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for the Transaction',
                                examples: ['T0000001'],
                            },
                            amount: {
                                type: 'number',
                                description: 'Amount of the transaction in Major Currency Units',
                            },
                            currency: {
                                type: 'string',
                                description: 'Currency of the account in ISO 4217 format',
                                examples: ['GBP'],
                            },
                            description: {
                                type: 'string',
                                description: 'Description of the transaction. Contains Payer/ Payee details and reference',
                            },
                            transactionDate: {
                                type: 'string',
                                description: "Datetime when the transaction took place. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            postedDate: {
                                type: 'string',
                                description: "Datetime when the transaction was posted to the Modulr system. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                format: 'date-time',
                            },
                            credit: {
                                type: 'boolean',
                                description: 'Indicates if the transaction was a Credit or a Debit',
                            },
                            type: {
                                type: 'string',
                                description: 'Enumerated type indicating the type of the transaction\n\n`PI_BACS` `PI_BACS_CONTRA` `PI_FAST` `PI_CHAPS` `PI_DD` `PI_SECT` `PI_SEPA_INST` `PI_REV` `PI_FAST_REV` `PO_FAST` `PO_CHAPS` `PO_DD` `PO_SECT` `PO_SEPA_INST` `PO_REV` `INT_INTERC` `INT_INTRAC` `ADHOC` `FE_TXN` `FE_ACMNT` `FE_ACOPN` `FE_REV` `PO_MASTER` `PI_MASTER` `PO_REV_MASTER` `PO_VISA` `PI_VISA` `PI_SWIFT` `PO_SWIFT`',
                                enum: [
                                    'PI_BACS',
                                    'PI_BACS_CONTRA',
                                    'PI_FAST',
                                    'PI_CHAPS',
                                    'PI_DD',
                                    'PI_SECT',
                                    'PI_SEPA_INST',
                                    'PI_REV',
                                    'PI_FAST_REV',
                                    'PO_FAST',
                                    'PO_CHAPS',
                                    'PO_DD',
                                    'PO_SECT',
                                    'PO_SEPA_INST',
                                    'PO_REV',
                                    'INT_INTERC',
                                    'INT_INTRAC',
                                    'ADHOC',
                                    'FE_TXN',
                                    'FE_ACMNT',
                                    'FE_ACOPN',
                                    'FE_REV',
                                    'PO_MASTER',
                                    'PI_MASTER',
                                    'PO_REV_MASTER',
                                    'PO_VISA',
                                    'PI_VISA',
                                    'PI_SWIFT',
                                    'PO_SWIFT',
                                ],
                            },
                            sourceId: { type: 'string' },
                            sourceExternalReference: { type: 'string' },
                            additionalInfo: {
                                type: 'object',
                                description: 'any extra information available on transaction.',
                                additionalProperties: true,
                            },
                            account: {
                                required: [
                                    'availableBalance',
                                    'balance',
                                    'createdDate',
                                    'currency',
                                    'customerId',
                                    'id',
                                    'identifiers',
                                    'name',
                                    'status',
                                ],
                                type: 'object',
                                properties: {
                                    id: {
                                        type: 'string',
                                        description: 'Unique id for the account',
                                        examples: ['A0000001'],
                                    },
                                    name: { type: 'string', description: 'Name for the account' },
                                    balance: {
                                        type: 'string',
                                        description: "Balance of the account in format 'NN.NN'",
                                        examples: ['10000.0'],
                                    },
                                    availableBalance: {
                                        type: 'string',
                                        description: 'The current available balance of the Account. Calculated by subtracting any pending payments from the current balance',
                                        examples: ['10000.0'],
                                    },
                                    currency: {
                                        type: 'string',
                                        description: 'Currency of the account in ISO 4217 format',
                                        examples: ['GBP'],
                                    },
                                    status: {
                                        type: 'string',
                                        description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`",
                                        enum: ['ACTIVE', 'BLOCKED', 'CLOSED', 'CLIENT_BLOCKED'],
                                        examples: ['ACTIVE'],
                                    },
                                    identifiers: {
                                        type: 'array',
                                        items: {
                                            type: 'object',
                                            properties: {
                                                type: {
                                                    type: 'string',
                                                    enum: ['SCAN', 'IBAN', 'DD', 'INTL'],
                                                    description: '`SCAN` `IBAN` `DD` `INTL`',
                                                },
                                                accountNumber: {
                                                    type: 'string',
                                                    description: 'Bank account Sort Code',
                                                    examples: ['12345678'],
                                                },
                                                sortCode: {
                                                    type: 'string',
                                                    description: 'Bank account Sort Code',
                                                    examples: ['000000'],
                                                },
                                                iban: { type: 'string', examples: ['GB20MODR04001401100000'] },
                                                bic: { type: 'string', examples: ['MODRGB21'] },
                                                currency: { type: 'string', examples: ['GBP'] },
                                                countrySpecificDetails: {
                                                    type: 'object',
                                                    properties: {
                                                        bankName: {
                                                            type: 'string',
                                                            description: 'The name of the destination bank.',
                                                            examples: ['Apple Bank'],
                                                        },
                                                        bankAddress: {
                                                            type: 'string',
                                                            description: 'The address of the destination bank.',
                                                            examples: ['2100 Broadway'],
                                                        },
                                                        bankCity: {
                                                            type: 'string',
                                                            description: 'The city in which the destination bank resides.',
                                                            examples: ['New York City'],
                                                        },
                                                        bankBranchName: {
                                                            type: 'string',
                                                            description: "The name of the destination bank's branch.",
                                                            examples: ['New York'],
                                                        },
                                                        bankBranchCode: {
                                                            type: 'string',
                                                            description: "The code of the destination bank's branch.",
                                                            examples: ['44-04'],
                                                        },
                                                        bankCode: {
                                                            type: 'string',
                                                            description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                                        },
                                                        chineseId: {
                                                            type: 'string',
                                                            description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                                            examples: ['01101201901018889'],
                                                        },
                                                        province: {
                                                            type: 'string',
                                                            description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                                            examples: ['Zhejiang'],
                                                        },
                                                        business: {
                                                            type: 'boolean',
                                                            description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                                            examples: [true],
                                                        },
                                                        bankCodeType: {
                                                            type: 'string',
                                                            description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`",
                                                            enum: ['ABA', 'CHIPS'],
                                                            examples: ['ABA'],
                                                        },
                                                        bankCountry: {
                                                            type: 'string',
                                                            description: 'The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`',
                                                            enum: [
                                                                'AT',
                                                                'BE',
                                                                'BG',
                                                                'CY',
                                                                'CZ',
                                                                'DK',
                                                                'EE',
                                                                'FI',
                                                                'FR',
                                                                'DE',
                                                                'GR',
                                                                'HR',
                                                                'HU',
                                                                'IS',
                                                                'IE',
                                                                'IT',
                                                                'LV',
                                                                'LI',
                                                                'LT',
                                                                'LU',
                                                                'MT',
                                                                'NL',
                                                                'NO',
                                                                'PL',
                                                                'PT',
                                                                'RO',
                                                                'SK',
                                                                'SI',
                                                                'ES',
                                                                'SE',
                                                                'GB',
                                                                'MQ',
                                                                'YT',
                                                                'GP',
                                                                'GF',
                                                                'RE',
                                                                'MF',
                                                                'GI',
                                                                'GG',
                                                                'IM',
                                                                'JE',
                                                                'MC',
                                                                'CH',
                                                                'AD',
                                                                'SM',
                                                                'VA',
                                                                'AX',
                                                                'PM',
                                                                'BL',
                                                                'AF',
                                                                'AL',
                                                                'DZ',
                                                                'AS',
                                                                'AO',
                                                                'AI',
                                                                'AQ',
                                                                'AG',
                                                                'AR',
                                                                'AM',
                                                                'AW',
                                                                'AU',
                                                                'AZ',
                                                                'BS',
                                                                'BH',
                                                                'BD',
                                                                'BB',
                                                                'BY',
                                                                'BZ',
                                                                'BJ',
                                                                'BM',
                                                                'BT',
                                                                'BO',
                                                                'BQ',
                                                                'BA',
                                                                'BW',
                                                                'BV',
                                                                'BR',
                                                                'IO',
                                                                'VG',
                                                                'BN',
                                                                'BF',
                                                                'BI',
                                                                'KH',
                                                                'CM',
                                                                'CA',
                                                                'CV',
                                                                'KY',
                                                                'CF',
                                                                'TD',
                                                                'CL',
                                                                'CN',
                                                                'CX',
                                                                'CC',
                                                                'CO',
                                                                'KM',
                                                                'CK',
                                                                'CR',
                                                                'CU',
                                                                'CW',
                                                                'CD',
                                                                'DJ',
                                                                'DM',
                                                                'DO',
                                                                'TL',
                                                                'EC',
                                                                'EG',
                                                                'SV',
                                                                'GQ',
                                                                'ER',
                                                                'SZ',
                                                                'ET',
                                                                'FK',
                                                                'FO',
                                                                'FJ',
                                                                'PF',
                                                                'TF',
                                                                'GA',
                                                                'GM',
                                                                'GE',
                                                                'GH',
                                                                'GL',
                                                                'GD',
                                                                'GU',
                                                                'GT',
                                                                'GN',
                                                                'GW',
                                                                'GY',
                                                                'HT',
                                                                'HM',
                                                                'HN',
                                                                'HK',
                                                                'IN',
                                                                'ID',
                                                                'IR',
                                                                'IQ',
                                                                'IL',
                                                                'CI',
                                                                'JM',
                                                                'JP',
                                                                'JO',
                                                                'KZ',
                                                                'KE',
                                                                'KI',
                                                                'XK',
                                                                'KW',
                                                                'KG',
                                                                'LA',
                                                                'LB',
                                                                'LS',
                                                                'LR',
                                                                'LY',
                                                                'MO',
                                                                'MG',
                                                                'MW',
                                                                'MY',
                                                                'MV',
                                                                'ML',
                                                                'MH',
                                                                'MR',
                                                                'MU',
                                                                'MX',
                                                                'FM',
                                                                'MD',
                                                                'MN',
                                                                'ME',
                                                                'MS',
                                                                'MA',
                                                                'MZ',
                                                                'MM',
                                                                'NA',
                                                                'NR',
                                                                'NP',
                                                                'AN',
                                                                'NC',
                                                                'NZ',
                                                                'NI',
                                                                'NE',
                                                                'NG',
                                                                'NU',
                                                                'NF',
                                                                'KP',
                                                                'MK',
                                                                'MP',
                                                                'OM',
                                                                'PK',
                                                                'PW',
                                                                'PS',
                                                                'PA',
                                                                'PG',
                                                                'PY',
                                                                'PE',
                                                                'PH',
                                                                'PN',
                                                                'PR',
                                                                'QA',
                                                                'CG',
                                                                'RU',
                                                                'RW',
                                                                'SH',
                                                                'KN',
                                                                'LC',
                                                                'VC',
                                                                'WS',
                                                                'ST',
                                                                'SA',
                                                                'SN',
                                                                'RS',
                                                                'SC',
                                                                'SL',
                                                                'SG',
                                                                'SX',
                                                                'SB',
                                                                'SO',
                                                                'ZA',
                                                                'KR',
                                                                'GS',
                                                                'SS',
                                                                'LK',
                                                                'SD',
                                                                'SR',
                                                                'SY',
                                                                'SJ',
                                                                'TW',
                                                                'TJ',
                                                                'TZ',
                                                                'TH',
                                                                'TG',
                                                                'TK',
                                                                'TO',
                                                                'TT',
                                                                'TN',
                                                                'TR',
                                                                'TM',
                                                                'TC',
                                                                'TV',
                                                                'UG',
                                                                'UA',
                                                                'AE',
                                                                'UM',
                                                                'US',
                                                                'UY',
                                                                'UZ',
                                                                'VU',
                                                                'VE',
                                                                'VN',
                                                                'VI',
                                                                'WF',
                                                                'EH',
                                                                'YE',
                                                                'ZM',
                                                                'ZW',
                                                            ],
                                                            examples: ['US'],
                                                        },
                                                    },
                                                },
                                            },
                                            description: 'Account Identifier',
                                        },
                                    },
                                    customerId: {
                                        type: 'string',
                                        description: 'Unique id of the Customer',
                                        examples: ['C0000001'],
                                    },
                                    customerName: { type: 'string', description: 'Customer Name' },
                                    externalReference: {
                                        type: 'string',
                                        description: 'Your reference for an account',
                                        examples: ['aReference_00001'],
                                    },
                                    accessGroups: {
                                        type: 'array',
                                        description: 'Ids of Access Groups this account belongs to',
                                        items: {
                                            type: 'string',
                                            description: 'Ids of Access Groups this account belongs to',
                                        },
                                    },
                                    createdDate: {
                                        type: 'string',
                                        description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                                        format: 'date-time',
                                    },
                                    directDebit: { type: 'boolean', description: 'Direct Debit Enabled' },
                                    securedFundingLimit: {
                                        type: 'string',
                                        description: 'Limit of funds available below a balance of zero',
                                    },
                                },
                                description: 'Account',
                            },
                        },
                        description: 'Transaction',
                    },
                },
                size: {
                    type: 'integer',
                    description: 'Page size',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalSize: {
                    type: 'integer',
                    description: 'Total count',
                    format: 'int64',
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
                page: {
                    type: 'integer',
                    description: 'Current page number, 0 based; i.e first-page = 0, second-page = 1',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalPages: {
                    type: 'integer',
                    description: 'Total pages',
                    format: 'int32',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                pageStartBalance: {
                    type: 'number',
                    description: 'The sum of the transactions up to this page.\nThis is only present if there are no filters other than page and size defined',
                    examples: [250.3],
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.GetTransactionsByAccount = GetTransactionsByAccount;
const MigrateMandate = {
    body: {
        required: ['originator', 'originatorReference'],
        type: 'object',
        properties: {
            bacsReference: { type: 'string', description: 'Bacs Reference', examples: ['00ABCD'] },
            originatorReference: {
                type: 'string',
                description: 'Originator Reference',
                examples: ['AB1234567'],
            },
            originator: {
                required: ['accountNumber', 'name', 'serviceUserNumber', 'sortCode'],
                type: 'object',
                properties: {
                    sortCode: { pattern: '^\\d{6}$', type: 'string', description: 'Sort Code' },
                    accountNumber: {
                        pattern: '^\\d{8}$',
                        type: 'string',
                        description: 'Account Number',
                        examples: ['01234567'],
                    },
                    name: { type: 'string', description: "Originator's Name", examples: ['Super gym'] },
                    serviceUserNumber: {
                        pattern: '^\\d{6}$',
                        type: 'string',
                        description: 'Service User Number',
                    },
                },
                description: 'Originator',
            },
        },
        description: 'Details of the migrated Mandate',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account id for which Mandate is migrated',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '201': {
            required: ['id'],
            type: 'object',
            properties: { id: { type: 'string', description: 'Migrated Mandate Id' } },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'object',
            properties: {
                field: { type: 'string' },
                code: {
                    type: 'string',
                    enum: [
                        'GENERAL',
                        'BUSINESSRULE',
                        'MFASTATUS',
                        'MFAERROR',
                        'MFATIMEOUT',
                        'MFADEVICEMM',
                        'MFAMESSAGEINVALID',
                        'NOTFOUND',
                        'DUPLICATE',
                        'INVALID',
                        'CONNECTION',
                        'RETRY',
                        'RATELIMIT',
                        'PERMISSION',
                    ],
                    description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                },
                errorCode: { type: 'string' },
                message: { type: 'string' },
                sourceService: { type: 'string' },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.MigrateMandate = MigrateMandate;
const ModifyRule = {
    body: {
        required: ['accountId', 'data', 'name', 'type'],
        type: 'object',
        properties: {
            type: {
                type: 'string',
                description: 'The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}',
                enum: ['SPLIT', 'SWEEP', 'FUNDING'],
            },
            name: {
                maxLength: 25,
                minLength: 0,
                type: 'string',
                description: "Rule's name",
                examples: ['My new rule'],
            },
            accountId: {
                type: 'string',
                description: 'The Account which the Rule is created on.',
                examples: ['A1000001'],
            },
            data: {
                type: 'object',
                properties: {
                    daysToRun: {
                        type: 'array',
                        description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                        items: {
                            type: 'string',
                            description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                            enum: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'],
                        },
                    },
                    frequency: {
                        type: 'string',
                        description: 'Frequency of the rule. Sweep Rule Only',
                        enum: ['Daily'],
                    },
                    destinationId: {
                        type: 'string',
                        description: 'Id of destination beneficiary. e.g. B1000001. Sweep Rule Only',
                    },
                    balanceToLeave: {
                        type: 'number',
                        description: 'Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only',
                    },
                    triggerBalance: {
                        type: 'number',
                        description: 'Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only',
                    },
                    splits: {
                        type: 'array',
                        items: {
                            required: ['destinationId', 'percent'],
                            type: 'object',
                            properties: {
                                destinationId: {
                                    type: 'string',
                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                },
                                percent: {
                                    type: 'string',
                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                },
                            },
                            description: 'Configuration for a Split Rule',
                        },
                    },
                    conditionalSplits: {
                        type: 'array',
                        items: {
                            required: ['destinationId', 'percent'],
                            type: 'object',
                            properties: {
                                destinationId: {
                                    type: 'string',
                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                },
                                percent: {
                                    type: 'string',
                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                },
                            },
                            description: 'Configuration for a Split Rule',
                        },
                    },
                    conditionalSplitConfig: {
                        required: ['conditionAmount', 'destinationId', 'percent'],
                        type: 'object',
                        properties: {
                            destinationId: {
                                type: 'string',
                                description: 'Id of destination beneficiary. e.g. B1000001.',
                            },
                            percent: {
                                type: 'string',
                                description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                            },
                            conditionAmount: {
                                maximum: 2147483647,
                                minimum: 0.01,
                                type: 'number',
                                description: 'Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.',
                            },
                            conditionDone: {
                                type: 'boolean',
                                description: 'Whether the condition amount has been met. e.g. true or false',
                            },
                        },
                        description: 'Configuration for a Conditional Split Rule',
                    },
                    sourceId: {
                        type: 'string',
                        description: 'Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only',
                    },
                },
                description: 'Configuration fields for all types of rules. To be populated where applicable based on rule type.',
            },
        },
        description: 'create rule request',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    ruleId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of Rule to be edited',
                    },
                },
                required: ['ruleId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['accountId', 'data', 'id', 'name', 'type'],
            type: 'object',
            properties: {
                id: { type: 'string', description: 'Unique identifier for a Rule', examples: ['R1000001'] },
                type: {
                    type: 'string',
                    description: 'The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`',
                    enum: ['SPLIT', 'SWEEP', 'FUNDING'],
                },
                name: { type: 'string', description: "Rule's name", examples: ['My new rule'] },
                accountId: {
                    type: 'string',
                    description: 'The Account which the Rule is created on.',
                    examples: ['A1000001'],
                },
                data: {
                    type: 'object',
                    properties: {
                        daysToRun: {
                            type: 'array',
                            description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only',
                            items: {
                                type: 'string',
                                description: 'Day(s) of the week the rule is to run. e.g. ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`',
                                enum: [
                                    'MONDAY',
                                    'TUESDAY',
                                    'WEDNESDAY',
                                    'THURSDAY',
                                    'FRIDAY',
                                    'SATURDAY',
                                    'SUNDAY',
                                ],
                            },
                        },
                        frequency: {
                            type: 'string',
                            description: 'Frequency of the rule. Sweep Rule Only\n\n`Daily`',
                            enum: ['Daily'],
                        },
                        destinationId: {
                            type: 'string',
                            description: 'Id of destination beneficiary. e.g. B1000001. Sweep Rule Only',
                        },
                        balanceToLeave: {
                            type: 'number',
                            description: 'Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only',
                        },
                        triggerBalance: {
                            type: 'number',
                            description: 'Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only',
                        },
                        splits: {
                            type: 'array',
                            items: {
                                required: ['destinationId', 'percent'],
                                type: 'object',
                                properties: {
                                    destinationId: {
                                        type: 'string',
                                        description: 'Id of destination beneficiary. e.g. B1000001.',
                                    },
                                    percent: {
                                        type: 'string',
                                        description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                    },
                                },
                                description: 'Configuration for a Split Rule',
                            },
                        },
                        conditionalSplits: {
                            type: 'array',
                            items: {
                                required: ['destinationId', 'percent'],
                                type: 'object',
                                properties: {
                                    destinationId: {
                                        type: 'string',
                                        description: 'Id of destination beneficiary. e.g. B1000001.',
                                    },
                                    percent: {
                                        type: 'string',
                                        description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                    },
                                },
                                description: 'Configuration for a Split Rule',
                            },
                        },
                        conditionalSplitConfig: {
                            required: ['conditionAmount', 'destinationId', 'percent'],
                            type: 'object',
                            properties: {
                                destinationId: {
                                    type: 'string',
                                    description: 'Id of destination beneficiary. e.g. B1000001.',
                                },
                                percent: {
                                    type: 'string',
                                    description: 'Percentage of payment to be moved to specified destination. e.g. 7.25.',
                                },
                                conditionAmount: {
                                    maximum: 2147483647,
                                    minimum: 0.01,
                                    type: 'number',
                                    description: 'Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.',
                                },
                                conditionDone: {
                                    type: 'boolean',
                                    description: 'Whether the condition amount has been met. e.g. true or false',
                                },
                            },
                            description: 'Configuration for a Conditional Split Rule',
                        },
                        sourceId: {
                            type: 'string',
                            description: 'Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only',
                        },
                    },
                    description: 'Configuration fields for all types of rules. To be populated where applicable based on rule type.',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.ModifyRule = ModifyRule;
const Proceed = {
    body: {
        type: 'object',
        properties: {
            useDuplicate: {
                type: 'boolean',
                description: 'User confirms to proceed with creating payments on a duplicate file',
            },
        },
        description: 'File create payments request body',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    fileId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Payment File ID',
                    },
                },
                required: ['fileId'],
            },
        ],
    },
    response: {
        '201': {
            required: ['batchPaymentId', 'fileId', 'status'],
            type: 'object',
            properties: {
                fileId: {
                    type: 'string',
                    description: 'Unique id of the uploaded file',
                    examples: ['F1100001'],
                },
                status: {
                    type: 'string',
                    description: 'Status of the uploaded file\n\n`SUBMITTED` `INVALID` `VALID` `DUPLICATE` `REJECTED` `ACCEPTED` `PROCESSED`',
                    enum: ['SUBMITTED', 'INVALID', 'VALID', 'DUPLICATE', 'REJECTED', 'ACCEPTED', 'PROCESSED'],
                    examples: ['INVALID'],
                },
                fileName: {
                    type: 'string',
                    description: 'File name of the uploaded file',
                    examples: ['file1'],
                },
                batchPaymentId: {
                    type: 'string',
                    description: 'Unique id for the Batch Payment',
                    examples: ['B1100001'],
                },
            },
            description: 'File create payments response',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.Proceed = Proceed;
const ReinstateMandate = {
    body: {
        required: ['reason'],
        type: 'object',
        properties: {
            reason: {
                maxLength: 300,
                minLength: 0,
                type: 'string',
                description: 'Reason to re-instate the mandate',
            },
        },
        description: 'Details of Mandate reinstatement.',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of Mandate to reinstate.',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.ReinstateMandate = ReinstateMandate;
const RejectCollection = {
    body: {
        required: ['claimBId', 'rejectCode'],
        type: 'object',
        properties: {
            claimBId: {
                pattern: '[A-Za-z]{1}[0-9]{2}([A-Za-z0-9]){5}',
                type: 'string',
                description: 'Collection Claim Business ID',
                examples: ['A123456B'],
            },
            rejectCode: {
                type: 'string',
                enum: [
                    'ADVANCE_NOTICE_DISPUTED',
                    'AMOUNT_DIFFERS',
                    'AMOUNT_NOT_YET_DUE',
                    'PRESENTATION_OVERDUE',
                    'SKIP_DEBIT_ATTEMPT',
                ],
            },
        },
        description: 'Collection reject request',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '400': {
            type: 'object',
            properties: {
                field: { type: 'string' },
                code: {
                    type: 'string',
                    enum: [
                        'GENERAL',
                        'BUSINESSRULE',
                        'MFASTATUS',
                        'MFAERROR',
                        'MFATIMEOUT',
                        'MFADEVICEMM',
                        'MFAMESSAGEINVALID',
                        'NOTFOUND',
                        'DUPLICATE',
                        'INVALID',
                        'CONNECTION',
                        'RETRY',
                        'RATELIMIT',
                        'PERMISSION',
                    ],
                    description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                },
                errorCode: { type: 'string' },
                message: { type: 'string' },
                sourceService: { type: 'string' },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.RejectCollection = RejectCollection;
const RemoveRules = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    rIds: {
                        type: 'array',
                        items: { type: 'string' },
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id(s) of Rules to delete',
                    },
                },
                required: ['rIds'],
            },
        ],
    },
    response: {
        '200': {
            type: 'object',
            additionalProperties: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '207': {
            type: 'object',
            additionalProperties: true,
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.RemoveRules = RemoveRules;
const ReplaceCard = {
    body: {
        required: ['reason'],
        type: 'object',
        properties: {
            reason: {
                type: 'string',
                description: 'The reason for replacing the card. Can be one of DAMAGED (physical only), LOST, STOLEN, RENEW',
                enum: ['STOLEN', 'DAMAGED', 'LOST', 'RENEW'],
                examples: ['STOLEN'],
            },
            externalRef: {
                maxLength: 50,
                minLength: 1,
                pattern: '[\\w-\\s]*',
                type: 'string',
                description: 'Client reference for the newly created card. Maximum of 50 alphanumeric characters (including underscore, hyphen and space).',
            },
            design: {
                required: ['cardRef', 'packagingRef'],
                type: 'object',
                properties: {
                    cardRef: { type: 'string', description: 'Design reference for card' },
                    packagingRef: { type: 'string', description: 'Design reference for card packaging' },
                },
                description: 'Design references for physical card and packaging',
            },
            expiry: {
                type: 'string',
                description: 'ISO 8601 date with year & month components only. The supplied value must be in the future (cannot be the current month) and is _inclusive_ of the specified month. If no expiry is selected, the standard product expiry date will be set',
                examples: ['2026-12'],
            },
            shippingAddress: {
                required: ['addressLine1', 'country', 'postCode', 'postTown'],
                type: 'object',
                properties: {
                    addressLine1: {
                        maxLength: 50,
                        minLength: 1,
                        type: 'string',
                        description: 'First line of address',
                        examples: ['Floor 10'],
                    },
                    addressLine2: {
                        maxLength: 50,
                        minLength: 0,
                        type: 'string',
                        description: 'Second line of address',
                        examples: ['80 George Street'],
                    },
                    postTown: {
                        maxLength: 20,
                        minLength: 1,
                        type: 'string',
                        description: 'Post town',
                        examples: ['EDINBURGH'],
                    },
                    postCode: {
                        maxLength: 10,
                        minLength: 1,
                        type: 'string',
                        description: 'Postcode',
                        examples: ['EH2 3BU'],
                    },
                    country: {
                        type: 'string',
                        description: 'Country (ISO 3166 alpha-2 country code)',
                        enum: [
                            'AT',
                            'BE',
                            'BG',
                            'CY',
                            'CZ',
                            'DK',
                            'EE',
                            'FI',
                            'FR',
                            'DE',
                            'GR',
                            'HR',
                            'HU',
                            'IS',
                            'IE',
                            'IT',
                            'LV',
                            'LI',
                            'LT',
                            'LU',
                            'MT',
                            'NL',
                            'NO',
                            'PL',
                            'PT',
                            'RO',
                            'SK',
                            'SI',
                            'ES',
                            'SE',
                            'AX',
                            'AW',
                            'BL',
                            'CW',
                            'GF',
                            'GL',
                            'GP',
                            'ME',
                            'MF',
                            'MQ',
                            'NC',
                            'PF',
                            'PM',
                            'RE',
                            'SX',
                            'TF',
                            'WF',
                            'YT',
                            'AI',
                            'BM',
                            'FK',
                            'GB',
                            'GG',
                            'GI',
                            'GS',
                            'IO',
                            'JE',
                            'KY',
                            'MS',
                            'PN',
                            'SH',
                            'TC',
                            'VG',
                        ],
                        examples: ['GB'],
                    },
                },
                description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
            },
        },
        description: 'Replacement',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '201': {
            required: ['createdDate', 'cvv2', 'expiry', 'externalRef', 'id', 'maxLimit', 'pan'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Card identifier. Maximum of 10 alphanumeric characters.',
                },
                cvv2: { type: 'string', description: 'Card CVV2 number.' },
                pan: { type: 'string', description: 'Full card PAN.' },
                createdDate: {
                    type: 'string',
                    description: 'The creation date of the card',
                    format: 'date-time',
                },
                externalRef: {
                    type: 'string',
                    description: 'Client reference for the newly created card.',
                },
                expiry: {
                    type: 'string',
                    description: 'An ISO 8601 date with year & month components only',
                    examples: ['2018-12'],
                },
                maxLimit: {
                    type: 'string',
                    description: 'Maximum limit which can be set on this card and is the maximum lifetime spend the card can have',
                    examples: ['4000.0'],
                },
                managementToken: {
                    type: 'string',
                    description: 'Card Management Token required for API users for additional security when managing sensitive card data',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.ReplaceCard = ReplaceCard;
const ResetPin = {
    body: {
        required: ['currentPin', 'newPin'],
        type: 'object',
        properties: {
            currentPin: {
                pattern: '^[0-9]{4}$',
                type: 'string',
                description: "Card's current PIN required to reset",
            },
            newPin: { pattern: '^[0-9]{4}$', type: 'string', description: "Card's new PIN to update" },
        },
        description: 'Reset PIN',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card to reset the PIN for',
                    },
                },
                required: ['id'],
            },
            {
                type: 'object',
                properties: {
                    'X-MOD-CARD-MGMT-TOKEN': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Card Management Token required for API users for additional security when managing sensitive card data',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.ResetPin = ResetPin;
const RetrieveMandates = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    accountId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Account Id',
                    },
                },
                required: ['accountId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['accountId', 'mandatesList'],
            type: 'object',
            properties: {
                accountId: { type: 'string', description: 'Account Id' },
                mandatesList: {
                    type: 'array',
                    description: 'List of Mandates',
                    items: {
                        required: [
                            'auddisIndicator',
                            'mandateId',
                            'mandateReference',
                            'mandateStatus',
                            'merchantAccountNumber',
                            'merchantName',
                            'merchantNumber',
                            'merchantSortCode',
                            'setupDate',
                        ],
                        type: 'object',
                        properties: {
                            mandateId: { type: 'string', description: 'Mandate Id' },
                            merchantNumber: { type: 'string', description: 'Merchant Number' },
                            merchantName: { type: 'string', description: 'Merchant Name' },
                            merchantAccountNumber: { type: 'string', description: 'Merchant Account Number' },
                            merchantSortCode: { type: 'string', description: 'Merchant Sort Code' },
                            mandateStatus: { type: 'string', description: 'Status' },
                            auddisIndicator: {
                                type: 'string',
                                description: 'AUDDIS Flag (AUDDIS / Non-AUDDIS)\n\n`A` `N`',
                                enum: ['A', 'N'],
                            },
                            setupDate: { type: 'string', description: 'Setup date' },
                            mandateReference: { type: 'string', description: 'Mandate Reference' },
                        },
                        description: 'List of Mandates',
                    },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.RetrieveMandates = RetrieveMandates;
const RetrievePin = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card to retrieve the PIN for',
                    },
                },
                required: ['id'],
            },
            {
                type: 'object',
                properties: {
                    'X-MOD-CARD-MGMT-TOKEN': {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Card Management Token required for API users for additional security when managing sensitive card data',
                    },
                },
                required: [],
            },
        ],
    },
    response: {
        '200': {
            type: 'object',
            properties: { pin: { type: 'string', description: 'Card PIN', examples: ['0123'] } },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '403': {
            type: 'object',
            properties: { pin: { type: 'string', description: 'Card PIN', examples: ['0123'] } },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.RetrievePin = RetrievePin;
const ReverseAuthorisation = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    authId: {
                        type: 'string',
                        examples: ['A00000000X'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Card authorisation id to be reversed',
                    },
                },
                required: ['authId'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.ReverseAuthorisation = ReverseAuthorisation;
const SecureResetPin = {
    body: {
        required: ['currentPin', 'newPin'],
        type: 'object',
        properties: {
            currentPin: {
                pattern: '^[0-9]{4}$',
                type: 'string',
                description: "Card's current PIN required to reset",
            },
            newPin: { pattern: '^[0-9]{4}$', type: 'string', description: "Card's new PIN to update" },
        },
        description: 'Reset PIN',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.SecureResetPin = SecureResetPin;
const SendPayment = {
    body: {
        required: ['sourceAccountId'],
        type: 'object',
        properties: {
            sourceAccountId: { type: 'string', description: 'Identifier for the sending Account.' },
            destination: {
                required: ['type'],
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        description: 'Indicates the type of destination. IBAN type is required for international payments.\n\nCan be one of BENEFICIARY, ACCOUNT, SCAN, IBAN',
                        enum: ['BENEFICIARY', 'ACCOUNT', 'SCAN', 'IBAN'],
                        examples: ['SCAN'],
                    },
                    id: {
                        type: 'string',
                        description: 'Identifier for the Payment destination if using ACCOUNT or BENEFICIARY type. Can be either: a) Beneficiary id for an external Payment, b) Account id for a transfer to another Account',
                    },
                    iban: {
                        pattern: '^[a-zA-Z]{2}[0-9]{2}([a-zA-Z0-9]){11,30}$',
                        type: 'string',
                        description: 'International Bank Account Number (IBAN). To be used as the destination identifier when sending ‘IBAN’ type payments',
                        examples: ['GB20MODR00000000000001'],
                    },
                    accountNumber: {
                        pattern: '^[0-9]{8}$',
                        type: 'string',
                        description: 'Account Number of destination account if using SCAN type.',
                        examples: ['12345678'],
                    },
                    sortCode: {
                        pattern: '^[0-9]{6}$',
                        type: 'string',
                        description: 'Sort Code of destination account if using SCAN type.',
                        examples: ['000000'],
                    },
                    name: {
                        maxLength: 100,
                        minLength: 0,
                        pattern: "^([^\\p{L}0-9]*?[\\p{L}0-9]){1,}['\\.\\-\\/&\\s]*",
                        type: 'string',
                        description: 'Name to use if a new beneficiary is created, and for using as the payee name if SCAN or IBAN types are specified for the destination',
                        examples: ['Test'],
                    },
                    address: {
                        required: ['addressLine1', 'postTown'],
                        type: 'object',
                        properties: {
                            addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                            addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                            postTown: { maxLength: 50, minLength: 0, type: 'string' },
                            postCode: { maxLength: 10, type: 'string' },
                            country: {
                                type: 'string',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'GB',
                                    'MQ',
                                    'YT',
                                    'GP',
                                    'GF',
                                    'RE',
                                    'MF',
                                    'GI',
                                    'GG',
                                    'IM',
                                    'JE',
                                    'MC',
                                    'CH',
                                    'AD',
                                    'SM',
                                    'VA',
                                    'AX',
                                    'PM',
                                    'BL',
                                    'AF',
                                    'AL',
                                    'DZ',
                                    'AS',
                                    'AO',
                                    'AI',
                                    'AQ',
                                    'AG',
                                    'AR',
                                    'AM',
                                    'AW',
                                    'AU',
                                    'AZ',
                                    'BS',
                                    'BH',
                                    'BD',
                                    'BB',
                                    'BY',
                                    'BZ',
                                    'BJ',
                                    'BM',
                                    'BT',
                                    'BO',
                                    'BQ',
                                    'BA',
                                    'BW',
                                    'BV',
                                    'BR',
                                    'IO',
                                    'VG',
                                    'BN',
                                    'BF',
                                    'BI',
                                    'KH',
                                    'CM',
                                    'CA',
                                    'CV',
                                    'KY',
                                    'CF',
                                    'TD',
                                    'CL',
                                    'CN',
                                    'CX',
                                    'CC',
                                    'CO',
                                    'KM',
                                    'CK',
                                    'CR',
                                    'CU',
                                    'CW',
                                    'CD',
                                    'DJ',
                                    'DM',
                                    'DO',
                                    'TL',
                                    'EC',
                                    'EG',
                                    'SV',
                                    'GQ',
                                    'ER',
                                    'SZ',
                                    'ET',
                                    'FK',
                                    'FO',
                                    'FJ',
                                    'PF',
                                    'TF',
                                    'GA',
                                    'GM',
                                    'GE',
                                    'GH',
                                    'GL',
                                    'GD',
                                    'GU',
                                    'GT',
                                    'GN',
                                    'GW',
                                    'GY',
                                    'HT',
                                    'HM',
                                    'HN',
                                    'HK',
                                    'IN',
                                    'ID',
                                    'IR',
                                    'IQ',
                                    'IL',
                                    'CI',
                                    'JM',
                                    'JP',
                                    'JO',
                                    'KZ',
                                    'KE',
                                    'KI',
                                    'XK',
                                    'KW',
                                    'KG',
                                    'LA',
                                    'LB',
                                    'LS',
                                    'LR',
                                    'LY',
                                    'MO',
                                    'MG',
                                    'MW',
                                    'MY',
                                    'MV',
                                    'ML',
                                    'MH',
                                    'MR',
                                    'MU',
                                    'MX',
                                    'FM',
                                    'MD',
                                    'MN',
                                    'ME',
                                    'MS',
                                    'MA',
                                    'MZ',
                                    'MM',
                                    'NA',
                                    'NR',
                                    'NP',
                                    'AN',
                                    'NC',
                                    'NZ',
                                    'NI',
                                    'NE',
                                    'NG',
                                    'NU',
                                    'NF',
                                    'KP',
                                    'MK',
                                    'MP',
                                    'OM',
                                    'PK',
                                    'PW',
                                    'PS',
                                    'PA',
                                    'PG',
                                    'PY',
                                    'PE',
                                    'PH',
                                    'PN',
                                    'PR',
                                    'QA',
                                    'CG',
                                    'RU',
                                    'RW',
                                    'SH',
                                    'KN',
                                    'LC',
                                    'VC',
                                    'WS',
                                    'ST',
                                    'SA',
                                    'SN',
                                    'RS',
                                    'SC',
                                    'SL',
                                    'SG',
                                    'SX',
                                    'SB',
                                    'SO',
                                    'ZA',
                                    'KR',
                                    'GS',
                                    'SS',
                                    'LK',
                                    'SD',
                                    'SR',
                                    'SY',
                                    'SJ',
                                    'TW',
                                    'TJ',
                                    'TZ',
                                    'TH',
                                    'TG',
                                    'TK',
                                    'TO',
                                    'TT',
                                    'TN',
                                    'TR',
                                    'TM',
                                    'TC',
                                    'TV',
                                    'UG',
                                    'UA',
                                    'AE',
                                    'UM',
                                    'US',
                                    'UY',
                                    'UZ',
                                    'VU',
                                    'VE',
                                    'VN',
                                    'VI',
                                    'WF',
                                    'EH',
                                    'YE',
                                    'ZM',
                                    'ZW',
                                ],
                            },
                            countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                        },
                        description: 'Optional address. Mandatory for international payments.',
                    },
                    birthdate: {
                        type: 'string',
                        description: "The destination beneficiary's date of birth. Format: yyyy-MM-dd",
                        format: 'date',
                        examples: ['2000-01-01'],
                    },
                    emailAddress: {
                        pattern: '[^\\s@]+@[^\\s@]+\\.[^\\s@]+',
                        type: 'string',
                        description: "The destination beneficiary's email address",
                    },
                    phoneNumber: {
                        type: 'string',
                        description: "The destination beneficiary's phone number",
                    },
                    bic: {
                        type: 'string',
                        description: "The destination beneficiary's SWIFT BIC (Bank Identifier Code). Only to be used for international payments.",
                    },
                    countrySpecificDetails: {
                        type: 'object',
                        properties: {
                            bankName: {
                                type: 'string',
                                description: 'The name of the destination bank.',
                                examples: ['Apple Bank'],
                            },
                            bankAddress: {
                                type: 'string',
                                description: 'The address of the destination bank.',
                                examples: ['2100 Broadway'],
                            },
                            bankCity: {
                                type: 'string',
                                description: 'The city in which the destination bank resides.',
                                examples: ['New York City'],
                            },
                            bankBranchName: {
                                type: 'string',
                                description: "The name of the destination bank's branch.",
                                examples: ['New York'],
                            },
                            bankBranchCode: {
                                type: 'string',
                                description: "The code of the destination bank's branch.",
                                examples: ['44-04'],
                            },
                            bankCode: {
                                type: 'string',
                                description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                            },
                            chineseId: {
                                type: 'string',
                                description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                examples: ['01101201901018889'],
                            },
                            province: {
                                type: 'string',
                                description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                examples: ['Zhejiang'],
                            },
                            business: {
                                type: 'boolean',
                                description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                examples: [true],
                            },
                            bankCodeType: {
                                type: 'string',
                                description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                enum: ['ABA', 'CHIPS'],
                                examples: ['ABA'],
                            },
                            bankCountry: {
                                type: 'string',
                                description: 'The country in which the destination bank resides. Mandatory for international payments.',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'GB',
                                    'MQ',
                                    'YT',
                                    'GP',
                                    'GF',
                                    'RE',
                                    'MF',
                                    'GI',
                                    'GG',
                                    'IM',
                                    'JE',
                                    'MC',
                                    'CH',
                                    'AD',
                                    'SM',
                                    'VA',
                                    'AX',
                                    'PM',
                                    'BL',
                                    'AF',
                                    'AL',
                                    'DZ',
                                    'AS',
                                    'AO',
                                    'AI',
                                    'AQ',
                                    'AG',
                                    'AR',
                                    'AM',
                                    'AW',
                                    'AU',
                                    'AZ',
                                    'BS',
                                    'BH',
                                    'BD',
                                    'BB',
                                    'BY',
                                    'BZ',
                                    'BJ',
                                    'BM',
                                    'BT',
                                    'BO',
                                    'BQ',
                                    'BA',
                                    'BW',
                                    'BV',
                                    'BR',
                                    'IO',
                                    'VG',
                                    'BN',
                                    'BF',
                                    'BI',
                                    'KH',
                                    'CM',
                                    'CA',
                                    'CV',
                                    'KY',
                                    'CF',
                                    'TD',
                                    'CL',
                                    'CN',
                                    'CX',
                                    'CC',
                                    'CO',
                                    'KM',
                                    'CK',
                                    'CR',
                                    'CU',
                                    'CW',
                                    'CD',
                                    'DJ',
                                    'DM',
                                    'DO',
                                    'TL',
                                    'EC',
                                    'EG',
                                    'SV',
                                    'GQ',
                                    'ER',
                                    'SZ',
                                    'ET',
                                    'FK',
                                    'FO',
                                    'FJ',
                                    'PF',
                                    'TF',
                                    'GA',
                                    'GM',
                                    'GE',
                                    'GH',
                                    'GL',
                                    'GD',
                                    'GU',
                                    'GT',
                                    'GN',
                                    'GW',
                                    'GY',
                                    'HT',
                                    'HM',
                                    'HN',
                                    'HK',
                                    'IN',
                                    'ID',
                                    'IR',
                                    'IQ',
                                    'IL',
                                    'CI',
                                    'JM',
                                    'JP',
                                    'JO',
                                    'KZ',
                                    'KE',
                                    'KI',
                                    'XK',
                                    'KW',
                                    'KG',
                                    'LA',
                                    'LB',
                                    'LS',
                                    'LR',
                                    'LY',
                                    'MO',
                                    'MG',
                                    'MW',
                                    'MY',
                                    'MV',
                                    'ML',
                                    'MH',
                                    'MR',
                                    'MU',
                                    'MX',
                                    'FM',
                                    'MD',
                                    'MN',
                                    'ME',
                                    'MS',
                                    'MA',
                                    'MZ',
                                    'MM',
                                    'NA',
                                    'NR',
                                    'NP',
                                    'AN',
                                    'NC',
                                    'NZ',
                                    'NI',
                                    'NE',
                                    'NG',
                                    'NU',
                                    'NF',
                                    'KP',
                                    'MK',
                                    'MP',
                                    'OM',
                                    'PK',
                                    'PW',
                                    'PS',
                                    'PA',
                                    'PG',
                                    'PY',
                                    'PE',
                                    'PH',
                                    'PN',
                                    'PR',
                                    'QA',
                                    'CG',
                                    'RU',
                                    'RW',
                                    'SH',
                                    'KN',
                                    'LC',
                                    'VC',
                                    'WS',
                                    'ST',
                                    'SA',
                                    'SN',
                                    'RS',
                                    'SC',
                                    'SL',
                                    'SG',
                                    'SX',
                                    'SB',
                                    'SO',
                                    'ZA',
                                    'KR',
                                    'GS',
                                    'SS',
                                    'LK',
                                    'SD',
                                    'SR',
                                    'SY',
                                    'SJ',
                                    'TW',
                                    'TJ',
                                    'TZ',
                                    'TH',
                                    'TG',
                                    'TK',
                                    'TO',
                                    'TT',
                                    'TN',
                                    'TR',
                                    'TM',
                                    'TC',
                                    'TV',
                                    'UG',
                                    'UA',
                                    'AE',
                                    'UM',
                                    'US',
                                    'UY',
                                    'UZ',
                                    'VU',
                                    'VE',
                                    'VN',
                                    'VI',
                                    'WF',
                                    'EH',
                                    'YE',
                                    'ZM',
                                    'ZW',
                                ],
                                examples: ['US'],
                            },
                        },
                        description: "Further details required, depending on the destination's country",
                    },
                },
                description: 'Destination of the Payment',
            },
            currency: {
                type: 'string',
                description: 'Currency of the account in ISO 4217 format. Default is GBP',
                examples: ['GBP'],
            },
            amount: {
                maximum: 2147483647,
                minimum: 0.01,
                type: 'number',
                description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP",
                examples: [100],
            },
            reference: {
                type: 'string',
                description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters that are not all the same (up to 140 characters for currencies other than GBP). Can contain alphanumeric, '-', '.', '&', '/' and space.",
                examples: ['Salary'],
            },
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w-\\s]*',
                type: 'string',
                description: 'Your reference for this payment',
                examples: ['aReference_00001'],
            },
            endToEndReference: {
                type: 'string',
                description: 'Optional end to end reference. For international payments, Modulr payment ID will be used as end-to-end reference.',
                examples: ['aReference_00001'],
            },
            regulatoryReporting: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        description: 'Regulatory Reporting Type',
                        enum: ['CRED', 'DEBT', 'BOTH'],
                        examples: ['CRED'],
                    },
                    regulatoryAuthority: {
                        type: 'object',
                        properties: {
                            authorityName: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'Authority name. Maximum of 70 characters.',
                                examples: ['Financial Conduct Authority'],
                            },
                            authorityCountry: {
                                type: 'string',
                                description: 'ISO 3166 country code of the ultimate payers address',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'GB',
                                    'MQ',
                                    'YT',
                                    'GP',
                                    'GF',
                                    'RE',
                                    'MF',
                                    'GI',
                                    'GG',
                                    'IM',
                                    'JE',
                                    'MC',
                                    'CH',
                                    'AD',
                                    'SM',
                                    'VA',
                                    'AX',
                                    'PM',
                                    'BL',
                                    'AF',
                                    'AL',
                                    'DZ',
                                    'AS',
                                    'AO',
                                    'AI',
                                    'AQ',
                                    'AG',
                                    'AR',
                                    'AM',
                                    'AW',
                                    'AU',
                                    'AZ',
                                    'BS',
                                    'BH',
                                    'BD',
                                    'BB',
                                    'BY',
                                    'BZ',
                                    'BJ',
                                    'BM',
                                    'BT',
                                    'BO',
                                    'BQ',
                                    'BA',
                                    'BW',
                                    'BV',
                                    'BR',
                                    'IO',
                                    'VG',
                                    'BN',
                                    'BF',
                                    'BI',
                                    'KH',
                                    'CM',
                                    'CA',
                                    'CV',
                                    'KY',
                                    'CF',
                                    'TD',
                                    'CL',
                                    'CN',
                                    'CX',
                                    'CC',
                                    'CO',
                                    'KM',
                                    'CK',
                                    'CR',
                                    'CU',
                                    'CW',
                                    'CD',
                                    'DJ',
                                    'DM',
                                    'DO',
                                    'TL',
                                    'EC',
                                    'EG',
                                    'SV',
                                    'GQ',
                                    'ER',
                                    'SZ',
                                    'ET',
                                    'FK',
                                    'FO',
                                    'FJ',
                                    'PF',
                                    'TF',
                                    'GA',
                                    'GM',
                                    'GE',
                                    'GH',
                                    'GL',
                                    'GD',
                                    'GU',
                                    'GT',
                                    'GN',
                                    'GW',
                                    'GY',
                                    'HT',
                                    'HM',
                                    'HN',
                                    'HK',
                                    'IN',
                                    'ID',
                                    'IR',
                                    'IQ',
                                    'IL',
                                    'CI',
                                    'JM',
                                    'JP',
                                    'JO',
                                    'KZ',
                                    'KE',
                                    'KI',
                                    'XK',
                                    'KW',
                                    'KG',
                                    'LA',
                                    'LB',
                                    'LS',
                                    'LR',
                                    'LY',
                                    'MO',
                                    'MG',
                                    'MW',
                                    'MY',
                                    'MV',
                                    'ML',
                                    'MH',
                                    'MR',
                                    'MU',
                                    'MX',
                                    'FM',
                                    'MD',
                                    'MN',
                                    'ME',
                                    'MS',
                                    'MA',
                                    'MZ',
                                    'MM',
                                    'NA',
                                    'NR',
                                    'NP',
                                    'AN',
                                    'NC',
                                    'NZ',
                                    'NI',
                                    'NE',
                                    'NG',
                                    'NU',
                                    'NF',
                                    'KP',
                                    'MK',
                                    'MP',
                                    'OM',
                                    'PK',
                                    'PW',
                                    'PS',
                                    'PA',
                                    'PG',
                                    'PY',
                                    'PE',
                                    'PH',
                                    'PN',
                                    'PR',
                                    'QA',
                                    'CG',
                                    'RU',
                                    'RW',
                                    'SH',
                                    'KN',
                                    'LC',
                                    'VC',
                                    'WS',
                                    'ST',
                                    'SA',
                                    'SN',
                                    'RS',
                                    'SC',
                                    'SL',
                                    'SG',
                                    'SX',
                                    'SB',
                                    'SO',
                                    'ZA',
                                    'KR',
                                    'GS',
                                    'SS',
                                    'LK',
                                    'SD',
                                    'SR',
                                    'SY',
                                    'SJ',
                                    'TW',
                                    'TJ',
                                    'TZ',
                                    'TH',
                                    'TG',
                                    'TK',
                                    'TO',
                                    'TT',
                                    'TN',
                                    'TR',
                                    'TM',
                                    'TC',
                                    'TV',
                                    'UG',
                                    'UA',
                                    'AE',
                                    'UM',
                                    'US',
                                    'UY',
                                    'UZ',
                                    'VU',
                                    'VE',
                                    'VN',
                                    'VI',
                                    'WF',
                                    'EH',
                                    'YE',
                                    'ZM',
                                    'ZW',
                                ],
                                examples: ['GB'],
                            },
                        },
                        description: 'Regulatory authority',
                    },
                    structuredRegulatoryReporting: {
                        type: 'object',
                        properties: {
                            code: { maxLength: 3, minLength: 0, type: 'string' },
                            amount: {
                                maximum: 2147483647,
                                minimum: 0.01,
                                type: 'number',
                                description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP",
                                examples: [100],
                            },
                            currencyCode: {
                                type: 'string',
                                description: 'Currency of the account in ISO 4217 format. Default is GBP',
                                examples: ['GBP'],
                            },
                            information: { maxLength: 35, minLength: 0, type: 'string' },
                        },
                        description: 'Structured regulatory reporting',
                    },
                },
                description: 'Regulatory reporting',
            },
            paymentDate: {
                type: 'string',
                description: "The future date on which to make the payment. Date format 'yyyy-MM-dd'.\n\nNot applicable for international payments which will be submitted on date of submission or next working day, in line with cut-offs.",
                examples: ['2017-01-28'],
            },
            overseasPaymentDetail: {
                type: 'object',
                properties: {
                    ultimatePayer: {
                        required: ['address', 'name'],
                        type: 'object',
                        properties: {
                            name: {
                                maxLength: 70,
                                minLength: 0,
                                type: 'string',
                                description: 'Name of the ultimate payer',
                            },
                            address: {
                                required: ['country'],
                                type: 'object',
                                properties: {
                                    addressLine1: {
                                        maxLength: 70,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'First line of the ultimate payers address',
                                        examples: ['2nd Floor'],
                                    },
                                    addressLine2: {
                                        maxLength: 70,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Second line of the ultimate payers address',
                                        examples: ['123 High Street'],
                                    },
                                    postTown: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Postal town of the ultimate payers address',
                                        examples: ['Edinburgh'],
                                    },
                                    postCode: {
                                        maxLength: 16,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Post code of the ultimate payers address',
                                        examples: ['AB12 3XX'],
                                    },
                                    country: {
                                        type: 'string',
                                        description: 'ISO 3166 country code of the ultimate payers address',
                                        examples: ['GB'],
                                    },
                                },
                            },
                            birthDetails: {
                                type: 'object',
                                properties: {
                                    dateOfBirth: {
                                        pattern: '^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$',
                                        type: 'string',
                                        description: 'Date of birth in ISO 8601 format of the ultimate payer',
                                        examples: ['1978-01-01'],
                                    },
                                    cityOfBirth: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'City of birth of the ultimate payer',
                                        examples: ['Edinburgh'],
                                    },
                                    countryOfBirth: {
                                        type: 'string',
                                        description: 'ISO 3166 country code of the ultimate payers country of birth',
                                        examples: ['GB'],
                                    },
                                },
                                description: "Birth details of a person. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory",
                            },
                            officialIdentification: {
                                type: 'object',
                                properties: {
                                    drivingLicenceNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Driving licence number',
                                        examples: ['JONES849339TS8AD'],
                                    },
                                    customerNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Customer number',
                                        examples: ['23547326547632'],
                                    },
                                    socialSecurityNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Social security number or equivalent',
                                        examples: ['1110000000022AB'],
                                    },
                                    passportNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Passport number',
                                        examples: ['123456789'],
                                    },
                                    idCardNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'National ID card number',
                                        examples: ['123456789'],
                                    },
                                    otherIdNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Other ID number',
                                        examples: ['123456789'],
                                    },
                                },
                                description: "Official identification for a person. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory",
                            },
                            officialIdDetailOrgs: {
                                type: 'object',
                                properties: {
                                    bankPartyIdentification: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Bank party identification',
                                        examples: ['12345'],
                                    },
                                    centralBankIdNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Central bank identification number',
                                        examples: ['678910'],
                                    },
                                    clearingIdNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Clearing identification Number',
                                        examples: ['xx15402'],
                                    },
                                    certificateOfIncorporationNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Certification of the incorporation number',
                                        examples: ['1100010'],
                                    },
                                    countryIdCode: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Country identification code',
                                        examples: ['111111'],
                                    },
                                    customerNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Customer number',
                                        examples: ['00221133'],
                                    },
                                    dataUniversalNumberingSystem: {
                                        pattern: '^[0-9]{9,9}?$',
                                        type: 'string',
                                        description: 'Data universal numbering system',
                                        examples: ['002211330'],
                                    },
                                    employerIdNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Employer identification number',
                                        examples: ['00221133'],
                                    },
                                    gs1glnIdentifier: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'GS1GLN identifier',
                                        examples: ['00221133'],
                                    },
                                    sirenCode: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'SIREN code',
                                        examples: ['00221133'],
                                    },
                                    siretCode: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'SIRET code',
                                        examples: ['00221133'],
                                    },
                                    taxIdNumber: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Tax identification number',
                                        examples: ['00221133'],
                                    },
                                    bicIdentifier: {
                                        pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$',
                                        type: 'string',
                                        description: 'BICI identification',
                                        examples: ['MGALODJAO7A'],
                                    },
                                    ibeiIdentifier: {
                                        pattern: '^[A-Z]{2,2}[B-DF-HJ-NP-TV-XZ0-9]{7,7}[0-9]{1,1}?$',
                                        type: 'string',
                                        description: 'IBEI identification',
                                        examples: ['HIZFTMTT59'],
                                    },
                                    beiIdentifier: {
                                        pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$',
                                        type: 'string',
                                        description: 'BEI identification',
                                        examples: ['MHIHISVZUMH'],
                                    },
                                    eanglnIdentifier: {
                                        pattern: '^[0-9]{13,13}?$',
                                        type: 'string',
                                        description: 'EANGLN identification',
                                        examples: ['7516164953429'],
                                    },
                                    chipsUniversalIdentifier: {
                                        pattern: '^CH[0-9]{6,6}?$',
                                        type: 'string',
                                        description: 'CHIPS universal identification',
                                        examples: ['CH157373'],
                                    },
                                    genericIdentification3: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Generic identification 3',
                                        examples: ['123456788'],
                                    },
                                    genericIdentificationIssr: {
                                        maxLength: 35,
                                        minLength: 0,
                                        type: 'string',
                                        description: 'Generic identification issr',
                                        examples: ['13143225'],
                                    },
                                },
                                description: "Organisation's official identification. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory",
                            },
                            overseasAccountIdentifier: {
                                type: 'object',
                                properties: {
                                    iban: {
                                        pattern: '^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}$',
                                        type: 'string',
                                        description: 'International Bank Account Number (IBAN)',
                                        examples: ['GB20MODR00000000000001'],
                                    },
                                    bban: {
                                        pattern: '^[a-zA-Z0-9]{1,30}$',
                                        type: 'string',
                                        description: 'Basic Bank Account Number (BBAN)',
                                        examples: ['NWBK60161331926819'],
                                    },
                                    upic: {
                                        pattern: '^\\d{8,17}$',
                                        type: 'string',
                                        description: 'Universal Payment Identification Code (UPIC)',
                                        examples: ['987654321'],
                                    },
                                    otherAccountNumber: {
                                        pattern: '^[a-zA-Z0-9]{1,34}$',
                                        type: 'string',
                                        description: 'Other Account ID',
                                        examples: ['987654321'],
                                    },
                                },
                            },
                            bic: {
                                pattern: '^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$',
                                type: 'string',
                                description: "Destination beneficiary's BIC/Swift Code.",
                                examples: ['MODRDEFF123'],
                            },
                        },
                    },
                    originalPaymentDetails: {
                        required: ['amount', 'currency', 'exchangeRate'],
                        type: 'object',
                        properties: {
                            amount: {
                                type: 'number',
                                description: 'Amount of currency that the payment is in',
                                examples: [1000.45],
                            },
                            exchangeRate: { type: 'number', description: 'Exchange rate', examples: [1.45] },
                            currency: {
                                type: 'string',
                                description: 'ISO 4217 currency code that the amount is in',
                                examples: ['GBP'],
                            },
                        },
                    },
                    chargeDetails: {
                        required: ['amount', 'bearer', 'currency'],
                        type: 'object',
                        properties: {
                            bearer: {
                                type: 'string',
                                description: 'Information about bearer of the charges. Its can be Creditor, Debtor or shared between both',
                                enum: ['CRED', 'DEBT', 'SHAR'],
                                examples: ['CRED'],
                            },
                            amount: {
                                type: 'number',
                                description: 'Amount of the charges. Max allowed is 999999999999.99',
                                examples: [100],
                            },
                            currency: {
                                type: 'string',
                                description: 'Currency of charge. Should be ISO Standard currency',
                                enum: [
                                    'GBP',
                                    'EUR',
                                    'AED',
                                    'AFN',
                                    'ALL',
                                    'AMD',
                                    'ANG',
                                    'AOA',
                                    'ARS',
                                    'AUD',
                                    'AWG',
                                    'AZN',
                                    'BAM',
                                    'BBD',
                                    'BDT',
                                    'BGN',
                                    'BHD',
                                    'BIF',
                                    'BMD',
                                    'BND',
                                    'BOB',
                                    'BOV',
                                    'BRL',
                                    'BSD',
                                    'BTN',
                                    'BWP',
                                    'BYN',
                                    'BZD',
                                    'CAD',
                                    'CDF',
                                    'CHE',
                                    'CHF',
                                    'CHW',
                                    'CLF',
                                    'CLP',
                                    'CNY',
                                    'COP',
                                    'COU',
                                    'CRC',
                                    'CUC',
                                    'CUP',
                                    'CVE',
                                    'CZK',
                                    'DJF',
                                    'DKK',
                                    'DOP',
                                    'DZD',
                                    'EGP',
                                    'ERN',
                                    'ETB',
                                    'FJD',
                                    'FKP',
                                    'GEL',
                                    'GHS',
                                    'GIP',
                                    'GMD',
                                    'GNF',
                                    'GTQ',
                                    'GYD',
                                    'HKD',
                                    'HNL',
                                    'HRK',
                                    'HTG',
                                    'HUF',
                                    'IDR',
                                    'ILS',
                                    'INR',
                                    'IQD',
                                    'IRR',
                                    'ISK',
                                    'JMD',
                                    'JOD',
                                    'JPY',
                                    'KES',
                                    'KGS',
                                    'KHR',
                                    'KMF',
                                    'KPW',
                                    'KRW',
                                    'KWD',
                                    'KYD',
                                    'KZT',
                                    'LAK',
                                    'LBP',
                                    'LKR',
                                    'LRD',
                                    'LSL',
                                    'LYD',
                                    'MAD',
                                    'MDL',
                                    'MGA',
                                    'MKD',
                                    'MMK',
                                    'MNT',
                                    'MOP',
                                    'MRU',
                                    'MUR',
                                    'MVR',
                                    'MWK',
                                    'MXN',
                                    'MXV',
                                    'MYR',
                                    'MZN',
                                    'NAD',
                                    'NGN',
                                    'NIO',
                                    'NOK',
                                    'NPR',
                                    'NZD',
                                    'OMR',
                                    'PAB',
                                    'PEN',
                                    'PGK',
                                    'PHP',
                                    'PKR',
                                    'PLN',
                                    'PYG',
                                    'QAR',
                                    'RON',
                                    'RSD',
                                    'RUB',
                                    'RWF',
                                    'SAR',
                                    'SBD',
                                    'SCR',
                                    'SDG',
                                    'SEK',
                                    'SGD',
                                    'SLE',
                                    'SLL',
                                    'SOS',
                                    'SRD',
                                    'SSP',
                                    'STN',
                                    'SVC',
                                    'SYP',
                                    'SZL',
                                    'SHP',
                                    'THB',
                                    'TJS',
                                    'TMT',
                                    'TND',
                                    'TOP',
                                    'TRY',
                                    'TTD',
                                    'TWD',
                                    'TZS',
                                    'UAH',
                                    'UGX',
                                    'USD',
                                    'USN',
                                    'UYI',
                                    'UYU',
                                    'UYW',
                                    'UZS',
                                    'VES',
                                    'VND',
                                    'VUV',
                                    'WST',
                                    'XAF',
                                    'XAG',
                                    'XAU',
                                    'XBA',
                                    'XBB',
                                    'XBC',
                                    'XBD',
                                    'XCD',
                                    'XDR',
                                    'XOF',
                                    'XPD',
                                    'XPF',
                                    'XPT',
                                    'XSU',
                                    'XTS',
                                    'XUA',
                                    'XXX',
                                    'YER',
                                    'ZAR',
                                    'ZMW',
                                    'ZWL',
                                ],
                                examples: ['GBP'],
                            },
                        },
                    },
                    additionalRemittanceInformation: { maxLength: 140, minLength: 0, type: 'string' },
                },
                description: 'Details relating to payment originated overseas.\n\nNot applicable for international payments - all international transactions must originate from the Modulr account creating the payment request.',
            },
            fxQuoteId: {
                type: 'string',
                description: "FX quote ID related to this payment. If supplied, neither 'amount' nor 'currency' should be supplied.",
                deprecated: true,
                examples: ['Q0000001'],
            },
        },
        description: 'Details of Payment request',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            required: ['details', 'externalReference', 'id', 'status'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique id for the Payment request. 10 characters long',
                    examples: ['P000001ABC'],
                },
                status: {
                    type: 'string',
                    description: 'Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`',
                    enum: [
                        'SUBMITTED',
                        'SCREENING_REQ',
                        'VALIDATED',
                        'PENDING_FOR_DATE',
                        'PENDING_FOR_FUNDS',
                        'EXT_PROC',
                        'PROCESSED',
                        'RECONCILED',
                        'ER_INVALID',
                        'ER_EXTCONN',
                        'ER_EXTSYS',
                        'ER_EXPIRED',
                        'ER_GENERAL',
                        'ER_BATCH',
                        'EXT_SENT',
                        'UNALLOCATED',
                        'HELD',
                        'RETURNED',
                        'CANCELLED',
                        'REPROCESSING',
                        'VOID',
                        'CLEARING',
                        'HELD_IN_SUSPENSE',
                    ],
                    examples: ['VALIDATED'],
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'",
                    format: 'date-time',
                },
                externalReference: {
                    type: 'string',
                    description: 'external reference if provided',
                    examples: ['aReference_00001'],
                },
                details: {
                    type: 'object',
                    description: 'All the details of the payment from the original request',
                    additionalProperties: true,
                },
                approvalStatus: {
                    type: 'string',
                    description: 'Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`',
                    enum: ['NOTNEEDED', 'PENDING', 'APPROVED', 'REJECTED', 'DELETED'],
                    examples: ['NOTNEEDED'],
                },
                message: { type: 'string', description: 'Information about payment (if available)' },
                schemeInfo: {
                    type: 'object',
                    properties: {
                        name: { type: 'string' },
                        id: { type: 'string' },
                        message: { type: 'string' },
                        responseCode: { type: 'string' },
                    },
                    description: 'Information with regards to the payment scheme',
                },
            },
            description: 'Full details of all payments in this batch',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.SendPayment = SendPayment;
const SettleAuthorisation = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    authId: {
                        type: 'string',
                        examples: ['A00000000X'],
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Card authorisation id',
                    },
                },
                required: ['authId'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.SettleAuthorisation = SettleAuthorisation;
const Status = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    fileId: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Payment File ID',
                    },
                },
                required: ['fileId'],
            },
        ],
    },
    response: {
        '200': {
            required: ['status'],
            type: 'object',
            properties: {
                status: {
                    type: 'string',
                    description: 'Status of the uploaded file\n\n`SUBMITTED` `INVALID` `VALID` `DUPLICATE` `REJECTED` `ACCEPTED` `PROCESSED`',
                    enum: ['SUBMITTED', 'INVALID', 'VALID', 'DUPLICATE', 'REJECTED', 'ACCEPTED', 'PROCESSED'],
                    examples: ['INVALID'],
                },
                fileName: {
                    type: 'string',
                    description: 'File name of the uploaded file',
                    examples: ['file1'],
                },
                numTransactions: {
                    type: 'integer',
                    description: 'Total number of transactions within file',
                    format: 'int32',
                    examples: [1000],
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                totalAmount: {
                    type: 'number',
                    description: "Sum of all transaction's amount within file",
                    examples: [1539.81],
                },
                errors: {
                    type: 'array',
                    description: 'If invalid holds the validation errors',
                    items: {
                        required: ['errorMessage'],
                        type: 'object',
                        properties: {
                            errorMessage: {
                                type: 'string',
                                description: 'Error message indicating a certain validation error occurred',
                                examples: ['Processing date is required'],
                            },
                            invalidAccounts: {
                                type: 'array',
                                description: 'List of a invalid account that were effected by the validation',
                                items: {
                                    type: 'string',
                                    description: 'List of a invalid account that were effected by the validation',
                                },
                            },
                        },
                        description: 'If invalid holds the validation errors',
                        examples: ['Failed parsing'],
                    },
                    examples: ['Failed parsing'],
                },
            },
            description: 'File upload Status Response',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.Status = Status;
const SubmitBatchPayments = {
    body: {
        required: ['payments'],
        type: 'object',
        properties: {
            externalReference: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w-\\s]*',
                type: 'string',
                description: 'Your reference for this Batch of payments',
                examples: ['aReference_00001'],
            },
            strictProcessing: {
                type: 'boolean',
                description: 'Flag to control if the entire batch fails for any individual payment validation failure',
            },
            submissionType: {
                type: 'string',
                description: 'BATCH restricts operations to batch level.  BULK (default) allows payment level operations such as approval',
                enum: ['BATCH', 'BULK'],
            },
            payments: {
                maxItems: 2147483647,
                minItems: 1,
                type: 'array',
                description: 'List of payments. Need at least 1 and maximum of 10000',
                items: {
                    required: ['sourceAccountId'],
                    type: 'object',
                    properties: {
                        sourceAccountId: { type: 'string', description: 'Identifier for the sending Account.' },
                        destination: {
                            required: ['type'],
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: 'Indicates the type of destination. IBAN type is required for international payments.\n\nCan be one of BENEFICIARY, ACCOUNT, SCAN, IBAN',
                                    enum: ['BENEFICIARY', 'ACCOUNT', 'SCAN', 'IBAN'],
                                    examples: ['SCAN'],
                                },
                                id: {
                                    type: 'string',
                                    description: 'Identifier for the Payment destination if using ACCOUNT or BENEFICIARY type. Can be either: a) Beneficiary id for an external Payment, b) Account id for a transfer to another Account',
                                },
                                iban: {
                                    pattern: '^[a-zA-Z]{2}[0-9]{2}([a-zA-Z0-9]){11,30}$',
                                    type: 'string',
                                    description: 'International Bank Account Number (IBAN). To be used as the destination identifier when sending ‘IBAN’ type payments',
                                    examples: ['GB20MODR00000000000001'],
                                },
                                accountNumber: {
                                    pattern: '^[0-9]{8}$',
                                    type: 'string',
                                    description: 'Account Number of destination account if using SCAN type.',
                                    examples: ['12345678'],
                                },
                                sortCode: {
                                    pattern: '^[0-9]{6}$',
                                    type: 'string',
                                    description: 'Sort Code of destination account if using SCAN type.',
                                    examples: ['000000'],
                                },
                                name: {
                                    maxLength: 100,
                                    minLength: 0,
                                    pattern: "^([^\\p{L}0-9]*?[\\p{L}0-9]){1,}['\\.\\-\\/&\\s]*",
                                    type: 'string',
                                    description: 'Name to use if a new beneficiary is created, and for using as the payee name if SCAN or IBAN types are specified for the destination',
                                    examples: ['Test'],
                                },
                                address: {
                                    required: ['addressLine1', 'postTown'],
                                    type: 'object',
                                    properties: {
                                        addressLine1: { maxLength: 50, minLength: 0, type: 'string' },
                                        addressLine2: { maxLength: 50, minLength: 0, type: 'string' },
                                        postTown: { maxLength: 50, minLength: 0, type: 'string' },
                                        postCode: { maxLength: 10, type: 'string' },
                                        country: {
                                            type: 'string',
                                            enum: [
                                                'AT',
                                                'BE',
                                                'BG',
                                                'CY',
                                                'CZ',
                                                'DK',
                                                'EE',
                                                'FI',
                                                'FR',
                                                'DE',
                                                'GR',
                                                'HR',
                                                'HU',
                                                'IS',
                                                'IE',
                                                'IT',
                                                'LV',
                                                'LI',
                                                'LT',
                                                'LU',
                                                'MT',
                                                'NL',
                                                'NO',
                                                'PL',
                                                'PT',
                                                'RO',
                                                'SK',
                                                'SI',
                                                'ES',
                                                'SE',
                                                'GB',
                                                'MQ',
                                                'YT',
                                                'GP',
                                                'GF',
                                                'RE',
                                                'MF',
                                                'GI',
                                                'GG',
                                                'IM',
                                                'JE',
                                                'MC',
                                                'CH',
                                                'AD',
                                                'SM',
                                                'VA',
                                                'AX',
                                                'PM',
                                                'BL',
                                                'AF',
                                                'AL',
                                                'DZ',
                                                'AS',
                                                'AO',
                                                'AI',
                                                'AQ',
                                                'AG',
                                                'AR',
                                                'AM',
                                                'AW',
                                                'AU',
                                                'AZ',
                                                'BS',
                                                'BH',
                                                'BD',
                                                'BB',
                                                'BY',
                                                'BZ',
                                                'BJ',
                                                'BM',
                                                'BT',
                                                'BO',
                                                'BQ',
                                                'BA',
                                                'BW',
                                                'BV',
                                                'BR',
                                                'IO',
                                                'VG',
                                                'BN',
                                                'BF',
                                                'BI',
                                                'KH',
                                                'CM',
                                                'CA',
                                                'CV',
                                                'KY',
                                                'CF',
                                                'TD',
                                                'CL',
                                                'CN',
                                                'CX',
                                                'CC',
                                                'CO',
                                                'KM',
                                                'CK',
                                                'CR',
                                                'CU',
                                                'CW',
                                                'CD',
                                                'DJ',
                                                'DM',
                                                'DO',
                                                'TL',
                                                'EC',
                                                'EG',
                                                'SV',
                                                'GQ',
                                                'ER',
                                                'SZ',
                                                'ET',
                                                'FK',
                                                'FO',
                                                'FJ',
                                                'PF',
                                                'TF',
                                                'GA',
                                                'GM',
                                                'GE',
                                                'GH',
                                                'GL',
                                                'GD',
                                                'GU',
                                                'GT',
                                                'GN',
                                                'GW',
                                                'GY',
                                                'HT',
                                                'HM',
                                                'HN',
                                                'HK',
                                                'IN',
                                                'ID',
                                                'IR',
                                                'IQ',
                                                'IL',
                                                'CI',
                                                'JM',
                                                'JP',
                                                'JO',
                                                'KZ',
                                                'KE',
                                                'KI',
                                                'XK',
                                                'KW',
                                                'KG',
                                                'LA',
                                                'LB',
                                                'LS',
                                                'LR',
                                                'LY',
                                                'MO',
                                                'MG',
                                                'MW',
                                                'MY',
                                                'MV',
                                                'ML',
                                                'MH',
                                                'MR',
                                                'MU',
                                                'MX',
                                                'FM',
                                                'MD',
                                                'MN',
                                                'ME',
                                                'MS',
                                                'MA',
                                                'MZ',
                                                'MM',
                                                'NA',
                                                'NR',
                                                'NP',
                                                'AN',
                                                'NC',
                                                'NZ',
                                                'NI',
                                                'NE',
                                                'NG',
                                                'NU',
                                                'NF',
                                                'KP',
                                                'MK',
                                                'MP',
                                                'OM',
                                                'PK',
                                                'PW',
                                                'PS',
                                                'PA',
                                                'PG',
                                                'PY',
                                                'PE',
                                                'PH',
                                                'PN',
                                                'PR',
                                                'QA',
                                                'CG',
                                                'RU',
                                                'RW',
                                                'SH',
                                                'KN',
                                                'LC',
                                                'VC',
                                                'WS',
                                                'ST',
                                                'SA',
                                                'SN',
                                                'RS',
                                                'SC',
                                                'SL',
                                                'SG',
                                                'SX',
                                                'SB',
                                                'SO',
                                                'ZA',
                                                'KR',
                                                'GS',
                                                'SS',
                                                'LK',
                                                'SD',
                                                'SR',
                                                'SY',
                                                'SJ',
                                                'TW',
                                                'TJ',
                                                'TZ',
                                                'TH',
                                                'TG',
                                                'TK',
                                                'TO',
                                                'TT',
                                                'TN',
                                                'TR',
                                                'TM',
                                                'TC',
                                                'TV',
                                                'UG',
                                                'UA',
                                                'AE',
                                                'UM',
                                                'US',
                                                'UY',
                                                'UZ',
                                                'VU',
                                                'VE',
                                                'VN',
                                                'VI',
                                                'WF',
                                                'EH',
                                                'YE',
                                                'ZM',
                                                'ZW',
                                            ],
                                        },
                                        countrySubDivision: { maxLength: 35, minLength: 0, type: 'string' },
                                    },
                                    description: 'Optional address. Mandatory for international payments.',
                                },
                                birthdate: {
                                    type: 'string',
                                    description: "The destination beneficiary's date of birth. Format: yyyy-MM-dd",
                                    format: 'date',
                                    examples: ['2000-01-01'],
                                },
                                emailAddress: {
                                    pattern: '[^\\s@]+@[^\\s@]+\\.[^\\s@]+',
                                    type: 'string',
                                    description: "The destination beneficiary's email address",
                                },
                                phoneNumber: {
                                    type: 'string',
                                    description: "The destination beneficiary's phone number",
                                },
                                bic: {
                                    type: 'string',
                                    description: "The destination beneficiary's SWIFT BIC (Bank Identifier Code). Only to be used for international payments.",
                                },
                                countrySpecificDetails: {
                                    type: 'object',
                                    properties: {
                                        bankName: {
                                            type: 'string',
                                            description: 'The name of the destination bank.',
                                            examples: ['Apple Bank'],
                                        },
                                        bankAddress: {
                                            type: 'string',
                                            description: 'The address of the destination bank.',
                                            examples: ['2100 Broadway'],
                                        },
                                        bankCity: {
                                            type: 'string',
                                            description: 'The city in which the destination bank resides.',
                                            examples: ['New York City'],
                                        },
                                        bankBranchName: {
                                            type: 'string',
                                            description: "The name of the destination bank's branch.",
                                            examples: ['New York'],
                                        },
                                        bankBranchCode: {
                                            type: 'string',
                                            description: "The code of the destination bank's branch.",
                                            examples: ['44-04'],
                                        },
                                        bankCode: {
                                            type: 'string',
                                            description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                        },
                                        chineseId: {
                                            type: 'string',
                                            description: 'The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.',
                                            examples: ['01101201901018889'],
                                        },
                                        province: {
                                            type: 'string',
                                            description: 'The province in which the beneficiary resides. Applies only to beneficiaries residing in China.',
                                            examples: ['Zhejiang'],
                                        },
                                        business: {
                                            type: 'boolean',
                                            description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.",
                                            examples: [true],
                                        },
                                        bankCodeType: {
                                            type: 'string',
                                            description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.",
                                            enum: ['ABA', 'CHIPS'],
                                            examples: ['ABA'],
                                        },
                                        bankCountry: {
                                            type: 'string',
                                            description: 'The country in which the destination bank resides. Mandatory for international payments.',
                                            enum: [
                                                'AT',
                                                'BE',
                                                'BG',
                                                'CY',
                                                'CZ',
                                                'DK',
                                                'EE',
                                                'FI',
                                                'FR',
                                                'DE',
                                                'GR',
                                                'HR',
                                                'HU',
                                                'IS',
                                                'IE',
                                                'IT',
                                                'LV',
                                                'LI',
                                                'LT',
                                                'LU',
                                                'MT',
                                                'NL',
                                                'NO',
                                                'PL',
                                                'PT',
                                                'RO',
                                                'SK',
                                                'SI',
                                                'ES',
                                                'SE',
                                                'GB',
                                                'MQ',
                                                'YT',
                                                'GP',
                                                'GF',
                                                'RE',
                                                'MF',
                                                'GI',
                                                'GG',
                                                'IM',
                                                'JE',
                                                'MC',
                                                'CH',
                                                'AD',
                                                'SM',
                                                'VA',
                                                'AX',
                                                'PM',
                                                'BL',
                                                'AF',
                                                'AL',
                                                'DZ',
                                                'AS',
                                                'AO',
                                                'AI',
                                                'AQ',
                                                'AG',
                                                'AR',
                                                'AM',
                                                'AW',
                                                'AU',
                                                'AZ',
                                                'BS',
                                                'BH',
                                                'BD',
                                                'BB',
                                                'BY',
                                                'BZ',
                                                'BJ',
                                                'BM',
                                                'BT',
                                                'BO',
                                                'BQ',
                                                'BA',
                                                'BW',
                                                'BV',
                                                'BR',
                                                'IO',
                                                'VG',
                                                'BN',
                                                'BF',
                                                'BI',
                                                'KH',
                                                'CM',
                                                'CA',
                                                'CV',
                                                'KY',
                                                'CF',
                                                'TD',
                                                'CL',
                                                'CN',
                                                'CX',
                                                'CC',
                                                'CO',
                                                'KM',
                                                'CK',
                                                'CR',
                                                'CU',
                                                'CW',
                                                'CD',
                                                'DJ',
                                                'DM',
                                                'DO',
                                                'TL',
                                                'EC',
                                                'EG',
                                                'SV',
                                                'GQ',
                                                'ER',
                                                'SZ',
                                                'ET',
                                                'FK',
                                                'FO',
                                                'FJ',
                                                'PF',
                                                'TF',
                                                'GA',
                                                'GM',
                                                'GE',
                                                'GH',
                                                'GL',
                                                'GD',
                                                'GU',
                                                'GT',
                                                'GN',
                                                'GW',
                                                'GY',
                                                'HT',
                                                'HM',
                                                'HN',
                                                'HK',
                                                'IN',
                                                'ID',
                                                'IR',
                                                'IQ',
                                                'IL',
                                                'CI',
                                                'JM',
                                                'JP',
                                                'JO',
                                                'KZ',
                                                'KE',
                                                'KI',
                                                'XK',
                                                'KW',
                                                'KG',
                                                'LA',
                                                'LB',
                                                'LS',
                                                'LR',
                                                'LY',
                                                'MO',
                                                'MG',
                                                'MW',
                                                'MY',
                                                'MV',
                                                'ML',
                                                'MH',
                                                'MR',
                                                'MU',
                                                'MX',
                                                'FM',
                                                'MD',
                                                'MN',
                                                'ME',
                                                'MS',
                                                'MA',
                                                'MZ',
                                                'MM',
                                                'NA',
                                                'NR',
                                                'NP',
                                                'AN',
                                                'NC',
                                                'NZ',
                                                'NI',
                                                'NE',
                                                'NG',
                                                'NU',
                                                'NF',
                                                'KP',
                                                'MK',
                                                'MP',
                                                'OM',
                                                'PK',
                                                'PW',
                                                'PS',
                                                'PA',
                                                'PG',
                                                'PY',
                                                'PE',
                                                'PH',
                                                'PN',
                                                'PR',
                                                'QA',
                                                'CG',
                                                'RU',
                                                'RW',
                                                'SH',
                                                'KN',
                                                'LC',
                                                'VC',
                                                'WS',
                                                'ST',
                                                'SA',
                                                'SN',
                                                'RS',
                                                'SC',
                                                'SL',
                                                'SG',
                                                'SX',
                                                'SB',
                                                'SO',
                                                'ZA',
                                                'KR',
                                                'GS',
                                                'SS',
                                                'LK',
                                                'SD',
                                                'SR',
                                                'SY',
                                                'SJ',
                                                'TW',
                                                'TJ',
                                                'TZ',
                                                'TH',
                                                'TG',
                                                'TK',
                                                'TO',
                                                'TT',
                                                'TN',
                                                'TR',
                                                'TM',
                                                'TC',
                                                'TV',
                                                'UG',
                                                'UA',
                                                'AE',
                                                'UM',
                                                'US',
                                                'UY',
                                                'UZ',
                                                'VU',
                                                'VE',
                                                'VN',
                                                'VI',
                                                'WF',
                                                'EH',
                                                'YE',
                                                'ZM',
                                                'ZW',
                                            ],
                                            examples: ['US'],
                                        },
                                    },
                                    description: "Further details required, depending on the destination's country",
                                },
                            },
                            description: 'Destination of the Payment',
                        },
                        currency: {
                            type: 'string',
                            description: 'Currency of the account in ISO 4217 format. Default is GBP',
                            examples: ['GBP'],
                        },
                        amount: {
                            maximum: 2147483647,
                            minimum: 0.01,
                            type: 'number',
                            description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP",
                            examples: [100],
                        },
                        reference: {
                            type: 'string',
                            description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters that are not all the same (up to 140 characters for currencies other than GBP). Can contain alphanumeric, '-', '.', '&', '/' and space.",
                            examples: ['Salary'],
                        },
                        externalReference: {
                            maxLength: 50,
                            minLength: 0,
                            pattern: '[\\w-\\s]*',
                            type: 'string',
                            description: 'Your reference for this payment',
                            examples: ['aReference_00001'],
                        },
                        endToEndReference: {
                            type: 'string',
                            description: 'Optional end to end reference. For international payments, Modulr payment ID will be used as end-to-end reference.',
                            examples: ['aReference_00001'],
                        },
                        regulatoryReporting: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    description: 'Regulatory Reporting Type',
                                    enum: ['CRED', 'DEBT', 'BOTH'],
                                    examples: ['CRED'],
                                },
                                regulatoryAuthority: {
                                    type: 'object',
                                    properties: {
                                        authorityName: {
                                            maxLength: 70,
                                            minLength: 0,
                                            type: 'string',
                                            description: 'Authority name. Maximum of 70 characters.',
                                            examples: ['Financial Conduct Authority'],
                                        },
                                        authorityCountry: {
                                            type: 'string',
                                            description: 'ISO 3166 country code of the ultimate payers address',
                                            enum: [
                                                'AT',
                                                'BE',
                                                'BG',
                                                'CY',
                                                'CZ',
                                                'DK',
                                                'EE',
                                                'FI',
                                                'FR',
                                                'DE',
                                                'GR',
                                                'HR',
                                                'HU',
                                                'IS',
                                                'IE',
                                                'IT',
                                                'LV',
                                                'LI',
                                                'LT',
                                                'LU',
                                                'MT',
                                                'NL',
                                                'NO',
                                                'PL',
                                                'PT',
                                                'RO',
                                                'SK',
                                                'SI',
                                                'ES',
                                                'SE',
                                                'GB',
                                                'MQ',
                                                'YT',
                                                'GP',
                                                'GF',
                                                'RE',
                                                'MF',
                                                'GI',
                                                'GG',
                                                'IM',
                                                'JE',
                                                'MC',
                                                'CH',
                                                'AD',
                                                'SM',
                                                'VA',
                                                'AX',
                                                'PM',
                                                'BL',
                                                'AF',
                                                'AL',
                                                'DZ',
                                                'AS',
                                                'AO',
                                                'AI',
                                                'AQ',
                                                'AG',
                                                'AR',
                                                'AM',
                                                'AW',
                                                'AU',
                                                'AZ',
                                                'BS',
                                                'BH',
                                                'BD',
                                                'BB',
                                                'BY',
                                                'BZ',
                                                'BJ',
                                                'BM',
                                                'BT',
                                                'BO',
                                                'BQ',
                                                'BA',
                                                'BW',
                                                'BV',
                                                'BR',
                                                'IO',
                                                'VG',
                                                'BN',
                                                'BF',
                                                'BI',
                                                'KH',
                                                'CM',
                                                'CA',
                                                'CV',
                                                'KY',
                                                'CF',
                                                'TD',
                                                'CL',
                                                'CN',
                                                'CX',
                                                'CC',
                                                'CO',
                                                'KM',
                                                'CK',
                                                'CR',
                                                'CU',
                                                'CW',
                                                'CD',
                                                'DJ',
                                                'DM',
                                                'DO',
                                                'TL',
                                                'EC',
                                                'EG',
                                                'SV',
                                                'GQ',
                                                'ER',
                                                'SZ',
                                                'ET',
                                                'FK',
                                                'FO',
                                                'FJ',
                                                'PF',
                                                'TF',
                                                'GA',
                                                'GM',
                                                'GE',
                                                'GH',
                                                'GL',
                                                'GD',
                                                'GU',
                                                'GT',
                                                'GN',
                                                'GW',
                                                'GY',
                                                'HT',
                                                'HM',
                                                'HN',
                                                'HK',
                                                'IN',
                                                'ID',
                                                'IR',
                                                'IQ',
                                                'IL',
                                                'CI',
                                                'JM',
                                                'JP',
                                                'JO',
                                                'KZ',
                                                'KE',
                                                'KI',
                                                'XK',
                                                'KW',
                                                'KG',
                                                'LA',
                                                'LB',
                                                'LS',
                                                'LR',
                                                'LY',
                                                'MO',
                                                'MG',
                                                'MW',
                                                'MY',
                                                'MV',
                                                'ML',
                                                'MH',
                                                'MR',
                                                'MU',
                                                'MX',
                                                'FM',
                                                'MD',
                                                'MN',
                                                'ME',
                                                'MS',
                                                'MA',
                                                'MZ',
                                                'MM',
                                                'NA',
                                                'NR',
                                                'NP',
                                                'AN',
                                                'NC',
                                                'NZ',
                                                'NI',
                                                'NE',
                                                'NG',
                                                'NU',
                                                'NF',
                                                'KP',
                                                'MK',
                                                'MP',
                                                'OM',
                                                'PK',
                                                'PW',
                                                'PS',
                                                'PA',
                                                'PG',
                                                'PY',
                                                'PE',
                                                'PH',
                                                'PN',
                                                'PR',
                                                'QA',
                                                'CG',
                                                'RU',
                                                'RW',
                                                'SH',
                                                'KN',
                                                'LC',
                                                'VC',
                                                'WS',
                                                'ST',
                                                'SA',
                                                'SN',
                                                'RS',
                                                'SC',
                                                'SL',
                                                'SG',
                                                'SX',
                                                'SB',
                                                'SO',
                                                'ZA',
                                                'KR',
                                                'GS',
                                                'SS',
                                                'LK',
                                                'SD',
                                                'SR',
                                                'SY',
                                                'SJ',
                                                'TW',
                                                'TJ',
                                                'TZ',
                                                'TH',
                                                'TG',
                                                'TK',
                                                'TO',
                                                'TT',
                                                'TN',
                                                'TR',
                                                'TM',
                                                'TC',
                                                'TV',
                                                'UG',
                                                'UA',
                                                'AE',
                                                'UM',
                                                'US',
                                                'UY',
                                                'UZ',
                                                'VU',
                                                'VE',
                                                'VN',
                                                'VI',
                                                'WF',
                                                'EH',
                                                'YE',
                                                'ZM',
                                                'ZW',
                                            ],
                                            examples: ['GB'],
                                        },
                                    },
                                    description: 'Regulatory authority',
                                },
                                structuredRegulatoryReporting: {
                                    type: 'object',
                                    properties: {
                                        code: { maxLength: 3, minLength: 0, type: 'string' },
                                        amount: {
                                            maximum: 2147483647,
                                            minimum: 0.01,
                                            type: 'number',
                                            description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP",
                                            examples: [100],
                                        },
                                        currencyCode: {
                                            type: 'string',
                                            description: 'Currency of the account in ISO 4217 format. Default is GBP',
                                            examples: ['GBP'],
                                        },
                                        information: { maxLength: 35, minLength: 0, type: 'string' },
                                    },
                                    description: 'Structured regulatory reporting',
                                },
                            },
                            description: 'Regulatory reporting',
                        },
                        paymentDate: {
                            type: 'string',
                            description: "The future date on which to make the payment. Date format 'yyyy-MM-dd'.\n\nNot applicable for international payments which will be submitted on date of submission or next working day, in line with cut-offs.",
                            examples: ['2017-01-28'],
                        },
                        overseasPaymentDetail: {
                            type: 'object',
                            properties: {
                                ultimatePayer: {
                                    required: ['address', 'name'],
                                    type: 'object',
                                    properties: {
                                        name: {
                                            maxLength: 70,
                                            minLength: 0,
                                            type: 'string',
                                            description: 'Name of the ultimate payer',
                                        },
                                        address: {
                                            required: ['country'],
                                            type: 'object',
                                            properties: {
                                                addressLine1: {
                                                    maxLength: 70,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'First line of the ultimate payers address',
                                                    examples: ['2nd Floor'],
                                                },
                                                addressLine2: {
                                                    maxLength: 70,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Second line of the ultimate payers address',
                                                    examples: ['123 High Street'],
                                                },
                                                postTown: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Postal town of the ultimate payers address',
                                                    examples: ['Edinburgh'],
                                                },
                                                postCode: {
                                                    maxLength: 16,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Post code of the ultimate payers address',
                                                    examples: ['AB12 3XX'],
                                                },
                                                country: {
                                                    type: 'string',
                                                    description: 'ISO 3166 country code of the ultimate payers address',
                                                    examples: ['GB'],
                                                },
                                            },
                                        },
                                        birthDetails: {
                                            type: 'object',
                                            properties: {
                                                dateOfBirth: {
                                                    pattern: '^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$',
                                                    type: 'string',
                                                    description: 'Date of birth in ISO 8601 format of the ultimate payer',
                                                    examples: ['1978-01-01'],
                                                },
                                                cityOfBirth: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'City of birth of the ultimate payer',
                                                    examples: ['Edinburgh'],
                                                },
                                                countryOfBirth: {
                                                    type: 'string',
                                                    description: 'ISO 3166 country code of the ultimate payers country of birth',
                                                    examples: ['GB'],
                                                },
                                            },
                                            description: "Birth details of a person. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory",
                                        },
                                        officialIdentification: {
                                            type: 'object',
                                            properties: {
                                                drivingLicenceNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Driving licence number',
                                                    examples: ['JONES849339TS8AD'],
                                                },
                                                customerNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Customer number',
                                                    examples: ['23547326547632'],
                                                },
                                                socialSecurityNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Social security number or equivalent',
                                                    examples: ['1110000000022AB'],
                                                },
                                                passportNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Passport number',
                                                    examples: ['123456789'],
                                                },
                                                idCardNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'National ID card number',
                                                    examples: ['123456789'],
                                                },
                                                otherIdNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Other ID number',
                                                    examples: ['123456789'],
                                                },
                                            },
                                            description: "Official identification for a person. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory",
                                        },
                                        officialIdDetailOrgs: {
                                            type: 'object',
                                            properties: {
                                                bankPartyIdentification: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Bank party identification',
                                                    examples: ['12345'],
                                                },
                                                centralBankIdNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Central bank identification number',
                                                    examples: ['678910'],
                                                },
                                                clearingIdNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Clearing identification Number',
                                                    examples: ['xx15402'],
                                                },
                                                certificateOfIncorporationNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Certification of the incorporation number',
                                                    examples: ['1100010'],
                                                },
                                                countryIdCode: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Country identification code',
                                                    examples: ['111111'],
                                                },
                                                customerNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Customer number',
                                                    examples: ['00221133'],
                                                },
                                                dataUniversalNumberingSystem: {
                                                    pattern: '^[0-9]{9,9}?$',
                                                    type: 'string',
                                                    description: 'Data universal numbering system',
                                                    examples: ['002211330'],
                                                },
                                                employerIdNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Employer identification number',
                                                    examples: ['00221133'],
                                                },
                                                gs1glnIdentifier: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'GS1GLN identifier',
                                                    examples: ['00221133'],
                                                },
                                                sirenCode: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'SIREN code',
                                                    examples: ['00221133'],
                                                },
                                                siretCode: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'SIRET code',
                                                    examples: ['00221133'],
                                                },
                                                taxIdNumber: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Tax identification number',
                                                    examples: ['00221133'],
                                                },
                                                bicIdentifier: {
                                                    pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$',
                                                    type: 'string',
                                                    description: 'BICI identification',
                                                    examples: ['MGALODJAO7A'],
                                                },
                                                ibeiIdentifier: {
                                                    pattern: '^[A-Z]{2,2}[B-DF-HJ-NP-TV-XZ0-9]{7,7}[0-9]{1,1}?$',
                                                    type: 'string',
                                                    description: 'IBEI identification',
                                                    examples: ['HIZFTMTT59'],
                                                },
                                                beiIdentifier: {
                                                    pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$',
                                                    type: 'string',
                                                    description: 'BEI identification',
                                                    examples: ['MHIHISVZUMH'],
                                                },
                                                eanglnIdentifier: {
                                                    pattern: '^[0-9]{13,13}?$',
                                                    type: 'string',
                                                    description: 'EANGLN identification',
                                                    examples: ['7516164953429'],
                                                },
                                                chipsUniversalIdentifier: {
                                                    pattern: '^CH[0-9]{6,6}?$',
                                                    type: 'string',
                                                    description: 'CHIPS universal identification',
                                                    examples: ['CH157373'],
                                                },
                                                genericIdentification3: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Generic identification 3',
                                                    examples: ['123456788'],
                                                },
                                                genericIdentificationIssr: {
                                                    maxLength: 35,
                                                    minLength: 0,
                                                    type: 'string',
                                                    description: 'Generic identification issr',
                                                    examples: ['13143225'],
                                                },
                                            },
                                            description: "Organisation's official identification. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory",
                                        },
                                        overseasAccountIdentifier: {
                                            type: 'object',
                                            properties: {
                                                iban: {
                                                    pattern: '^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}$',
                                                    type: 'string',
                                                    description: 'International Bank Account Number (IBAN)',
                                                    examples: ['GB20MODR00000000000001'],
                                                },
                                                bban: {
                                                    pattern: '^[a-zA-Z0-9]{1,30}$',
                                                    type: 'string',
                                                    description: 'Basic Bank Account Number (BBAN)',
                                                    examples: ['NWBK60161331926819'],
                                                },
                                                upic: {
                                                    pattern: '^\\d{8,17}$',
                                                    type: 'string',
                                                    description: 'Universal Payment Identification Code (UPIC)',
                                                    examples: ['987654321'],
                                                },
                                                otherAccountNumber: {
                                                    pattern: '^[a-zA-Z0-9]{1,34}$',
                                                    type: 'string',
                                                    description: 'Other Account ID',
                                                    examples: ['987654321'],
                                                },
                                            },
                                        },
                                        bic: {
                                            pattern: '^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$',
                                            type: 'string',
                                            description: "Destination beneficiary's BIC/Swift Code.",
                                            examples: ['MODRDEFF123'],
                                        },
                                    },
                                },
                                originalPaymentDetails: {
                                    required: ['amount', 'currency', 'exchangeRate'],
                                    type: 'object',
                                    properties: {
                                        amount: {
                                            type: 'number',
                                            description: 'Amount of currency that the payment is in',
                                            examples: [1000.45],
                                        },
                                        exchangeRate: {
                                            type: 'number',
                                            description: 'Exchange rate',
                                            examples: [1.45],
                                        },
                                        currency: {
                                            type: 'string',
                                            description: 'ISO 4217 currency code that the amount is in',
                                            examples: ['GBP'],
                                        },
                                    },
                                },
                                chargeDetails: {
                                    required: ['amount', 'bearer', 'currency'],
                                    type: 'object',
                                    properties: {
                                        bearer: {
                                            type: 'string',
                                            description: 'Information about bearer of the charges. Its can be Creditor, Debtor or shared between both',
                                            enum: ['CRED', 'DEBT', 'SHAR'],
                                            examples: ['CRED'],
                                        },
                                        amount: {
                                            type: 'number',
                                            description: 'Amount of the charges. Max allowed is 999999999999.99',
                                            examples: [100],
                                        },
                                        currency: {
                                            type: 'string',
                                            description: 'Currency of charge. Should be ISO Standard currency',
                                            enum: [
                                                'GBP',
                                                'EUR',
                                                'AED',
                                                'AFN',
                                                'ALL',
                                                'AMD',
                                                'ANG',
                                                'AOA',
                                                'ARS',
                                                'AUD',
                                                'AWG',
                                                'AZN',
                                                'BAM',
                                                'BBD',
                                                'BDT',
                                                'BGN',
                                                'BHD',
                                                'BIF',
                                                'BMD',
                                                'BND',
                                                'BOB',
                                                'BOV',
                                                'BRL',
                                                'BSD',
                                                'BTN',
                                                'BWP',
                                                'BYN',
                                                'BZD',
                                                'CAD',
                                                'CDF',
                                                'CHE',
                                                'CHF',
                                                'CHW',
                                                'CLF',
                                                'CLP',
                                                'CNY',
                                                'COP',
                                                'COU',
                                                'CRC',
                                                'CUC',
                                                'CUP',
                                                'CVE',
                                                'CZK',
                                                'DJF',
                                                'DKK',
                                                'DOP',
                                                'DZD',
                                                'EGP',
                                                'ERN',
                                                'ETB',
                                                'FJD',
                                                'FKP',
                                                'GEL',
                                                'GHS',
                                                'GIP',
                                                'GMD',
                                                'GNF',
                                                'GTQ',
                                                'GYD',
                                                'HKD',
                                                'HNL',
                                                'HRK',
                                                'HTG',
                                                'HUF',
                                                'IDR',
                                                'ILS',
                                                'INR',
                                                'IQD',
                                                'IRR',
                                                'ISK',
                                                'JMD',
                                                'JOD',
                                                'JPY',
                                                'KES',
                                                'KGS',
                                                'KHR',
                                                'KMF',
                                                'KPW',
                                                'KRW',
                                                'KWD',
                                                'KYD',
                                                'KZT',
                                                'LAK',
                                                'LBP',
                                                'LKR',
                                                'LRD',
                                                'LSL',
                                                'LYD',
                                                'MAD',
                                                'MDL',
                                                'MGA',
                                                'MKD',
                                                'MMK',
                                                'MNT',
                                                'MOP',
                                                'MRU',
                                                'MUR',
                                                'MVR',
                                                'MWK',
                                                'MXN',
                                                'MXV',
                                                'MYR',
                                                'MZN',
                                                'NAD',
                                                'NGN',
                                                'NIO',
                                                'NOK',
                                                'NPR',
                                                'NZD',
                                                'OMR',
                                                'PAB',
                                                'PEN',
                                                'PGK',
                                                'PHP',
                                                'PKR',
                                                'PLN',
                                                'PYG',
                                                'QAR',
                                                'RON',
                                                'RSD',
                                                'RUB',
                                                'RWF',
                                                'SAR',
                                                'SBD',
                                                'SCR',
                                                'SDG',
                                                'SEK',
                                                'SGD',
                                                'SLE',
                                                'SLL',
                                                'SOS',
                                                'SRD',
                                                'SSP',
                                                'STN',
                                                'SVC',
                                                'SYP',
                                                'SZL',
                                                'SHP',
                                                'THB',
                                                'TJS',
                                                'TMT',
                                                'TND',
                                                'TOP',
                                                'TRY',
                                                'TTD',
                                                'TWD',
                                                'TZS',
                                                'UAH',
                                                'UGX',
                                                'USD',
                                                'USN',
                                                'UYI',
                                                'UYU',
                                                'UYW',
                                                'UZS',
                                                'VES',
                                                'VND',
                                                'VUV',
                                                'WST',
                                                'XAF',
                                                'XAG',
                                                'XAU',
                                                'XBA',
                                                'XBB',
                                                'XBC',
                                                'XBD',
                                                'XCD',
                                                'XDR',
                                                'XOF',
                                                'XPD',
                                                'XPF',
                                                'XPT',
                                                'XSU',
                                                'XTS',
                                                'XUA',
                                                'XXX',
                                                'YER',
                                                'ZAR',
                                                'ZMW',
                                                'ZWL',
                                            ],
                                            examples: ['GBP'],
                                        },
                                    },
                                },
                                additionalRemittanceInformation: { maxLength: 140, minLength: 0, type: 'string' },
                            },
                            description: 'Details relating to payment originated overseas.\n\nNot applicable for international payments - all international transactions must originate from the Modulr account creating the payment request.',
                        },
                        fxQuoteId: {
                            type: 'string',
                            description: "FX quote ID related to this payment. If supplied, neither 'amount' nor 'currency' should be supplied.",
                            deprecated: true,
                            examples: ['Q0000001'],
                        },
                    },
                    description: 'Details of Payment request',
                },
            },
        },
        description: 'Details of Batch request',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique id for the Batch Payment. 10 characters long',
                    examples: ['D920000001'],
                },
                externalReference: {
                    type: 'string',
                    description: 'External reference, if provided',
                    examples: ['aReference_00001'],
                },
                status: {
                    type: 'string',
                    description: 'Current status of batch.\n\n`ACCEPTED` `REJECTED` `SUBMITTED` `CANCELLED`',
                    enum: ['ACCEPTED', 'REJECTED', 'SUBMITTED', 'CANCELLED'],
                    examples: ['ACCEPTED'],
                },
                totalPayments: {
                    type: 'integer',
                    description: 'Total count of payments in this batch',
                    format: 'int32',
                    examples: [9123],
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                currentUserCanApprove: {
                    type: 'boolean',
                    description: 'Whether the user is allowed to approve this batch, based on their approval limits, and applicable configuration',
                    examples: [true],
                },
                paymentDetails: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            totalPaymentCount: {
                                type: 'integer',
                                description: 'Total count of payments',
                                format: 'int32',
                                examples: [10],
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            totalAmount: {
                                type: 'number',
                                description: 'Sum total of payment amounts',
                                examples: [100],
                            },
                            pendingApprovalCount: {
                                type: 'integer',
                                description: 'Count of payments currently pending approval',
                                format: 'int32',
                                examples: [5],
                                minimum: -2147483648,
                                maximum: 2147483647,
                            },
                            pendingApprovalAmount: {
                                type: 'number',
                                description: 'Sum total of payment amounts currently pending approval',
                                examples: [50],
                            },
                        },
                        description: 'Summary of payments and approvals',
                    },
                    description: 'Summary of payments and approvals, per currency (as a 3-alpha currency code)',
                },
                approvals: {
                    type: 'array',
                    description: 'List of batch-level approvals',
                    items: {
                        type: 'object',
                        properties: {
                            approvedBy: {
                                type: 'string',
                                description: 'ID of user who approved this batch payment request',
                                examples: ['U2100021'],
                            },
                            approvedOn: {
                                type: 'string',
                                description: 'Date this approval was applied',
                                format: 'date',
                                examples: ['2022-06-25'],
                            },
                        },
                        description: 'A single approval against a batch payment request',
                    },
                },
                currentUserCanCancel: {
                    type: 'boolean',
                    description: 'Whether the user is allowed and currently able to cancel at least one of the payments in this batch',
                },
                createdDate: {
                    type: 'string',
                    description: "Datetime when the batch payment was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000",
                    format: 'date-time',
                },
                processingDateFrom: {
                    type: 'string',
                    description: "Earliest processing date in the batch file or the batch creation date if the file does not have any dates. Date format 'yyyy-MM-dd'",
                    format: 'date',
                    examples: ['2017-01-28'],
                },
                processingDateTo: {
                    type: 'string',
                    description: "Last processing date in the batch file or empty if the file does not have any dates. Date format 'Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000'",
                    format: 'date',
                    examples: ['2017-01-28'],
                },
                paymentResponses: {
                    type: 'array',
                    description: 'Full details of all payments in this batch',
                    deprecated: true,
                    items: {
                        required: ['details', 'externalReference', 'id', 'status'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                description: 'Unique id for the Payment request. 10 characters long',
                                examples: ['P000001ABC'],
                            },
                            status: {
                                type: 'string',
                                description: 'Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`',
                                enum: [
                                    'SUBMITTED',
                                    'SCREENING_REQ',
                                    'VALIDATED',
                                    'PENDING_FOR_DATE',
                                    'PENDING_FOR_FUNDS',
                                    'EXT_PROC',
                                    'PROCESSED',
                                    'RECONCILED',
                                    'ER_INVALID',
                                    'ER_EXTCONN',
                                    'ER_EXTSYS',
                                    'ER_EXPIRED',
                                    'ER_GENERAL',
                                    'ER_BATCH',
                                    'EXT_SENT',
                                    'UNALLOCATED',
                                    'HELD',
                                    'RETURNED',
                                    'CANCELLED',
                                    'REPROCESSING',
                                    'VOID',
                                    'CLEARING',
                                    'HELD_IN_SUSPENSE',
                                ],
                                examples: ['VALIDATED'],
                            },
                            createdDate: {
                                type: 'string',
                                description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'",
                                format: 'date-time',
                            },
                            externalReference: {
                                type: 'string',
                                description: 'external reference if provided',
                                examples: ['aReference_00001'],
                            },
                            details: {
                                type: 'object',
                                description: 'All the details of the payment from the original request',
                                additionalProperties: true,
                            },
                            approvalStatus: {
                                type: 'string',
                                description: 'Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`',
                                enum: ['NOTNEEDED', 'PENDING', 'APPROVED', 'REJECTED', 'DELETED'],
                                examples: ['NOTNEEDED'],
                            },
                            message: { type: 'string', description: 'Information about payment (if available)' },
                            schemeInfo: {
                                type: 'object',
                                properties: {
                                    name: { type: 'string' },
                                    id: { type: 'string' },
                                    message: { type: 'string' },
                                    responseCode: { type: 'string' },
                                },
                                description: 'Information with regards to the payment scheme',
                            },
                        },
                        description: 'Full details of all payments in this batch',
                    },
                },
                summary: {
                    type: 'object',
                    properties: {
                        total: {
                            type: 'integer',
                            description: 'Total count of payment requests in this batch',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        invalid: {
                            type: 'integer',
                            description: 'Count of invalid payment requests',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        inprogress: {
                            type: 'integer',
                            description: 'Count of payment requests in progress',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        completed: {
                            type: 'integer',
                            description: 'Count of completed payments',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        errors: {
                            type: 'integer',
                            description: 'Count of failed payment requests',
                            format: 'int32',
                            minimum: -2147483648,
                            maximum: 2147483647,
                        },
                        info: {
                            type: 'string',
                            description: 'Additional information or error message regarding this batch payment request',
                        },
                        strict: { type: 'boolean' },
                    },
                    description: 'Summary of the state of payment requests in this batch',
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.SubmitBatchPayments = SubmitBatchPayments;
const SuspendCard = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card which should be suspended',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.SuspendCard = SuspendCard;
const SuspendMandate = {
    body: {
        required: ['reason'],
        type: 'object',
        properties: {
            cancelAllScheduledPayments: {
                type: 'boolean',
                description: 'Should cancel all collections schedules for the mandate',
            },
            reason: {
                maxLength: 300,
                minLength: 0,
                type: 'string',
                description: 'Reason to suspend the mandate',
            },
        },
        description: 'Details of Mandate suspension.',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Id of Mandate to suspend.',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '404': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.SuspendMandate = SuspendMandate;
const UnblockAccount = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of account to unblock',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UnblockAccount = UnblockAccount;
const UnblockCard = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card which should be unblocked',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UnblockCard = UnblockCard;
const UnblockPin = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card to unblock the PIN (and/or CVC2) against',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UnblockPin = UnblockPin;
const UnsuspendCard = {
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card which should no longer be suspended',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UnsuspendCard = UnsuspendCard;
const Update = {
    body: {
        type: 'object',
        properties: {
            limit: { type: 'number', description: 'Total card authorisation limit.', examples: [1000] },
            holder: {
                type: 'object',
                properties: {
                    billingAddress: {
                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                        type: 'object',
                        properties: {
                            addressLine1: {
                                maxLength: 50,
                                minLength: 1,
                                type: 'string',
                                description: 'First line of address',
                                examples: ['Floor 10'],
                            },
                            addressLine2: {
                                maxLength: 50,
                                minLength: 0,
                                type: 'string',
                                description: 'Second line of address',
                                examples: ['80 George Street'],
                            },
                            postTown: {
                                maxLength: 20,
                                minLength: 1,
                                type: 'string',
                                description: 'Post town',
                                examples: ['EDINBURGH'],
                            },
                            postCode: {
                                maxLength: 10,
                                minLength: 1,
                                type: 'string',
                                description: 'Postcode',
                                examples: ['EH2 3BU'],
                            },
                            country: {
                                type: 'string',
                                description: 'Country (ISO 3166 alpha-2 country code)',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'AX',
                                    'AW',
                                    'BL',
                                    'CW',
                                    'GF',
                                    'GL',
                                    'GP',
                                    'ME',
                                    'MF',
                                    'MQ',
                                    'NC',
                                    'PF',
                                    'PM',
                                    'RE',
                                    'SX',
                                    'TF',
                                    'WF',
                                    'YT',
                                    'AI',
                                    'BM',
                                    'FK',
                                    'GB',
                                    'GG',
                                    'GI',
                                    'GS',
                                    'IO',
                                    'JE',
                                    'KY',
                                    'MS',
                                    'PN',
                                    'SH',
                                    'TC',
                                    'VG',
                                ],
                                examples: ['GB'],
                            },
                        },
                        description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                    },
                    shippingAddress: {
                        required: ['addressLine1', 'country', 'postCode', 'postTown'],
                        type: 'object',
                        properties: {
                            addressLine1: {
                                maxLength: 50,
                                minLength: 1,
                                type: 'string',
                                description: 'First line of address',
                                examples: ['Floor 10'],
                            },
                            addressLine2: {
                                maxLength: 50,
                                minLength: 0,
                                type: 'string',
                                description: 'Second line of address',
                                examples: ['80 George Street'],
                            },
                            postTown: {
                                maxLength: 20,
                                minLength: 1,
                                type: 'string',
                                description: 'Post town',
                                examples: ['EDINBURGH'],
                            },
                            postCode: {
                                maxLength: 10,
                                minLength: 1,
                                type: 'string',
                                description: 'Postcode',
                                examples: ['EH2 3BU'],
                            },
                            country: {
                                type: 'string',
                                description: 'Country (ISO 3166 alpha-2 country code)',
                                enum: [
                                    'AT',
                                    'BE',
                                    'BG',
                                    'CY',
                                    'CZ',
                                    'DK',
                                    'EE',
                                    'FI',
                                    'FR',
                                    'DE',
                                    'GR',
                                    'HR',
                                    'HU',
                                    'IS',
                                    'IE',
                                    'IT',
                                    'LV',
                                    'LI',
                                    'LT',
                                    'LU',
                                    'MT',
                                    'NL',
                                    'NO',
                                    'PL',
                                    'PT',
                                    'RO',
                                    'SK',
                                    'SI',
                                    'ES',
                                    'SE',
                                    'AX',
                                    'AW',
                                    'BL',
                                    'CW',
                                    'GF',
                                    'GL',
                                    'GP',
                                    'ME',
                                    'MF',
                                    'MQ',
                                    'NC',
                                    'PF',
                                    'PM',
                                    'RE',
                                    'SX',
                                    'TF',
                                    'WF',
                                    'YT',
                                    'AI',
                                    'BM',
                                    'FK',
                                    'GB',
                                    'GG',
                                    'GI',
                                    'GS',
                                    'IO',
                                    'JE',
                                    'KY',
                                    'MS',
                                    'PN',
                                    'SH',
                                    'TC',
                                    'VG',
                                ],
                                examples: ['GB'],
                            },
                        },
                        description: 'Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.',
                    },
                    dateOfBirth: {
                        type: 'string',
                        description: 'Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Must be NULL for individual customers.',
                        format: 'date',
                        examples: ['2001-01-01'],
                    },
                    mobileNumber: {
                        type: 'string',
                        description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.",
                        examples: ['+447123456000'],
                    },
                    email: {
                        maxLength: 50,
                        minLength: 0,
                        type: 'string',
                        description: 'Cardholder email',
                        examples: ['cardholder@example.com'],
                    },
                },
                description: 'CardHolder',
            },
        },
        description: 'Update card',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card to be updated',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.Update = Update;
const UpdateAccessGroup = {
    body: {
        required: ['accountIds', 'action', 'beneficiaryIds', 'name'],
        type: 'object',
        properties: {
            action: {
                type: 'string',
                description: 'Action to apply for the supplied account bid',
                enum: ['ADD', 'REMOVE'],
            },
            accountIds: {
                type: 'array',
                description: 'Bids of the accounts to be added/removed',
                items: { type: 'string', description: 'Bids of the accounts to be added/removed' },
            },
            beneficiaryIds: {
                type: 'array',
                description: 'Bids of the beneficiaries to be added/removed',
                items: { type: 'string', description: 'Bids of the beneficiaries to be added/removed' },
            },
            name: {
                maxLength: 50,
                minLength: 0,
                pattern: '[\\w \\-]*',
                type: 'string',
                description: 'The name of the account group to create. Must match: [\\w \\-]*',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'Access group ID',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '200': {
            required: ['countOfAccounts', 'id', 'name', 'status', 'type', 'typeId'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'Unique ID for the access group',
                    examples: ['G0000001'],
                },
                name: { type: 'string', description: 'Access group name' },
                type: {
                    type: 'string',
                    description: 'The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`',
                    enum: ['SERVICE_PARTNER', 'SERVICE_CUSTOMER', 'DELEGATE', 'USER_DEFINED'],
                },
                typeId: {
                    type: 'string',
                    description: 'The identifier of the linked entity implied by the type, e.g. the partner ID',
                },
                status: {
                    type: 'string',
                    description: 'Status of the access group\n\n`ACTIVE` `DELETED`',
                    enum: ['ACTIVE', 'DELETED'],
                },
                countOfAccounts: {
                    type: 'integer',
                    description: 'The number of accounts in this group',
                    format: 'int64',
                    deprecated: true,
                    minimum: -9223372036854776000,
                    maximum: 9223372036854776000,
                },
            },
            description: 'AccessGroup',
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UpdateAccessGroup = UpdateAccessGroup;
const UpdateCardAuthentication = {
    body: {
        required: ['knowledgeBase'],
        type: 'object',
        properties: {
            knowledgeBase: {
                type: 'array',
                description: '3DS Knowledge-Based Authentication (KBA) answers',
                items: {
                    required: ['answer', 'type'],
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            description: '3DS knowledge-based authentication answer type',
                            enum: [
                                'FIRST_PET_NAME',
                                'MATERNAL_GRANDMOTHER_MAIDEN_NAME',
                                'FAVOURITE_CHILDHOOD_FRIEND',
                                'FIRST_CAR',
                                'CITY_PARENTS_MET',
                            ],
                        },
                        answer: {
                            maxLength: 45,
                            minLength: 1,
                            type: 'string',
                            description: '3DS knowledge-based authentication answer',
                        },
                    },
                    description: '3DS Knowledge-Based Authentication (KBA) answers',
                },
            },
        },
        description: 'Authentication',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'The ID of the card which has authentication information to be updated',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UpdateCardAuthentication = UpdateCardAuthentication;
const UpdateSecuredFundingLimit = {
    body: {
        required: ['limit'],
        type: 'object',
        properties: { limit: { minimum: 0, type: 'number', description: 'Secured funding limit' } },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    metadata: {
        allOf: [
            {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        description: 'ID of account to set the secured funding limit',
                    },
                },
                required: ['id'],
            },
        ],
    },
    response: {
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UpdateSecuredFundingLimit = UpdateSecuredFundingLimit;
const Upload = {
    body: {
        required: ['content', 'fileName', 'group'],
        type: 'object',
        properties: {
            fileName: {
                maxLength: 100,
                minLength: 0,
                pattern: '^[\\w,\\s-.]+\\.(\\w){3,4}$',
                type: 'string',
            },
            content: { type: 'string', description: 'Needs to be Base64 encoded' },
            group: {
                maxLength: 100,
                minLength: 0,
                type: 'string',
                description: 'Use to group documents together. Combination of group+filename should be unique else the files will be overwritten',
            },
        },
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '201': {
            type: 'object',
            properties: { path: { type: 'string' }, fileName: { type: 'string' } },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.Upload = Upload;
const UploadPaymentFile = {
    body: {
        required: ['content', 'fileName'],
        type: 'object',
        properties: {
            fileName: { type: 'string', description: 'Original file name' },
            content: {
                type: 'string',
                description: 'The file content must be zipped using gzip format and then Base64 encoded',
            },
        },
        description: 'File upload request body',
        $schema: 'http://json-schema.org/draft-04/schema#',
    },
    response: {
        '200': {
            required: ['fileId'],
            type: 'object',
            properties: {
                fileId: {
                    type: 'string',
                    description: 'Unique id of the uploaded file',
                    examples: ['F1100001'],
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '400': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '405': {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    field: { type: 'string' },
                    code: {
                        type: 'string',
                        enum: [
                            'GENERAL',
                            'BUSINESSRULE',
                            'MFASTATUS',
                            'MFAERROR',
                            'MFATIMEOUT',
                            'MFADEVICEMM',
                            'MFAMESSAGEINVALID',
                            'NOTFOUND',
                            'DUPLICATE',
                            'INVALID',
                            'CONNECTION',
                            'RETRY',
                            'RATELIMIT',
                            'PERMISSION',
                        ],
                        description: '`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`',
                    },
                    errorCode: { type: 'string' },
                    message: { type: 'string' },
                    sourceService: { type: 'string' },
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
        '500': {
            required: ['fileId'],
            type: 'object',
            properties: {
                fileId: {
                    type: 'string',
                    description: 'Unique id of the uploaded file',
                    examples: ['F1100001'],
                },
            },
            $schema: 'http://json-schema.org/draft-04/schema#',
        },
    },
};
exports.UploadPaymentFile = UploadPaymentFile;
