declare const ActivateCard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the physical card which should be activated.";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly 'X-MOD-CARD-MGMT-TOKEN': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Card Management Token required for API users for additional security when managing sensitive card data";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddCustomerNotification: {
    readonly body: {
        readonly required: readonly ["channel", "config", "destinations", "type"];
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly description: "Type of the notification.";
                readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
            };
            readonly channel: {
                readonly type: "string";
                readonly description: "Channel used for sending the notification";
                readonly enum: readonly ["EMAIL", "WEBHOOK"];
            };
            readonly destinations: {
                readonly type: "array";
                readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                readonly items: {
                    readonly type: "string";
                    readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                };
            };
            readonly config: {
                readonly type: "object";
                readonly properties: {
                    readonly threshold: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                    };
                    readonly timesToRun: {
                        readonly type: "array";
                        readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["AM", "PM"];
                        };
                    };
                    readonly daysToRun: {
                        readonly type: "array";
                        readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                        };
                    };
                    readonly retry: {
                        readonly type: "boolean";
                        readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly secret: {
                        readonly maxLength: 32;
                        readonly minLength: 32;
                        readonly type: "string";
                        readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly hmacAlgorithm: {
                        readonly type: "string";
                        readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.";
                        readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                    };
                };
                readonly description: "Configuration information for this Notification entity.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["customerId"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const AddPartnerNotification: {
    readonly body: {
        readonly required: readonly ["channel", "config", "destinations", "type"];
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly description: "Type of the notification.";
                readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
            };
            readonly channel: {
                readonly type: "string";
                readonly description: "Channel used for sending the notification";
                readonly enum: readonly ["EMAIL", "WEBHOOK"];
            };
            readonly destinations: {
                readonly type: "array";
                readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                readonly items: {
                    readonly type: "string";
                    readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                };
            };
            readonly config: {
                readonly type: "object";
                readonly properties: {
                    readonly threshold: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                    };
                    readonly timesToRun: {
                        readonly type: "array";
                        readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["AM", "PM"];
                        };
                    };
                    readonly daysToRun: {
                        readonly type: "array";
                        readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                        };
                    };
                    readonly retry: {
                        readonly type: "boolean";
                        readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly secret: {
                        readonly maxLength: 32;
                        readonly minLength: 32;
                        readonly type: "string";
                        readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly hmacAlgorithm: {
                        readonly type: "string";
                        readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.";
                        readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                    };
                };
                readonly description: "Configuration information for this Notification entity.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly partnerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["partnerId"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BlockAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of account to block";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const BlockCard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card which should be blocked";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelBatchPayments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly batchPaymentId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Batch payment request id";
                };
            };
            readonly required: readonly ["batchPaymentId"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelCard: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly reason: {
                readonly type: "string";
                readonly description: "The reason for cancelling the card. Can be one of DESTROYED, LOST, STOLEN";
                readonly enum: readonly ["STOLEN", "DESTROYED", "LOST"];
            };
        };
        readonly description: "Reason for cancellation";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card which should be cancelled";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelCollection: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of the collection to cancel";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelCollectionSchedule: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of the collectionSchedule to cancel";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelDdosMandate: {
    readonly body: {
        readonly required: readonly ["accountId", "cancellationCode", "mandateId", "merchantNumber"];
        readonly type: "object";
        readonly properties: {
            readonly mandateId: {
                readonly type: "string";
                readonly description: "Mandate Id";
            };
            readonly accountId: {
                readonly type: "string";
                readonly description: "Account Id";
            };
            readonly cancellationCode: {
                readonly type: "string";
                readonly description: "Cancellation Code";
                readonly enum: readonly ["REFER_TO_PAYER", "INSTRUCTION_CANCELLED_BY_PAYER", "PAYER_DECEASED", "ACCOUNT_TRANSFERRED", "ACCOUNT_CLOSED", "ACCOUNT_OR_INSTRUCTION_TRANSFERRED", "ADVANCE_NOTICE_DISPUTED", "INSTRUCTION_AMENDED", "INSTRUCTION_REINSTATED"];
            };
            readonly merchantNumber: {
                readonly type: "string";
                readonly description: "Merchant Number";
            };
        };
        readonly description: "Details of the Mandate Cancel Request";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CancelMandate: {
    readonly body: {
        readonly required: readonly ["reason"];
        readonly type: "object";
        readonly properties: {
            readonly reason: {
                readonly type: "string";
                readonly description: "Reason to cancel the mandate";
                readonly enum: readonly ["INSTRUCTION_CANCELLED_PAYER", "INSTRUCTION_CANCELLED_PAYEE", "SERVICE_ENDED"];
            };
        };
        readonly description: "Details of Mandate cancellation.";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of Mandate to cancel.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CardEnquiry: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly pan: {
                readonly type: "string";
                readonly description: "pan";
            };
            readonly providerSuppliedId: {
                readonly type: "string";
                readonly description: "providerSuppliedId";
            };
        };
        readonly description: "Enquiry";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Card identifier. Maximum of 10 alphanumeric characters";
                    readonly examples: readonly ["V000000001"];
                };
                readonly holder: {
                    readonly required: readonly ["billingAddress", "dateOfBirth", "firstName", "lastName", "mobileNumber"];
                    readonly type: "object";
                    readonly properties: {
                        readonly title: {
                            readonly pattern: "^[0-9a-zA-Z]{1,4}$";
                            readonly type: "string";
                            readonly description: "Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.";
                            readonly examples: readonly ["Mr"];
                        };
                        readonly firstName: {
                            readonly pattern: "[\\x20-\\x7e]{1,20}";
                            readonly type: "string";
                            readonly description: "Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                            readonly examples: readonly ["Joe"];
                        };
                        readonly lastName: {
                            readonly pattern: "[\\x20-\\x7e]{1,20}";
                            readonly type: "string";
                            readonly description: "Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                            readonly examples: readonly ["Bloggs"];
                        };
                        readonly billingAddress: {
                            readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                            readonly type: "object";
                            readonly properties: {
                                readonly addressLine1: {
                                    readonly maxLength: 50;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "First line of address";
                                    readonly examples: readonly ["Floor 10"];
                                };
                                readonly addressLine2: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                    readonly description: "Second line of address";
                                    readonly examples: readonly ["80 George Street"];
                                };
                                readonly postTown: {
                                    readonly maxLength: 20;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "Post town";
                                    readonly examples: readonly ["EDINBURGH"];
                                };
                                readonly postCode: {
                                    readonly maxLength: 10;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "Postcode";
                                    readonly examples: readonly ["EH2 3BU"];
                                };
                                readonly country: {
                                    readonly type: "string";
                                    readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                                    readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                    readonly examples: readonly ["GB"];
                                };
                            };
                            readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                        };
                        readonly dateOfBirth: {
                            readonly type: "string";
                            readonly description: "Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.";
                            readonly format: "date";
                            readonly examples: readonly ["2001-01-01"];
                        };
                        readonly mobileNumber: {
                            readonly type: "string";
                            readonly description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.";
                            readonly examples: readonly ["+447123456000"];
                        };
                        readonly email: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly type: "string";
                            readonly description: "Cardholder email";
                            readonly examples: readonly ["cardholder@example.com"];
                        };
                    };
                    readonly description: "CardHolder";
                };
                readonly expiry: {
                    readonly type: "string";
                    readonly description: "An ISO 8601 date with year & month components only";
                    readonly examples: readonly ["2018-12"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`";
                    readonly enum: readonly ["CREATED", "ACTIVE", "BLOCKED", "SUSPENDED", "CANCELLED", "EXPIRED"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "A 3 letter ISO 4217 code representing the card currency";
                    readonly examples: readonly ["GBP"];
                };
                readonly limit: {
                    readonly type: "string";
                    readonly description: "Total card authorisation limit";
                    readonly examples: readonly ["1000.0"];
                };
                readonly maxLimit: {
                    readonly type: "string";
                    readonly description: "Maximum limit which can be set on this card and is the maximum lifetime spend the card can have";
                    readonly examples: readonly ["4000.0"];
                };
                readonly spend: {
                    readonly type: "string";
                    readonly description: "Current total of all authorisations on this card";
                    readonly examples: readonly ["250.0"];
                };
                readonly externalRef: {
                    readonly type: "string";
                    readonly description: "Client reference for the newly created card. Maximum of 50 characters.";
                    readonly examples: readonly ["TTQ_51211"];
                };
                readonly maskedPan: {
                    readonly type: "string";
                    readonly description: "Masked card PAN";
                    readonly examples: readonly ["527095******3544"];
                };
                readonly cardType: {
                    readonly type: "string";
                    readonly description: "Card product type";
                    readonly examples: readonly ["Business"];
                };
                readonly cardScheme: {
                    readonly type: "string";
                    readonly description: "Card scheme. MASTERCARD or VISA";
                    readonly examples: readonly ["MASTERCARD"];
                };
                readonly accountBid: {
                    readonly type: "string";
                    readonly description: "Account identifier";
                    readonly examples: readonly ["A020N8PD"];
                };
                readonly format: {
                    readonly type: "string";
                    readonly description: "The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`";
                    readonly enum: readonly ["PHYSICAL", "VIRTUAL"];
                    readonly examples: readonly ["PHYSICAL"];
                };
                readonly constraints: {
                    readonly required: readonly ["mccWhitelist"];
                    readonly type: "object";
                    readonly properties: {
                        readonly mccWhitelist: {
                            readonly type: "array";
                            readonly description: "mccWhitelist";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "mccWhitelist";
                                readonly examples: readonly ["[\"1000\",\"1002-3000\",\"5060\"]"];
                            };
                            readonly examples: readonly ["1000", "1002-3000", "5060"];
                        };
                        readonly authorisation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly spend: {
                                    readonly type: "array";
                                    readonly description: "Spending constraints";
                                    readonly items: {
                                        readonly required: readonly ["currency"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly description: "A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`";
                                                readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                                readonly examples: readonly ["GBP"];
                                            };
                                            readonly min: {
                                                readonly type: "number";
                                                readonly description: "Minimum spend amount (inclusive)";
                                                readonly examples: readonly [5];
                                            };
                                            readonly max: {
                                                readonly type: "number";
                                                readonly description: "Maximum spend amount (inclusive)";
                                                readonly examples: readonly [2000];
                                            };
                                        };
                                        readonly description: "Spending constraints";
                                    };
                                };
                            };
                            readonly description: "Authorisation constraints";
                        };
                    };
                    readonly description: "CardConstraints";
                };
                readonly design: {
                    readonly required: readonly ["cardRef", "packagingRef"];
                    readonly type: "object";
                    readonly properties: {
                        readonly cardRef: {
                            readonly type: "string";
                            readonly description: "Design reference for card";
                        };
                        readonly packagingRef: {
                            readonly type: "string";
                            readonly description: "Design reference for card packaging";
                        };
                    };
                    readonly description: "Design references for physical card and packaging";
                };
                readonly printedName: {
                    readonly type: "string";
                    readonly description: "Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly threeDSecureStatus: {
                    readonly type: "string";
                    readonly description: "The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                    readonly deprecated: true;
                    readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                    readonly examples: readonly ["ENROLLED"];
                };
                readonly authentication: {
                    readonly type: "object";
                    readonly properties: {
                        readonly otpSmsStatus: {
                            readonly type: "string";
                            readonly description: "The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                            readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                            readonly examples: readonly ["ENROLLED"];
                        };
                        readonly knowledgeBaseStatus: {
                            readonly type: "string";
                            readonly description: "The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                            readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                            readonly examples: readonly ["ENROLLED"];
                        };
                    };
                    readonly description: "The 3DS authentication method statuses";
                };
                readonly shippingAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly maxLength: 50;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly description: "First line of address";
                            readonly examples: readonly ["Floor 10"];
                        };
                        readonly addressLine2: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly type: "string";
                            readonly description: "Second line of address";
                            readonly examples: readonly ["80 George Street"];
                        };
                        readonly postTown: {
                            readonly maxLength: 20;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly description: "Post town";
                            readonly examples: readonly ["EDINBURGH"];
                        };
                        readonly postCode: {
                            readonly maxLength: 10;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly description: "Postcode";
                            readonly examples: readonly ["EH2 3BU"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                            readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                            readonly examples: readonly ["GB"];
                        };
                    };
                    readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CloseAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of account to close";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateAccessGroup: {
    readonly body: {
        readonly required: readonly ["accountIds", "action", "beneficiaryIds", "name"];
        readonly type: "object";
        readonly properties: {
            readonly action: {
                readonly type: "string";
                readonly description: "Action to apply for the supplied account bid";
                readonly enum: readonly ["ADD", "REMOVE"];
            };
            readonly accountIds: {
                readonly type: "array";
                readonly description: "Bids of the accounts to be added/removed";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Bids of the accounts to be added/removed";
                };
            };
            readonly beneficiaryIds: {
                readonly type: "array";
                readonly description: "Bids of the beneficiaries to be added/removed";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Bids of the beneficiaries to be added/removed";
                };
            };
            readonly name: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w \\-]*";
                readonly type: "string";
                readonly description: "The name of the account group to create. Must match: [\\w \\-]*";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["countOfAccounts", "id", "name", "status", "type", "typeId"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique ID for the access group";
                    readonly examples: readonly ["G0000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Access group name";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`";
                    readonly enum: readonly ["SERVICE_PARTNER", "SERVICE_CUSTOMER", "DELEGATE", "USER_DEFINED"];
                };
                readonly typeId: {
                    readonly type: "string";
                    readonly description: "The identifier of the linked entity implied by the type, e.g. the partner ID";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the access group\n\n`ACTIVE` `DELETED`";
                    readonly enum: readonly ["ACTIVE", "DELETED"];
                };
                readonly countOfAccounts: {
                    readonly type: "integer";
                    readonly description: "The number of accounts in this group";
                    readonly format: "int64";
                    readonly deprecated: true;
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
            };
            readonly description: "AccessGroup";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateAccount: {
    readonly body: {
        readonly required: readonly ["currency"];
        readonly type: "object";
        readonly properties: {
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w \\-]*";
                readonly type: "string";
                readonly description: "External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long";
            };
            readonly currency: {
                readonly type: "string";
                readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
            };
            readonly productCode: {
                readonly type: "string";
                readonly description: "Product associated with the account. Contact your account manager for correct code to use.";
            };
            readonly identifier: {
                readonly required: readonly ["accountNumber", "sortCode", "type"];
                readonly type: "object";
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["SCAN"];
                    };
                    readonly sortCode: {
                        readonly pattern: "^\\d{6}$";
                        readonly type: "string";
                    };
                    readonly accountNumber: {
                        readonly pattern: "^\\d{8}$";
                        readonly type: "string";
                    };
                };
                readonly description: "The identifier to assign to the account. Only available to selected partners.";
            };
        };
        readonly description: "Details of account to create";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of customer to create account for";
                };
            };
            readonly required: readonly ["customerId"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["availableBalance", "balance", "createdDate", "currency", "customerId", "id", "identifiers", "name", "status"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for the account";
                    readonly examples: readonly ["A0000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name for the account";
                };
                readonly balance: {
                    readonly type: "string";
                    readonly description: "Balance of the account in format 'NN.NN'";
                    readonly examples: readonly ["10000.0"];
                };
                readonly availableBalance: {
                    readonly type: "string";
                    readonly description: "The current available balance of the Account. Calculated by subtracting any pending payments from the current balance";
                    readonly examples: readonly ["10000.0"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Currency of the account in ISO 4217 format";
                    readonly examples: readonly ["GBP"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`";
                    readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                    readonly examples: readonly ["ACTIVE"];
                };
                readonly identifiers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                            };
                            readonly accountNumber: {
                                readonly type: "string";
                                readonly description: "Bank account Sort Code";
                                readonly examples: readonly ["12345678"];
                            };
                            readonly sortCode: {
                                readonly type: "string";
                                readonly description: "Bank account Sort Code";
                                readonly examples: readonly ["000000"];
                            };
                            readonly iban: {
                                readonly type: "string";
                                readonly examples: readonly ["GB20MODR04001401100000"];
                            };
                            readonly bic: {
                                readonly type: "string";
                                readonly examples: readonly ["MODRGB21"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly countrySpecificDetails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly bankName: {
                                        readonly type: "string";
                                        readonly description: "The name of the destination bank.";
                                        readonly examples: readonly ["Apple Bank"];
                                    };
                                    readonly bankAddress: {
                                        readonly type: "string";
                                        readonly description: "The address of the destination bank.";
                                        readonly examples: readonly ["2100 Broadway"];
                                    };
                                    readonly bankCity: {
                                        readonly type: "string";
                                        readonly description: "The city in which the destination bank resides.";
                                        readonly examples: readonly ["New York City"];
                                    };
                                    readonly bankBranchName: {
                                        readonly type: "string";
                                        readonly description: "The name of the destination bank's branch.";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly bankBranchCode: {
                                        readonly type: "string";
                                        readonly description: "The code of the destination bank's branch.";
                                        readonly examples: readonly ["44-04"];
                                    };
                                    readonly bankCode: {
                                        readonly type: "string";
                                        readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                    };
                                    readonly chineseId: {
                                        readonly type: "string";
                                        readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                        readonly examples: readonly ["01101201901018889"];
                                    };
                                    readonly province: {
                                        readonly type: "string";
                                        readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                        readonly examples: readonly ["Zhejiang"];
                                    };
                                    readonly business: {
                                        readonly type: "boolean";
                                        readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                        readonly examples: readonly [true];
                                    };
                                    readonly bankCodeType: {
                                        readonly type: "string";
                                        readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                        readonly enum: readonly ["ABA", "CHIPS"];
                                        readonly examples: readonly ["ABA"];
                                    };
                                    readonly bankCountry: {
                                        readonly type: "string";
                                        readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                        readonly enum: readonly
                                        readonly examples: readonly ["US"];
                                    };
                                };
                            };
                        };
                        readonly description: "Account Identifier";
                    };
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique id of the Customer";
                    readonly examples: readonly ["C0000001"];
                };
                readonly customerName: {
                    readonly type: "string";
                    readonly description: "Customer Name";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "Your reference for an account";
                    readonly examples: readonly ["aReference_00001"];
                };
                readonly accessGroups: {
                    readonly type: "array";
                    readonly description: "Ids of Access Groups this account belongs to";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Ids of Access Groups this account belongs to";
                    };
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly directDebit: {
                    readonly type: "boolean";
                    readonly description: "Direct Debit Enabled";
                };
                readonly securedFundingLimit: {
                    readonly type: "string";
                    readonly description: "Limit of funds available below a balance of zero";
                };
            };
            readonly description: "Account";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateAuthorisation: {
    readonly body: {
        readonly required: readonly ["mcc", "transactionAmount"];
        readonly type: "object";
        readonly properties: {
            readonly transactionAmount: {
                readonly type: "number";
                readonly description: "The transaction amount";
                readonly examples: readonly [5.45];
            };
            readonly transactionCurrency: {
                readonly type: "string";
                readonly description: "The transaction currency. Defaults to the card's billing currency";
                readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                readonly examples: readonly ["GBP"];
            };
            readonly fxRate: {
                readonly type: "number";
                readonly description: "The foreign exchange rate to use, when transaction currency differs from billing currency. Defaults to 1.0";
                readonly examples: readonly [0.8];
            };
            readonly mcc: {
                readonly type: "string";
                readonly description: "Merchant Category Code";
                readonly examples: readonly ["5812"];
            };
        };
        readonly description: "Details of the authorisation to create";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly cardId: {
                    readonly type: "string";
                    readonly examples: readonly ["V000000001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Card ID to create an authorisation for this card";
                };
            };
            readonly required: readonly ["cardId"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["authorisationId", "billingAmount", "billingCurrency", "cardId", "fxRate", "mcc", "status", "transactionAmount", "transactionCurrency"];
            readonly type: "object";
            readonly properties: {
                readonly authorisationId: {
                    readonly type: "string";
                    readonly description: "Authorisation Id";
                    readonly examples: readonly ["A00000000X"];
                };
                readonly cardId: {
                    readonly type: "string";
                    readonly description: "Card Id";
                    readonly examples: readonly ["V000000001"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Authorisation Status [APPROVED, REVERSED, SETTLED]\n\n`APPROVED` `REVERSED` `SETTLED`";
                    readonly enum: readonly ["APPROVED", "REVERSED", "SETTLED"];
                    readonly examples: readonly ["APPROVED"];
                };
                readonly transactionAmount: {
                    readonly type: "number";
                    readonly description: "Authorisation Transaction Amount";
                    readonly examples: readonly [100];
                };
                readonly transactionCurrency: {
                    readonly type: "string";
                    readonly description: "Currency for this transaction\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`";
                    readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                    readonly examples: readonly ["EUR"];
                };
                readonly billingAmount: {
                    readonly type: "number";
                    readonly description: "Authorisation billing amount";
                    readonly examples: readonly [80];
                };
                readonly billingCurrency: {
                    readonly type: "string";
                    readonly description: "Currency of the card\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`";
                    readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                    readonly examples: readonly ["GBP"];
                };
                readonly fxRate: {
                    readonly type: "number";
                    readonly description: "Foreign exchange rate used between transaction and billing currencies";
                    readonly examples: readonly [0.8];
                };
                readonly mcc: {
                    readonly type: "string";
                    readonly description: "Merchant Category Code";
                    readonly examples: readonly ["5812"];
                };
            };
            readonly description: "CardAuthorisationResponse";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateBeneficiary: {
    readonly body: {
        readonly required: readonly ["defaultReference", "destinationIdentifier", "name"];
        readonly type: "object";
        readonly properties: {
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w \\-]*";
                readonly type: "string";
                readonly description: "External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long";
            };
            readonly name: {
                readonly maxLength: 100;
                readonly minLength: 0;
                readonly pattern: "^([^\\p{L}0-9]*?[\\p{L}0-9]){1,}['\\.\\-\\/&\\s]*";
                readonly type: "string";
            };
            readonly birthdate: {
                readonly type: "string";
                readonly description: "The destination beneficiary's date of birth. Date in yyyy-MM-dd format";
                readonly format: "date";
            };
            readonly emailAddress: {
                readonly type: "string";
                readonly description: "The destination beneficiary's email address";
            };
            readonly phoneNumber: {
                readonly type: "string";
                readonly description: "The destination beneficiary's phone number, will be formatted into international number pattern";
            };
            readonly destinationIdentifier: {
                readonly type: "object";
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                    };
                    readonly accountNumber: {
                        readonly type: "string";
                        readonly examples: readonly ["12345678"];
                    };
                    readonly sortCode: {
                        readonly pattern: "^\\d{6}";
                        readonly type: "string";
                        readonly examples: readonly ["000000"];
                    };
                    readonly iban: {
                        readonly pattern: "[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{4}([a-zA-Z0-9]?){0,26}";
                        readonly type: "string";
                        readonly examples: readonly ["GB20MODR00000000000001"];
                    };
                    readonly bic: {
                        readonly pattern: "([a-zA-Z]{6,6}[a-zA-Z2-9][a-nA-Np-zP-Z0-9]([a-zA-Z0-9]{3})?)";
                        readonly type: "string";
                        readonly examples: readonly ["MODRGB21"];
                    };
                    readonly currency: {
                        readonly pattern: "[a-zA-Z]{3}";
                        readonly type: "string";
                        readonly examples: readonly ["GBP"];
                    };
                    readonly countrySpecificDetails: {
                        readonly type: "object";
                        readonly properties: {
                            readonly bankName: {
                                readonly maxLength: 140;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The name of the destination bank.";
                                readonly examples: readonly ["Apple Bank"];
                            };
                            readonly bankAddress: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The address of the destination bank.";
                                readonly examples: readonly ["2100 Broadway"];
                            };
                            readonly bankCity: {
                                readonly maxLength: 35;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The city in which the destination bank resides.";
                                readonly examples: readonly ["New York City"];
                            };
                            readonly bankBranchName: {
                                readonly type: "string";
                                readonly description: "The name of the destination bank's branch.";
                                readonly examples: readonly ["New York"];
                            };
                            readonly bankBranchCode: {
                                readonly maxLength: 35;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The code of the destination bank's branch.";
                                readonly examples: readonly ["44-04"];
                            };
                            readonly bankCode: {
                                readonly maxLength: 35;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                            };
                            readonly chineseId: {
                                readonly type: "string";
                                readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                readonly examples: readonly ["01101201901018889"];
                            };
                            readonly province: {
                                readonly type: "string";
                                readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                readonly examples: readonly ["Zhejiang"];
                            };
                            readonly business: {
                                readonly type: "boolean";
                                readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                readonly examples: readonly [true];
                            };
                            readonly bankCodeType: {
                                readonly type: "string";
                                readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                readonly enum: readonly ["ABA", "CHIPS"];
                                readonly examples: readonly ["ABA"];
                            };
                            readonly bankCountry: {
                                readonly type: "string";
                                readonly description: "The country in which the destination bank resides.";
                                readonly enum: readonly
                                readonly examples: readonly ["US"];
                            };
                        };
                    };
                };
            };
            readonly defaultReference: {
                readonly type: "string";
            };
            readonly idToReplace: {
                readonly type: "string";
            };
            readonly address: {
                readonly required: readonly ["addressLine1", "postTown"];
                readonly type: "object";
                readonly properties: {
                    readonly addressLine1: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly addressLine2: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postTown: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postCode: {
                        readonly maxLength: 10;
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly enum: readonly
                    };
                    readonly countrySubDivision: {
                        readonly maxLength: 35;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                };
                readonly description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'";
            };
            readonly qualifier: {
                readonly maxLength: 100;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Optional qualifier. Only to be supplied if multiple beneficiaries with same destination need to be supplied";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of customer to create beneficiary for";
                };
            };
            readonly required: readonly ["customerId"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["created", "customerId", "defaultReference", "destinationIdentifier", "id", "name", "status", "updated"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique reference for the Beneficiary.";
                    readonly examples: readonly ["B00000001A"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name for the Beneficiary";
                };
                readonly birthdate: {
                    readonly type: "string";
                    readonly description: "Date of birth for the Beneficiary in yyyy-MM-dd format";
                    readonly format: "date";
                };
                readonly emailAddress: {
                    readonly type: "string";
                    readonly description: "Email address for the Beneficiary";
                };
                readonly phoneNumber: {
                    readonly type: "string";
                    readonly description: "Phone number for the Beneficiary in international pattern";
                };
                readonly destinationIdentifier: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                            readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                        };
                        readonly accountNumber: {
                            readonly type: "string";
                            readonly description: "Bank account Sort Code";
                            readonly examples: readonly ["12345678"];
                        };
                        readonly sortCode: {
                            readonly type: "string";
                            readonly description: "Bank account Sort Code";
                            readonly examples: readonly ["000000"];
                        };
                        readonly iban: {
                            readonly type: "string";
                            readonly examples: readonly ["GB20MODR04001401100000"];
                        };
                        readonly bic: {
                            readonly type: "string";
                            readonly examples: readonly ["MODRGB21"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly examples: readonly ["GBP"];
                        };
                        readonly countrySpecificDetails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly bankName: {
                                    readonly type: "string";
                                    readonly description: "The name of the destination bank.";
                                    readonly examples: readonly ["Apple Bank"];
                                };
                                readonly bankAddress: {
                                    readonly type: "string";
                                    readonly description: "The address of the destination bank.";
                                    readonly examples: readonly ["2100 Broadway"];
                                };
                                readonly bankCity: {
                                    readonly type: "string";
                                    readonly description: "The city in which the destination bank resides.";
                                    readonly examples: readonly ["New York City"];
                                };
                                readonly bankBranchName: {
                                    readonly type: "string";
                                    readonly description: "The name of the destination bank's branch.";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly bankBranchCode: {
                                    readonly type: "string";
                                    readonly description: "The code of the destination bank's branch.";
                                    readonly examples: readonly ["44-04"];
                                };
                                readonly bankCode: {
                                    readonly type: "string";
                                    readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                };
                                readonly chineseId: {
                                    readonly type: "string";
                                    readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                    readonly examples: readonly ["01101201901018889"];
                                };
                                readonly province: {
                                    readonly type: "string";
                                    readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                    readonly examples: readonly ["Zhejiang"];
                                };
                                readonly business: {
                                    readonly type: "boolean";
                                    readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                    readonly examples: readonly [true];
                                };
                                readonly bankCodeType: {
                                    readonly type: "string";
                                    readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                    readonly enum: readonly ["ABA", "CHIPS"];
                                    readonly examples: readonly ["ABA"];
                                };
                                readonly bankCountry: {
                                    readonly type: "string";
                                    readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                    readonly enum: readonly
                                    readonly examples: readonly ["US"];
                                };
                            };
                        };
                    };
                    readonly description: "Account Identifier";
                };
                readonly redirectedDestination: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                            readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                        };
                        readonly accountNumber: {
                            readonly type: "string";
                            readonly description: "Bank account Sort Code";
                            readonly examples: readonly ["12345678"];
                        };
                        readonly sortCode: {
                            readonly type: "string";
                            readonly description: "Bank account Sort Code";
                            readonly examples: readonly ["000000"];
                        };
                        readonly iban: {
                            readonly type: "string";
                            readonly examples: readonly ["GB20MODR04001401100000"];
                        };
                        readonly bic: {
                            readonly type: "string";
                            readonly examples: readonly ["MODRGB21"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly examples: readonly ["GBP"];
                        };
                        readonly countrySpecificDetails: {
                            readonly type: "object";
                            readonly properties: {
                                readonly bankName: {
                                    readonly type: "string";
                                    readonly description: "The name of the destination bank.";
                                    readonly examples: readonly ["Apple Bank"];
                                };
                                readonly bankAddress: {
                                    readonly type: "string";
                                    readonly description: "The address of the destination bank.";
                                    readonly examples: readonly ["2100 Broadway"];
                                };
                                readonly bankCity: {
                                    readonly type: "string";
                                    readonly description: "The city in which the destination bank resides.";
                                    readonly examples: readonly ["New York City"];
                                };
                                readonly bankBranchName: {
                                    readonly type: "string";
                                    readonly description: "The name of the destination bank's branch.";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly bankBranchCode: {
                                    readonly type: "string";
                                    readonly description: "The code of the destination bank's branch.";
                                    readonly examples: readonly ["44-04"];
                                };
                                readonly bankCode: {
                                    readonly type: "string";
                                    readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                };
                                readonly chineseId: {
                                    readonly type: "string";
                                    readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                    readonly examples: readonly ["01101201901018889"];
                                };
                                readonly province: {
                                    readonly type: "string";
                                    readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                    readonly examples: readonly ["Zhejiang"];
                                };
                                readonly business: {
                                    readonly type: "boolean";
                                    readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                    readonly examples: readonly [true];
                                };
                                readonly bankCodeType: {
                                    readonly type: "string";
                                    readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                    readonly enum: readonly ["ABA", "CHIPS"];
                                    readonly examples: readonly ["ABA"];
                                };
                                readonly bankCountry: {
                                    readonly type: "string";
                                    readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                    readonly enum: readonly
                                    readonly examples: readonly ["US"];
                                };
                            };
                        };
                    };
                    readonly description: "Account Identifier";
                };
                readonly defaultReference: {
                    readonly type: "string";
                    readonly description: "Default reference used for payments to the Beneficiary.";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the Beneficiary. Can be:";
                };
                readonly created: {
                    readonly type: "string";
                    readonly description: "Datetime the Beneficiary was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Id of the account if this beneficiary is a Modulr account, null otherwise";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "External system reference for the Beneficiary";
                };
                readonly approvalRequired: {
                    readonly type: "boolean";
                    readonly description: "Indicates if the beneficiary creation is pending approval";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Id of the customer than owns this beneficiary";
                    readonly examples: readonly ["C0000001"];
                };
                readonly updated: {
                    readonly type: "string";
                    readonly description: "Datetime the Beneficiary was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly address: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly countrySubDivision: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address";
                };
                readonly qualifier: {
                    readonly type: "string";
                    readonly description: "Qualifier for this beneficiary";
                };
                readonly approvalRequestId: {
                    readonly type: "string";
                    readonly description: "Approval request ID for pending records.";
                };
                readonly approvalStatus: {
                    readonly type: "string";
                    readonly description: "Approval status of item.\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`";
                    readonly enum: readonly ["NOTNEEDED", "PENDING", "APPROVED", "REJECTED", "DELETED"];
                };
                readonly accessGroups: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly description: "Access groups associated with beneficiary.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Access groups associated with beneficiary.";
                    };
                };
            };
            readonly description: "Beneficiary";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateCard: {
    readonly body: {
        readonly required: readonly ["authentication", "expiry", "externalRef", "holder", "limit", "productCode"];
        readonly type: "object";
        readonly properties: {
            readonly limit: {
                readonly minimum: 1;
                readonly type: "number";
                readonly description: "Total card authorisation limit.";
                readonly format: "double";
                readonly examples: readonly [1000];
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly expiry: {
                readonly type: "string";
                readonly description: "ISO 8601 date with year & month components only. The supplied value must be in the future (cannot be the current month) and is _inclusive_ of the specified month.";
                readonly examples: readonly ["2018-12"];
            };
            readonly productCode: {
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly type: "string";
                readonly description: "Identifies the _type_ of card to create (GBP consumer, GBP business, etc). Modulr will supply a list of possible values.";
            };
            readonly externalRef: {
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly pattern: "[\\w -]*";
                readonly type: "string";
                readonly description: "Client reference for the newly created card. Maximum of 50 alphanumeric characters (including underscore, hyphen and space).";
            };
            readonly constraints: {
                readonly type: "object";
                readonly properties: {
                    readonly authorisation: {
                        readonly type: "object";
                        readonly properties: {
                            readonly spend: {
                                readonly type: "array";
                                readonly description: "Spending constraints";
                                readonly items: {
                                    readonly required: readonly ["currency"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly description: "A 3 letter ISO 4217 code representing the transaction currency";
                                            readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                            readonly examples: readonly ["GBP"];
                                        };
                                        readonly min: {
                                            readonly type: "number";
                                            readonly description: "Minimum spend amount (inclusive)";
                                            readonly examples: readonly [5];
                                        };
                                        readonly max: {
                                            readonly type: "number";
                                            readonly description: "Maximum spend amount (inclusive)";
                                            readonly examples: readonly [2000];
                                        };
                                    };
                                    readonly description: "Spending constraints";
                                };
                            };
                        };
                        readonly description: "Authorisation constraints";
                    };
                };
                readonly description: "Constraints";
            };
            readonly authentication: {
                readonly required: readonly ["knowledgeBase"];
                readonly type: "object";
                readonly properties: {
                    readonly knowledgeBase: {
                        readonly type: "array";
                        readonly description: "3DS knowledge-based authentication (KBA) answers";
                        readonly items: {
                            readonly required: readonly ["answer", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "3DS knowledge-based authentication answer type";
                                    readonly enum: readonly ["FIRST_PET_NAME", "MATERNAL_GRANDMOTHER_MAIDEN_NAME", "FAVOURITE_CHILDHOOD_FRIEND", "FIRST_CAR", "CITY_PARENTS_MET"];
                                };
                                readonly answer: {
                                    readonly maxLength: 45;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "3DS knowledge-based authentication answer";
                                };
                            };
                            readonly description: "3DS Knowledge-Based Authentication (KBA) answers";
                        };
                    };
                };
                readonly description: "Authentication";
            };
            readonly holder: {
                readonly required: readonly ["billingAddress", "dateOfBirth", "firstName", "lastName", "mobileNumber"];
                readonly type: "object";
                readonly properties: {
                    readonly title: {
                        readonly pattern: "^[0-9a-zA-Z]{1,4}$";
                        readonly type: "string";
                        readonly description: "Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.";
                        readonly examples: readonly ["Mr"];
                    };
                    readonly firstName: {
                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                        readonly type: "string";
                        readonly description: "Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                        readonly examples: readonly ["Joe"];
                    };
                    readonly lastName: {
                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                        readonly type: "string";
                        readonly description: "Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                        readonly examples: readonly ["Bloggs"];
                    };
                    readonly billingAddress: {
                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly maxLength: 50;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "First line of address";
                                readonly examples: readonly ["Floor 10"];
                            };
                            readonly addressLine2: {
                                readonly maxLength: 50;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Second line of address";
                                readonly examples: readonly ["80 George Street"];
                            };
                            readonly postTown: {
                                readonly maxLength: 20;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Post town";
                                readonly examples: readonly ["EDINBURGH"];
                            };
                            readonly postCode: {
                                readonly maxLength: 10;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Postcode";
                                readonly examples: readonly ["EH2 3BU"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "Country (ISO 3166 alpha-2 country code)";
                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                readonly examples: readonly ["GB"];
                            };
                        };
                        readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                    };
                    readonly dateOfBirth: {
                        readonly type: "string";
                        readonly description: "Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.";
                        readonly format: "date";
                        readonly examples: readonly ["2001-01-01"];
                    };
                    readonly mobileNumber: {
                        readonly type: "string";
                        readonly description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.";
                        readonly examples: readonly ["+447123456000"];
                    };
                    readonly email: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                        readonly description: "Cardholder email";
                        readonly examples: readonly ["cardholder@example.com"];
                    };
                };
                readonly description: "CardHolder";
            };
        };
        readonly description: "Card";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly aid: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The account which card funds will be raised from.";
                };
            };
            readonly required: readonly ["aid"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["createdDate", "cvv2", "externalRef", "id", "maxLimit", "pan"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Card identifier. Maximum of 10 alphanumeric characters.";
                };
                readonly pan: {
                    readonly type: "string";
                    readonly description: "Full card PAN.";
                };
                readonly maskedPan: {
                    readonly type: "string";
                    readonly description: "Masked card PAN.";
                };
                readonly cvv2: {
                    readonly type: "string";
                    readonly description: "Card CVV2 number.";
                };
                readonly externalRef: {
                    readonly type: "string";
                    readonly description: "Client reference for the newly created card.";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "The creation date of the card";
                    readonly format: "date-time";
                };
                readonly maxLimit: {
                    readonly type: "string";
                    readonly description: "Maximum Limit which can be set on this card and is the maximum lifetime spend the card can have";
                    readonly examples: readonly ["4000.0"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateCollectionSchedule: {
    readonly body: {
        readonly required: readonly ["currency", "frequency", "numberOfPayments"];
        readonly type: "object";
        readonly properties: {
            readonly frequency: {
                readonly type: "string";
                readonly description: "Frequency for direct-debit collection. Can be one of ONCE, MONTHLY, QUARTERLY, SEMI_ANNUALLY, ANNUALLY, WEEKLY, EVERY_TWO_WEEKS, EVERY_FOUR_WEEKS";
                readonly enum: readonly ["ONCE", "MONTHLY", "QUARTERLY", "SEMI_ANNUALLY", "ANNUALLY", "WEEKLY", "EVERY_TWO_WEEKS", "EVERY_FOUR_WEEKS"];
            };
            readonly numberOfPayments: {
                readonly minimum: 1;
                readonly type: "integer";
                readonly description: "Number of payments for direct-debit collection";
                readonly format: "int32";
                readonly maximum: 2147483647;
            };
            readonly firstPaymentAmount: {
                readonly maximum: 2147483647;
                readonly minimum: 0.01;
                readonly type: "number";
                readonly description: "Amount of the first collection payment";
                readonly examples: readonly [100];
            };
            readonly firstPaymentDate: {
                readonly type: "string";
                readonly description: "Date of the first collection payment. yyyy-MM-dd";
                readonly examples: readonly ["2018-01-10"];
            };
            readonly regularPaymentAmount: {
                readonly maximum: 2147483647;
                readonly minimum: 0.01;
                readonly type: "number";
                readonly description: "Amount of the regular collection payments";
                readonly examples: readonly [100];
            };
            readonly regularPaymentStartDate: {
                readonly type: "string";
                readonly description: "Start date of the regular collection payment. yyyy-MM-dd";
                readonly examples: readonly ["2018-01-10"];
            };
            readonly currency: {
                readonly type: "string";
                readonly description: "Currency in which payment should be made. Can be one of GBP, EUR, AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BHD, BIF, BMD, BND, BOB, BOV, BRL, BSD, BTN, BWP, BYN, BZD, CAD, CDF, CHE, CHF, CHW, CLF, CLP, CNY, COP, COU, CRC, CUC, CUP, CVE, CZK, DJF, DKK, DOP, DZD, EGP, ERN, ETB, FJD, FKP, GEL, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, INR, IQD, IRR, ISK, JMD, JOD, JPY, KES, KGS, KHR, KMF, KPW, KRW, KWD, KYD, KZT, LAK, LBP, LKR, LRD, LSL, LYD, MAD, MDL, MGA, MKD, MMK, MNT, MOP, MRU, MUR, MVR, MWK, MXN, MXV, MYR, MZN, NAD, NGN, NIO, NOK, NPR, NZD, OMR, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RSD, RUB, RWF, SAR, SBD, SCR, SDG, SEK, SGD, SLE, SLL, SOS, SRD, SSP, STN, SVC, SYP, SZL, SHP, THB, TJS, TMT, TND, TOP, TRY, TTD, TWD, TZS, UAH, UGX, USD, USN, UYI, UYU, UYW, UZS, VES, VND, VUV, WST, XAF, XAG, XAU, XBA, XBB, XBC, XBD, XCD, XDR, XOF, XPD, XPF, XPT, XSU, XTS, XUA, XXX, YER, ZAR, ZMW, ZWL";
                readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
            };
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w-\\s]*";
                readonly type: "string";
                readonly description: "External Reference for collection schedule, should contain only alphanumeric characters, underscore, hyphen and space.";
                readonly examples: readonly ["REFERENCE - 12"];
            };
        };
        readonly description: "Details of collection to create.";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of mandate to create collection for.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["createdDate", "frequency", "id", "numberOfPayments", "status"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for direct-debit collection.";
                    readonly examples: readonly ["Q0000001"];
                };
                readonly frequency: {
                    readonly type: "string";
                    readonly description: "Frequency for direct-debit collection";
                    readonly examples: readonly ["MONTHLY"];
                };
                readonly numberOfPayments: {
                    readonly type: "integer";
                    readonly description: "Number of payments for direct-debit collection";
                    readonly format: "int32";
                    readonly examples: readonly [12];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly firstPaymentAmount: {
                    readonly type: "number";
                    readonly description: "Amount of the first collection payment";
                    readonly examples: readonly [100];
                };
                readonly firstPaymentDate: {
                    readonly type: "string";
                    readonly description: "Date of the first collection payment. Format is yyyy-MM-dd.";
                    readonly examples: readonly ["2018-01-10"];
                };
                readonly regularPaymentAmount: {
                    readonly type: "number";
                    readonly description: "Amount of the regular collection payments";
                    readonly examples: readonly [100];
                };
                readonly regularPaymentStartDate: {
                    readonly type: "string";
                    readonly description: "Start date of the regular collection payment. Format is yyyy-MM-dd.";
                    readonly examples: readonly ["2018-01-10"];
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when direct-debit collection was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the direct-debit collection. Can be one of ACTIVE, PENDING, SUBMITTED, REJECTED, CANCELLED\n\n`ACTIVE` `PENDING` `SUBMITTED` `REJECTED` `CANCELLED`";
                    readonly enum: readonly ["ACTIVE", "PENDING", "SUBMITTED", "REJECTED", "CANCELLED"];
                    readonly examples: readonly ["PROCESSING"];
                };
                readonly externalReference: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateCustomer: {
    readonly body: {
        readonly required: readonly ["legalEntity", "type"];
        readonly type: "object";
        readonly properties: {
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w \\-]*";
                readonly type: "string";
                readonly description: "External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long";
            };
            readonly name: {
                readonly maxLength: 100;
                readonly minLength: 0;
                readonly pattern: "^([_'@,&()£$€¥=#%\\‘\\’:;/<>«»\\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[\\p{L}0-9])+[_'@,&()£$€¥=#%\\‘\\’:;/<>«»\\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*";
                readonly type: "string";
                readonly description: "AlphaNumeric characters plus [ _ ' @ , & £ $ € ¥ = # % ‘ ’ : ; \\ / < > « »  ! ‘ “ ” . ? - *{ }  + % ( )]. Mandatory for all types except 'INDIVIDUAL and PCM_INDIVIDUAL'";
            };
            readonly companyRegNumber: {
                readonly maxLength: 40;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Company registration number. Mandatory for 'LLC' and 'PLC'";
            };
            readonly registeredAddress: {
                readonly required: readonly ["addressLine1", "postTown"];
                readonly type: "object";
                readonly properties: {
                    readonly addressLine1: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly addressLine2: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postTown: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postCode: {
                        readonly maxLength: 10;
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly enum: readonly
                    };
                    readonly countrySubDivision: {
                        readonly maxLength: 35;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                };
                readonly description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'";
            };
            readonly tradingAddress: {
                readonly required: readonly ["addressLine1", "postTown"];
                readonly type: "object";
                readonly properties: {
                    readonly addressLine1: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly addressLine2: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postTown: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postCode: {
                        readonly maxLength: 10;
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly enum: readonly
                    };
                    readonly countrySubDivision: {
                        readonly maxLength: 35;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                };
                readonly description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'";
            };
            readonly industryCode: {
                readonly maxLength: 5;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Mandatory for all types except 'INDIVIDUAL', 'PCM_INDIVIDUAL' and 'PCM_BUSINESS'. In-house KYC partners -> Refer to Modulr Industry Code list. Outsourced KYC partners -> custom codes allowed.";
            };
            readonly tcsVersion: {
                readonly maximum: 1000;
                readonly minimum: 1;
                readonly type: "integer";
                readonly description: "Terms and conditions version. Mandatory for all types except 'PCM_INDIVIDUAL' and 'PCM_BUSINESS'";
                readonly format: "int32";
            };
            readonly type: {
                readonly type: "string";
                readonly description: "Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n11. TRUST -> trust customer\n12. PREQUALIFIED -> only for use by customers who have been pre-authorised by Modulr";
                readonly enum: readonly ["LLC", "PLC", "SOLETRADER", "OPARTNRSHP", "LPARTNRSHP", "LLP", "CHARITY", "INDIVIDUAL", "PCM_INDIVIDUAL", "PCM_BUSINESS", "TRUST", "PREQUALIFIED"];
            };
            readonly expectedMonthlySpend: {
                readonly maximum: 2147483647;
                readonly minimum: 0;
                readonly type: "integer";
                readonly description: "Mandatory for all types except 'PCM_INDIVIDUAL' and 'PCM_BUSINESS'";
                readonly format: "int32";
            };
            readonly associates: {
                readonly type: "array";
                readonly description: "Mandatory for all types except 'PCM_BUSINESS'";
                readonly items: {
                    readonly required: readonly ["firstName", "homeAddress", "lastName", "type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Type of associate";
                            readonly enum: readonly ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL", "PCM_INDIVIDUAL", "SIGNATORY", "TRUST_SETTLOR", "TRUST_BENEFICIARY", "TRUST_TRUSTEE", "PREQUALIFIED"];
                        };
                        readonly firstName: {
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly pattern: "^[\\p{L}' -]+$";
                            readonly type: "string";
                            readonly description: "Letters, hyphens and apostrophes";
                        };
                        readonly middleName: {
                            readonly pattern: "^[\\p{L}' -]*$";
                            readonly type: "string";
                            readonly description: "Letters, hyphens and apostrophes";
                        };
                        readonly lastName: {
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly pattern: "^[\\p{L}' -]+$";
                            readonly type: "string";
                            readonly description: "Letters, hyphens and apostrophes";
                        };
                        readonly dateOfBirth: {
                            readonly type: "string";
                            readonly description: "Date in yyyy-MM-dd format. If associate is a non-applicant director or partner, then partial DOB of yyyy-MM format is allowed. Valid age is from 16 to 100 years. If Applicant then minimum age required is 18 years for specific partners. Required for all associate types except PCM_INDIVIDUAL.";
                        };
                        readonly ownership: {
                            readonly maximum: 100;
                            readonly minimum: 1;
                            readonly type: "integer";
                            readonly description: "Ownership percentage for Partners";
                            readonly format: "int32";
                        };
                        readonly homeAddress: {
                            readonly required: readonly ["addressLine1", "postTown"];
                            readonly type: "object";
                            readonly properties: {
                                readonly addressLine1: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                                readonly addressLine2: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                                readonly postTown: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                                readonly postCode: {
                                    readonly maxLength: 10;
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                    readonly enum: readonly
                                };
                                readonly countrySubDivision: {
                                    readonly maxLength: 35;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                            };
                            readonly description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'";
                        };
                        readonly applicant: {
                            readonly type: "boolean";
                            readonly description: "Indicates if the associate is the applicant. Only one associate can be marked as such.";
                        };
                        readonly email: {
                            readonly maxLength: 100;
                            readonly minLength: 0;
                            readonly pattern: "[^\\s@]+@[^\\s@]+\\.[^\\s@]+";
                            readonly type: "string";
                            readonly description: "Contact email address for applicants";
                        };
                        readonly phone: {
                            readonly type: "string";
                            readonly description: "Contact phone number for applicants, will be formatted into international number pattern";
                        };
                        readonly documentInfo: {
                            readonly type: "array";
                            readonly description: "Information on uploaded documents";
                            readonly items: {
                                readonly required: readonly ["fileName", "path", "uploadedDate"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly path: {
                                        readonly type: "string";
                                    };
                                    readonly fileName: {
                                        readonly type: "string";
                                    };
                                    readonly uploadedDate: {
                                        readonly type: "string";
                                        readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                        readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                                    };
                                };
                                readonly description: "Document";
                            };
                        };
                        readonly additionalIdentifiers: {
                            readonly type: "array";
                            readonly description: "Additional identifiers";
                            readonly items: {
                                readonly required: readonly ["type", "value"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Type of additional personal identifier";
                                        readonly enum: readonly ["BSN"];
                                    };
                                    readonly value: {
                                        readonly type: "string";
                                        readonly description: "Personal identifier value";
                                    };
                                };
                                readonly description: "Additional identifiers";
                            };
                        };
                        readonly complianceData: {
                            readonly required: readonly ["relationship"];
                            readonly type: "object";
                            readonly properties: {
                                readonly relationship: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                            };
                            readonly description: "Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.";
                        };
                    };
                    readonly description: "Mandatory for all types except 'PCM_BUSINESS'";
                };
            };
            readonly documentInfo: {
                readonly type: "array";
                readonly description: "information on uploaded documents";
                readonly items: {
                    readonly required: readonly ["fileName", "path", "uploadedDate"];
                    readonly type: "object";
                    readonly properties: {
                        readonly path: {
                            readonly type: "string";
                        };
                        readonly fileName: {
                            readonly type: "string";
                        };
                        readonly uploadedDate: {
                            readonly type: "string";
                            readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                            readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                        };
                    };
                    readonly description: "Document";
                };
            };
            readonly legalEntity: {
                readonly type: "string";
                readonly description: "Legal entity of the customer";
                readonly enum: readonly ["GB", "NL", "IE"];
            };
            readonly provisionalCustomerId: {
                readonly type: "string";
                readonly description: "Reference to provisional customer in onboarding flow";
            };
            readonly customerTrust: {
                readonly required: readonly ["trustNature"];
                readonly type: "object";
                readonly properties: {
                    readonly trustNature: {
                        readonly type: "string";
                        readonly description: "Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.";
                        readonly enum: readonly ["BARE_TRUSTS", "INTEREST_IN_POSSESSION_TRUSTS", "DISCRETIONARY_TRUSTS", "ACCUMULATION_TRUSTS", "MIXED_TRUSTS", "SETTLOR_INTERESTED_TRUSTS", "NON_RESIDENT_TRUSTS", "OFFSHORE_TRUSTS", "FAMILY_LIVING_TRUST", "PILOT_TRUST", "VULNERABLE_BENEFICIARY_TRUST", "CHARITABLE_TRUSTS", "IRREVOCABLE_LIFE_INSURANCE_TRUST", "TESTAMENTARY_TRUSTS", "OTHER"];
                    };
                };
                readonly description: "Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.";
            };
            readonly taxProfile: {
                readonly required: readonly ["taxIdentifier"];
                readonly type: "object";
                readonly properties: {
                    readonly taxIdentifier: {
                        readonly maxLength: 15;
                        readonly minLength: 0;
                        readonly type: "string";
                        readonly description: "Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                    };
                };
                readonly description: "Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
            };
            readonly complianceData: {
                readonly type: "object";
                readonly properties: {
                    readonly typeDescription: {
                        readonly maxLength: 200;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                };
                readonly description: "Required for customers of type PREQUALIFIED. Not allowed for all other customer types.";
            };
        };
        readonly description: "Details of customer to create";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["createdDate", "id", "name", "status", "type", "verificationStatus"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for a Customer. Begins with 'C'";
                    readonly examples: readonly ["C00000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Customer's company name - must be unique across the Modulr platform.";
                };
                readonly brandNames: {
                    readonly type: "array";
                    readonly description: "The customers brand name(s)";
                    readonly items: {
                        readonly required: readonly ["id", "name"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Brand Name";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The Brand Name";
                            };
                        };
                        readonly description: "BrandName";
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`";
                    readonly enum: readonly ["LLC", "PLC", "SOLETRADER", "OPARTNRSHP", "LPARTNRSHP", "LLP", "CHARITY", "INDIVIDUAL", "PCM_INDIVIDUAL", "PCM_BUSINESS", "TRUST", "PREQUALIFIED"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`";
                    readonly enum: readonly ["ACTIVE", "CLOSED"];
                };
                readonly verificationStatus: {
                    readonly type: "string";
                    readonly description: "How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                    readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                };
                readonly companyRegNumber: {
                    readonly type: "string";
                    readonly description: "The company registration / incorporation number of the company. Only applicable for companies registered with Companies House";
                };
                readonly expectedMonthlySpend: {
                    readonly type: "integer";
                    readonly description: "Indication of the monthly spend of the customer.";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly registeredAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly countrySubDivision: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address";
                };
                readonly tradingAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly countrySubDivision: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address";
                };
                readonly partnerId: {
                    readonly type: "string";
                    readonly description: "The owning partner identifier";
                };
                readonly associates: {
                    readonly type: "array";
                    readonly description: "Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.";
                    readonly items: {
                        readonly required: readonly ["dateOfBirth", "firstName", "id", "lastName", "type", "verificationStatus"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Associate";
                            };
                            readonly firstName: {
                                readonly type: "string";
                                readonly description: "Associate's first name(s)";
                            };
                            readonly middleName: {
                                readonly type: "string";
                                readonly description: "Associate's middle name";
                            };
                            readonly lastName: {
                                readonly type: "string";
                                readonly description: "Associate's surname";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "Associate's email address";
                            };
                            readonly phone: {
                                readonly type: "string";
                                readonly description: "Associate's phone number, in international number format";
                            };
                            readonly applicant: {
                                readonly type: "boolean";
                                readonly description: "Indicates which Associate originally applied for the Modulr account";
                            };
                            readonly ownership: {
                                readonly type: "integer";
                                readonly description: "The Associate's percentage ownership of the Customer";
                                readonly format: "int32";
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`";
                                readonly enum: readonly ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL", "PCM_INDIVIDUAL", "SIGNATORY", "TRUST_SETTLOR", "TRUST_BENEFICIARY", "TRUST_TRUSTEE", "PREQUALIFIED"];
                            };
                            readonly dateOfBirth: {
                                readonly type: "string";
                                readonly description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown";
                            };
                            readonly verificationStatus: {
                                readonly type: "string";
                                readonly description: "How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                                readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                            };
                            readonly homeAddress: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly type: "string";
                                    };
                                    readonly addressLine2: {
                                        readonly type: "string";
                                    };
                                    readonly postTown: {
                                        readonly type: "string";
                                    };
                                    readonly postCode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly countrySubDivision: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Address";
                            };
                            readonly documentInfo: {
                                readonly type: "array";
                                readonly description: "Documents gathered during Customer Due Diligence checks on an Associate.";
                                readonly items: {
                                    readonly required: readonly ["fileName", "path", "uploadedDate"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly path: {
                                            readonly type: "string";
                                        };
                                        readonly fileName: {
                                            readonly type: "string";
                                        };
                                        readonly uploadedDate: {
                                            readonly type: "string";
                                            readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                            readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                                        };
                                    };
                                    readonly description: "Document";
                                };
                            };
                            readonly additionalPersonalIdentifiers: {
                                readonly type: "array";
                                readonly description: "Additional personal identifier(s)";
                                readonly items: {
                                    readonly required: readonly ["type", "value"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of Additional Personal Identifier\n\n`BSN`";
                                            readonly enum: readonly ["BSN"];
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                            readonly description: "Additional Personal Identifier value";
                                        };
                                    };
                                    readonly description: "AdditionalPersonalIdentifier";
                                };
                            };
                            readonly complianceData: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly relationship: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.";
                            };
                        };
                        readonly description: "Associate";
                    };
                };
                readonly industryCode: {
                    readonly type: "string";
                };
                readonly tcsVersion: {
                    readonly type: "integer";
                    readonly description: "Version of the Modulr Account Terms and Conditions the Customer has agreed to.";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly documentInfo: {
                    readonly type: "array";
                    readonly description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.";
                    readonly items: {
                        readonly required: readonly ["fileName", "path", "uploadedDate"];
                        readonly type: "object";
                        readonly properties: {
                            readonly path: {
                                readonly type: "string";
                            };
                            readonly fileName: {
                                readonly type: "string";
                            };
                            readonly uploadedDate: {
                                readonly type: "string";
                                readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                            };
                        };
                        readonly description: "Document";
                    };
                };
                readonly externalReference: {
                    readonly type: "string";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly delegate: {
                    readonly required: readonly ["created", "id", "name", "roleId", "status", "updated"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique reference for the Delegate.";
                            readonly examples: readonly ["D0000001"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name for the Delegate";
                        };
                        readonly address: {
                            readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                            readonly type: "object";
                            readonly properties: {
                                readonly addressLine1: {
                                    readonly type: "string";
                                };
                                readonly addressLine2: {
                                    readonly type: "string";
                                };
                                readonly postTown: {
                                    readonly type: "string";
                                };
                                readonly postCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly countrySubDivision: {
                                    readonly type: "string";
                                };
                            };
                            readonly description: "Address";
                        };
                        readonly roleId: {
                            readonly type: "string";
                            readonly description: "The id of the Role assigned to the delegate";
                            readonly examples: readonly ["R02002M5"];
                        };
                        readonly externalReference: {
                            readonly type: "string";
                            readonly description: "External system reference for the Delegate";
                        };
                        readonly partner: {
                            readonly type: "string";
                            readonly description: "Partner Bid.";
                            readonly examples: readonly ["R0000001"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "Status of the Delegate.";
                        };
                        readonly created: {
                            readonly type: "string";
                            readonly description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                            readonly format: "date-time";
                        };
                        readonly updated: {
                            readonly type: "string";
                            readonly description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                            readonly format: "date-time";
                        };
                    };
                    readonly description: "Delegate";
                };
                readonly legalEntity: {
                    readonly type: "string";
                    readonly description: "Legal entity of the customer\n\n`GB` `NL` `IE`";
                    readonly enum: readonly ["GB", "NL", "IE"];
                };
                readonly customerTrust: {
                    readonly type: "object";
                    readonly properties: {
                        readonly trustNature: {
                            readonly type: "string";
                            readonly enum: readonly ["BARE_TRUSTS", "INTEREST_IN_POSSESSION_TRUSTS", "DISCRETIONARY_TRUSTS", "ACCUMULATION_TRUSTS", "MIXED_TRUSTS", "SETTLOR_INTERESTED_TRUSTS", "NON_RESIDENT_TRUSTS", "OFFSHORE_TRUSTS", "FAMILY_LIVING_TRUST", "PILOT_TRUST", "VULNERABLE_BENEFICIARY_TRUST", "CHARITABLE_TRUSTS", "IRREVOCABLE_LIFE_INSURANCE_TRUST", "TESTAMENTARY_TRUSTS", "OTHER"];
                            readonly description: "`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`";
                        };
                    };
                    readonly description: "Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.";
                };
                readonly taxProfile: {
                    readonly required: readonly ["taxIdentifier"];
                    readonly type: "object";
                    readonly properties: {
                        readonly taxIdentifier: {
                            readonly type: "string";
                            readonly description: "Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                        };
                    };
                    readonly description: "Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                };
                readonly complianceData: {
                    readonly type: "object";
                    readonly properties: {
                        readonly typeDescription: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Required for customers of type PREQUALIFIED. Not allowed for all other customer types.";
                };
            };
            readonly description: "A Customer is a single legal entity that can have 1 or more accounts";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateMandate: {
    readonly body: {
        readonly required: readonly ["accountName", "accountNumber", "address", "externalReference", "name", "phone", "reference", "sortCode"];
        readonly type: "object";
        readonly properties: {
            readonly name: {
                readonly maxLength: 40;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Name for mandate";
            };
            readonly reference: {
                readonly maxLength: 18;
                readonly minLength: 6;
                readonly pattern: "^[a-zA-Z 0-9\\.\\&\\/-]+$";
                readonly type: "string";
                readonly description: "Mandate reference, should contain only letters, numbers, space, dot, ampersand, forward-slash and hyphen";
                readonly examples: readonly ["REFER-1.2"];
            };
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w-\\s]*";
                readonly type: "string";
                readonly description: "External reference for mandate";
            };
            readonly accountName: {
                readonly maxLength: 100;
                readonly minLength: 1;
                readonly type: "string";
                readonly description: "Payee's account name";
            };
            readonly sortCode: {
                readonly pattern: "\\p{Digit}{6}";
                readonly type: "string";
                readonly description: "Payee's sort code of account for which direct-debit-mandate has to be created.";
                readonly examples: readonly ["000000"];
            };
            readonly accountNumber: {
                readonly pattern: "\\p{Digit}{8}";
                readonly type: "string";
                readonly description: "Payee's account number for which direct-debit-mandate has to be created.";
                readonly examples: readonly ["12345678"];
            };
            readonly address: {
                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                readonly type: "object";
                readonly properties: {
                    readonly addressLine1: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly addressLine2: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postTown: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postCode: {
                        readonly maxLength: 8;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly enum: readonly
                    };
                };
            };
            readonly phone: {
                readonly maxLength: 14;
                readonly minLength: 0;
                readonly pattern: "\\p{Digit}+";
                readonly type: "string";
                readonly description: "Payee's phone number";
            };
            readonly email: {
                readonly maxLength: 100;
                readonly minLength: 0;
                readonly pattern: "[^\\s@]+@[^\\s@]+\\.[^\\s@]+";
                readonly type: "string";
                readonly description: "Payee's email address";
            };
            readonly payeeAccountBid: {
                readonly type: "string";
                readonly description: "Payee's accountBid";
            };
        };
        readonly description: "Details of the Direct Debit mandate.";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of account to create Direct Debit for.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["accountId", "accountNumber", "createdDate", "externalReference", "id", "nextValidCollectionDate", "reference", "sortCode", "status"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for direct-debit-mandate.";
                    readonly examples: readonly ["G0000001"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Unique id for account for this mandate.";
                    readonly examples: readonly ["A0000001"];
                };
                readonly reference: {
                    readonly type: "string";
                    readonly description: "DDI reference that was used during creation.";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "External reference that was used during creation (appears on the bank statement).";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when direct-debit-mandate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the direct-debit-mandate. mandates must be 'ACTIVE' to make collections. Can be one of PENDING, SUBMITTED, ACTIVE, SUSPENDED, REJECTED, CANCELLED\n\n`PENDING` `SUBMITTED` `ACTIVE` `SUSPENDED` `REJECTED` `CANCELLED`";
                    readonly enum: readonly ["PENDING", "SUBMITTED", "ACTIVE", "SUSPENDED", "REJECTED", "CANCELLED"];
                    readonly examples: readonly ["ACTIVE"];
                };
                readonly nextValidCollectionDate: {
                    readonly type: "string";
                    readonly description: "The earliest date a collection can be created. Format is yyyy-MM-dd.";
                    readonly examples: readonly ["2018-01-10"];
                };
                readonly 'Name given on Mandate': {
                    readonly type: "string";
                };
                readonly 'Address given on Mandate': {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly maxLength: 8;
                            readonly minLength: 0;
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly enum: readonly
                            readonly description: "`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                        };
                    };
                };
                readonly sortCode: {
                    readonly type: "string";
                    readonly description: "Sort Code of the account for which direct-debit-mandate has been created.";
                    readonly examples: readonly ["123456"];
                };
                readonly accountNumber: {
                    readonly type: "string";
                    readonly description: "Account Number for which direct-debit-mandate has been created.";
                    readonly examples: readonly ["87654321"];
                };
                readonly payeeAccountBid: {
                    readonly type: "string";
                    readonly description: "Unique id for individual recipient account used for internal transfers";
                    readonly examples: readonly ["A0000001"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateOutboundCop: {
    readonly body: {
        readonly required: readonly ["accountNumber", "accountType", "name", "paymentAccountId", "sortCode"];
        readonly type: "object";
        readonly properties: {
            readonly paymentAccountId: {
                readonly type: "string";
                readonly description: "The identifier of the account that a subsequent payment will be initiated from.";
                readonly examples: readonly ["A123AAA4"];
            };
            readonly sortCode: {
                readonly pattern: "^[0-9]{6}$";
                readonly type: "string";
                readonly description: "The sort code of the account.";
                readonly examples: readonly ["000000"];
            };
            readonly accountNumber: {
                readonly pattern: "^[0-9]{8}$";
                readonly type: "string";
                readonly description: "The account number.";
                readonly examples: readonly ["12345678"];
            };
            readonly secondaryAccountId: {
                readonly maxLength: 140;
                readonly minLength: 1;
                readonly pattern: "^.{0}$|^\0$|^([^\0])+$";
                readonly type: "string";
                readonly description: "Additional information used in conjunction with the Sort Code and Account Number to identify the account (such as a Building Society roll number).";
                readonly examples: readonly ["A-1234567890"];
            };
            readonly accountType: {
                readonly type: "string";
                readonly description: "The type of account, either a personal or business account.";
                readonly enum: readonly ["PERSONAL", "BUSINESS"];
                readonly examples: readonly ["PERSONAL"];
            };
            readonly name: {
                readonly maxLength: 140;
                readonly minLength: 1;
                readonly pattern: "^.{0}$|^\0$|^([^\0])+$";
                readonly type: "string";
                readonly description: "The name to match the account name against.";
                readonly examples: readonly ["Joe Bloggs"];
            };
        };
        readonly description: "Details of Account Name Check Request";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["id", "result"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for the account name check.";
                    readonly examples: readonly ["C12001569Z"];
                };
                readonly result: {
                    readonly required: readonly ["code"];
                    readonly type: "object";
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "The result of the account name check.\n\n`MATCHED` `NOT_MATCHED` `CLOSE_MATCH` `BUSINESS_ACCOUNT_NAME_MATCHED` `PERSONAL_ACCOUNT_NAME_MATCHED` `BUSINESS_ACCOUNT_CLOSE_MATCH` `PERSONAL_ACCOUNT_CLOSE_MATCH` `ACCOUNT_DOES_NOT_EXIST` `SECONDARY_ACCOUNT_ID_NOT_FOUND` `ACCOUNT_NOT_SUPPORTED` `OPTED_OUT` `ACCOUNT_SWITCHED` `WRONG_PARTICIPANT` `NO_RESPONSE` `NOT_ENROLLED`";
                            readonly enum: readonly ["MATCHED", "NOT_MATCHED", "CLOSE_MATCH", "BUSINESS_ACCOUNT_NAME_MATCHED", "PERSONAL_ACCOUNT_NAME_MATCHED", "BUSINESS_ACCOUNT_CLOSE_MATCH", "PERSONAL_ACCOUNT_CLOSE_MATCH", "ACCOUNT_DOES_NOT_EXIST", "SECONDARY_ACCOUNT_ID_NOT_FOUND", "ACCOUNT_NOT_SUPPORTED", "OPTED_OUT", "ACCOUNT_SWITCHED", "WRONG_PARTICIPANT", "NO_RESPONSE", "NOT_ENROLLED"];
                            readonly examples: readonly ["MATCHED"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The actual name on the account (as provided by the participating organisation).";
                            readonly examples: readonly ["Joseph Bloggs"];
                        };
                    };
                    readonly description: "Account Name Check Result";
                };
            };
            readonly description: "Account Name Check Response";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["code", "message"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                };
                readonly description: "Account Name Check Error Response";
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["code", "message"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                };
                readonly description: "Account Name Check Error Response";
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '429': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["code", "message"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                };
                readonly description: "Account Name Check Error Response";
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '500': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["code", "message"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                };
                readonly description: "Account Name Check Error Response";
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '503': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["code", "message"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                };
                readonly description: "Account Name Check Error Response";
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreatePaymentInitiation: {
    readonly body: {
        readonly required: readonly ["aspspId", "destination", "paymentAmount", "paymentReference"];
        readonly type: "object";
        readonly properties: {
            readonly paymentAmount: {
                readonly required: readonly ["currency", "value"];
                readonly type: "object";
                readonly properties: {
                    readonly currency: {
                        readonly type: "string";
                        readonly description: "Currency of the account in ISO 4217 format. Only allowable value is GBP";
                        readonly enum: readonly ["GBP"];
                    };
                    readonly value: {
                        readonly maximum: 2147483647;
                        readonly minimum: 0.01;
                        readonly type: "number";
                        readonly description: "Amount of the payment in Major Currency Units - '1' = 1.00 GBP";
                        readonly examples: readonly [100];
                    };
                };
                readonly description: "The amount of the payment";
            };
            readonly paymentReference: {
                readonly type: "string";
                readonly description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.";
                readonly examples: readonly ["Invoice ABC123"];
            };
            readonly destination: {
                readonly required: readonly ["type"];
                readonly type: "object";
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Indicates the type of destination. Can be one of ACCOUNT, SCAN";
                        readonly enum: readonly ["ACCOUNT", "SCAN"];
                    };
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Identifier of the destination account if using ACCOUNT type";
                        readonly examples: readonly ["A1100001"];
                    };
                    readonly accountNumber: {
                        readonly pattern: "^[0-9]{8}$";
                        readonly type: "string";
                        readonly description: "Account Number of destination account if using SCAN type";
                        readonly examples: readonly ["12345678"];
                    };
                    readonly sortCode: {
                        readonly pattern: "^[0-9]{6}$";
                        readonly type: "string";
                        readonly description: "Sort Code of destination account if using SCAN type";
                        readonly examples: readonly ["000000"];
                    };
                    readonly name: {
                        readonly maxLength: 70;
                        readonly minLength: 0;
                        readonly type: "string";
                        readonly description: "Name of destination account if using SCAN type (this may be truncated)";
                        readonly examples: readonly ["Test"];
                    };
                };
                readonly description: "The destination account for the payment";
            };
            readonly aspspId: {
                readonly type: "string";
                readonly description: "Identifier for ASPSP being used for the payment";
                readonly examples: readonly ["H100000001"];
            };
            readonly paymentContext: {
                readonly type: "object";
                readonly properties: {
                    readonly paymentContextCode: {
                        readonly type: "string";
                        readonly description: "Indicates type of Payment Context, can be one of BILLPAYMENT, ECOMMERCEGOODS, ECOMMERCESERVICES, OTHER, PARTYTOPARTY. If no value or paymentContext is provided, PARTYTOPARTY is considered the default value.";
                        readonly enum: readonly ["BillPayment", "EcommerceGoods", "EcommerceServices", "Other", "PartyToParty", "BILLPAYMENT", "ECOMMERCEGOODS", "ECOMMERCESERVICES", "OTHER", "PARTYTOPARTY"];
                    };
                    readonly deliveryAddress: {
                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "First line of the address";
                            };
                            readonly addressLine2: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Second line of the address";
                            };
                            readonly postTown: {
                                readonly maxLength: 35;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The post town";
                            };
                            readonly postCode: {
                                readonly maxLength: 16;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The postcode";
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "The country";
                                readonly enum: readonly
                            };
                        };
                        readonly description: "Information that locates and identifies a specific address, as defined by postal services or in free format text, must be specified if paymentContextCode is ECOMMERCEGOODS";
                    };
                    readonly merchantCategoryCode: {
                        readonly maxLength: 4;
                        readonly minLength: 3;
                        readonly type: "string";
                        readonly description: "Merchant category code conform to ISO 18245, related to the type of services or goods provided for the transaction. Must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES";
                    };
                    readonly merchantCustomerIdentification: {
                        readonly maxLength: 70;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly description: "Merchant customer identification, must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES";
                    };
                };
                readonly description: "Payment context for the initiation request";
            };
        };
        readonly description: "Request object to Initiate Payment";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly type: "object";
            readonly properties: {
                readonly paymentInitiationId: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the payment initiation request at Modulr";
                    readonly examples: readonly ["I000000001"];
                };
                readonly redirectUrl: {
                    readonly type: "string";
                    readonly description: "A redirect URL for the user to authorise the payment initiation request at the ASPSP";
                    readonly examples: readonly ["https://www.bankofmoney.com/authorize"];
                };
            };
            readonly description: "Response object to Initiate Payment";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreatePayments: {
    readonly body: {
        readonly required: readonly ["accountId", "amount", "description", "payerDetail", "type"];
        readonly type: "object";
        readonly properties: {
            readonly accountId: {
                readonly type: "string";
                readonly description: "The account to be credited";
            };
            readonly payerDetail: {
                readonly required: readonly ["identifier", "name"];
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Party name";
                    };
                    readonly identifier: {
                        readonly required: readonly ["type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Account identifier type";
                                readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                            };
                            readonly accountNumber: {
                                readonly type: "string";
                                readonly description: "Account number";
                            };
                            readonly sortCode: {
                                readonly type: "string";
                                readonly description: "Sortcode";
                            };
                            readonly iban: {
                                readonly type: "string";
                                readonly description: "IBAN";
                            };
                            readonly bic: {
                                readonly type: "string";
                                readonly description: "BIC";
                            };
                        };
                        readonly description: "Account identifier";
                    };
                    readonly address: {
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly type: "string";
                            };
                            readonly addressLine2: {
                                readonly type: "string";
                            };
                            readonly postTown: {
                                readonly type: "string";
                            };
                            readonly postCode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                        readonly description: "Party address";
                    };
                };
                readonly description: "Payee details";
            };
            readonly payeeDetail: {
                readonly required: readonly ["identifier", "name"];
                readonly type: "object";
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Party name";
                    };
                    readonly identifier: {
                        readonly required: readonly ["type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Account identifier type";
                                readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                            };
                            readonly accountNumber: {
                                readonly type: "string";
                                readonly description: "Account number";
                            };
                            readonly sortCode: {
                                readonly type: "string";
                                readonly description: "Sortcode";
                            };
                            readonly iban: {
                                readonly type: "string";
                                readonly description: "IBAN";
                            };
                            readonly bic: {
                                readonly type: "string";
                                readonly description: "BIC";
                            };
                        };
                        readonly description: "Account identifier";
                    };
                    readonly address: {
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly type: "string";
                            };
                            readonly addressLine2: {
                                readonly type: "string";
                            };
                            readonly postTown: {
                                readonly type: "string";
                            };
                            readonly postCode: {
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                            };
                        };
                        readonly description: "Party address";
                    };
                };
                readonly description: "Payee details";
            };
            readonly description: {
                readonly maxLength: 255;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Description of the credit";
            };
            readonly amount: {
                readonly maximum: 2147483647;
                readonly minimum: 0.01;
                readonly type: "number";
                readonly description: "Amount of the payment in major current Units - '1' = 1.00 GBP";
            };
            readonly type: {
                readonly type: "string";
                readonly description: " Type of credit, values: ";
                readonly enum: readonly ["PI_BACS", "PI_DD", "PI_FAST", "PI_SECT", "PI_SEPA_INST"];
            };
            readonly transactionDate: {
                readonly type: "string";
                readonly description: "Date of credit in yyyy-MM-ddTHH:mm:ssZ format";
            };
            readonly numberOfTransactions: {
                readonly maximum: 50;
                readonly minimum: 1;
                readonly type: "integer";
                readonly description: "Number of credit transactions to create, defaults to 1";
                readonly format: "int32";
            };
            readonly schemeInformation: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "unique id that identifies a payment end-to-end within a scheme. If used ensure that its unique";
                    };
                };
                readonly description: "Optional scheme details";
            };
        };
        readonly description: "Details of credit to the account";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreatePhysicalCard: {
    readonly body: {
        readonly required: readonly ["authentication", "design", "expiry", "externalRef", "holder", "limit", "printedName", "productCode"];
        readonly type: "object";
        readonly properties: {
            readonly limit: {
                readonly minimum: 1;
                readonly type: "number";
                readonly description: "Total card authorisation limit.";
                readonly format: "double";
                readonly examples: readonly [1000];
                readonly maximum: 1.7976931348623157e+308;
            };
            readonly expiry: {
                readonly type: "string";
                readonly description: "ISO 8601 date with year & month components only. The supplied value must be in the future (cannot be the current month) and is _inclusive_ of the specified month.";
                readonly examples: readonly ["2018-12"];
            };
            readonly productCode: {
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly type: "string";
                readonly description: "Identifies the _type_ of card to create (GBP consumer, GBP business, etc). Modulr will supply a list of possible values.";
            };
            readonly externalRef: {
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly pattern: "[\\w -]*";
                readonly type: "string";
                readonly description: "Client reference for the newly created card. Maximum of 50 alphanumeric characters (including underscore, hyphen and space).";
            };
            readonly constraints: {
                readonly type: "object";
                readonly properties: {
                    readonly authorisation: {
                        readonly type: "object";
                        readonly properties: {
                            readonly spend: {
                                readonly type: "array";
                                readonly description: "Spending constraints";
                                readonly items: {
                                    readonly required: readonly ["currency"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly description: "A 3 letter ISO 4217 code representing the transaction currency";
                                            readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                            readonly examples: readonly ["GBP"];
                                        };
                                        readonly min: {
                                            readonly type: "number";
                                            readonly description: "Minimum spend amount (inclusive)";
                                            readonly examples: readonly [5];
                                        };
                                        readonly max: {
                                            readonly type: "number";
                                            readonly description: "Maximum spend amount (inclusive)";
                                            readonly examples: readonly [2000];
                                        };
                                    };
                                    readonly description: "Spending constraints";
                                };
                            };
                        };
                        readonly description: "Authorisation constraints";
                    };
                };
                readonly description: "Constraints";
            };
            readonly authentication: {
                readonly required: readonly ["knowledgeBase"];
                readonly type: "object";
                readonly properties: {
                    readonly knowledgeBase: {
                        readonly type: "array";
                        readonly description: "3DS knowledge-based authentication (KBA) answers";
                        readonly items: {
                            readonly required: readonly ["answer", "type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "3DS knowledge-based authentication answer type";
                                    readonly enum: readonly ["FIRST_PET_NAME", "MATERNAL_GRANDMOTHER_MAIDEN_NAME", "FAVOURITE_CHILDHOOD_FRIEND", "FIRST_CAR", "CITY_PARENTS_MET"];
                                };
                                readonly answer: {
                                    readonly maxLength: 45;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "3DS knowledge-based authentication answer";
                                };
                            };
                            readonly description: "3DS Knowledge-Based Authentication (KBA) answers";
                        };
                    };
                };
                readonly description: "Authentication";
            };
            readonly holder: {
                readonly required: readonly ["billingAddress", "dateOfBirth", "firstName", "lastName", "mobileNumber"];
                readonly type: "object";
                readonly properties: {
                    readonly title: {
                        readonly pattern: "^[0-9a-zA-Z]{1,4}$";
                        readonly type: "string";
                        readonly description: "Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.";
                        readonly examples: readonly ["Mr"];
                    };
                    readonly firstName: {
                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                        readonly type: "string";
                        readonly description: "Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                        readonly examples: readonly ["Joe"];
                    };
                    readonly lastName: {
                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                        readonly type: "string";
                        readonly description: "Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                        readonly examples: readonly ["Bloggs"];
                    };
                    readonly billingAddress: {
                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly maxLength: 50;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "First line of address";
                                readonly examples: readonly ["Floor 10"];
                            };
                            readonly addressLine2: {
                                readonly maxLength: 50;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Second line of address";
                                readonly examples: readonly ["80 George Street"];
                            };
                            readonly postTown: {
                                readonly maxLength: 20;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Post town";
                                readonly examples: readonly ["EDINBURGH"];
                            };
                            readonly postCode: {
                                readonly maxLength: 10;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Postcode";
                                readonly examples: readonly ["EH2 3BU"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "Country (ISO 3166 alpha-2 country code)";
                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                readonly examples: readonly ["GB"];
                            };
                        };
                        readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                    };
                    readonly dateOfBirth: {
                        readonly type: "string";
                        readonly description: "Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.";
                        readonly format: "date";
                        readonly examples: readonly ["2001-01-01"];
                    };
                    readonly mobileNumber: {
                        readonly type: "string";
                        readonly description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.";
                        readonly examples: readonly ["+447123456000"];
                    };
                    readonly email: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                        readonly description: "Cardholder email";
                        readonly examples: readonly ["cardholder@example.com"];
                    };
                };
                readonly description: "CardHolder";
            };
            readonly shippingAddress: {
                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                readonly type: "object";
                readonly properties: {
                    readonly addressLine1: {
                        readonly maxLength: 50;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly description: "First line of address";
                        readonly examples: readonly ["Floor 10"];
                    };
                    readonly addressLine2: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                        readonly description: "Second line of address";
                        readonly examples: readonly ["80 George Street"];
                    };
                    readonly postTown: {
                        readonly maxLength: 20;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly description: "Post town";
                        readonly examples: readonly ["EDINBURGH"];
                    };
                    readonly postCode: {
                        readonly maxLength: 10;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly description: "Postcode";
                        readonly examples: readonly ["EH2 3BU"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "Country (ISO 3166 alpha-2 country code)";
                        readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                        readonly examples: readonly ["GB"];
                    };
                };
                readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
            };
            readonly design: {
                readonly required: readonly ["cardRef", "packagingRef"];
                readonly type: "object";
                readonly properties: {
                    readonly cardRef: {
                        readonly type: "string";
                        readonly description: "Design reference for card";
                    };
                    readonly packagingRef: {
                        readonly type: "string";
                        readonly description: "Design reference for card packaging";
                    };
                };
                readonly description: "Design references for physical card and packaging";
            };
            readonly printedName: {
                readonly maxLength: 20;
                readonly minLength: 1;
                readonly pattern: "[a-zA-Z 0-9À-ŽȘȚ'’.,^-]{1,20}";
                readonly type: "string";
                readonly description: "Name to be printed on the card. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)";
                readonly examples: readonly ["Joe Bloggs"];
            };
        };
        readonly description: "Card";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly aid: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The account which card funds will be raised from.";
                };
            };
            readonly required: readonly ["aid"];
        }];
    };
    readonly response: {
        readonly '202': {
            readonly required: readonly ["taskId", "taskUrl"];
            readonly type: "object";
            readonly properties: {
                readonly taskUrl: {
                    readonly type: "string";
                    readonly description: "Url of card task resource";
                };
                readonly taskId: {
                    readonly type: "string";
                    readonly description: "ID of card task";
                };
                readonly metaData: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                        readonly description: "Meta data associated with async task response";
                    };
                    readonly description: "Meta data associated with async task response";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateRule: {
    readonly body: {
        readonly required: readonly ["accountId", "data", "name", "type"];
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly description: "The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}";
                readonly enum: readonly ["SPLIT", "SWEEP", "FUNDING"];
            };
            readonly name: {
                readonly maxLength: 25;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Rule's name";
                readonly examples: readonly ["My new rule"];
            };
            readonly accountId: {
                readonly type: "string";
                readonly description: "The Account which the Rule is created on.";
                readonly examples: readonly ["A1000001"];
            };
            readonly data: {
                readonly type: "object";
                readonly properties: {
                    readonly daysToRun: {
                        readonly type: "array";
                        readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                            readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                        };
                    };
                    readonly frequency: {
                        readonly type: "string";
                        readonly description: "Frequency of the rule. Sweep Rule Only";
                        readonly enum: readonly ["Daily"];
                    };
                    readonly destinationId: {
                        readonly type: "string";
                        readonly description: "Id of destination beneficiary. e.g. B1000001. Sweep Rule Only";
                    };
                    readonly balanceToLeave: {
                        readonly type: "number";
                        readonly description: "Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only";
                    };
                    readonly triggerBalance: {
                        readonly type: "number";
                        readonly description: "Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only";
                    };
                    readonly splits: {
                        readonly type: "array";
                        readonly items: {
                            readonly required: readonly ["destinationId", "percent"];
                            readonly type: "object";
                            readonly properties: {
                                readonly destinationId: {
                                    readonly type: "string";
                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                };
                                readonly percent: {
                                    readonly type: "string";
                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                };
                            };
                            readonly description: "Configuration for a Split Rule";
                        };
                    };
                    readonly conditionalSplits: {
                        readonly type: "array";
                        readonly items: {
                            readonly required: readonly ["destinationId", "percent"];
                            readonly type: "object";
                            readonly properties: {
                                readonly destinationId: {
                                    readonly type: "string";
                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                };
                                readonly percent: {
                                    readonly type: "string";
                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                };
                            };
                            readonly description: "Configuration for a Split Rule";
                        };
                    };
                    readonly conditionalSplitConfig: {
                        readonly required: readonly ["conditionAmount", "destinationId", "percent"];
                        readonly type: "object";
                        readonly properties: {
                            readonly destinationId: {
                                readonly type: "string";
                                readonly description: "Id of destination beneficiary. e.g. B1000001.";
                            };
                            readonly percent: {
                                readonly type: "string";
                                readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                            };
                            readonly conditionAmount: {
                                readonly maximum: 2147483647;
                                readonly minimum: 0.01;
                                readonly type: "number";
                                readonly description: "Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.";
                            };
                            readonly conditionDone: {
                                readonly type: "boolean";
                                readonly description: "Whether the condition amount has been met. e.g. true or false";
                            };
                        };
                        readonly description: "Configuration for a Conditional Split Rule";
                    };
                    readonly sourceId: {
                        readonly type: "string";
                        readonly description: "Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only";
                    };
                };
                readonly description: "Configuration fields for all types of rules. To be populated where applicable based on rule type.";
            };
        };
        readonly description: "create rule request";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["accountId", "data", "id", "name", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for a Rule";
                    readonly examples: readonly ["R1000001"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`";
                    readonly enum: readonly ["SPLIT", "SWEEP", "FUNDING"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Rule's name";
                    readonly examples: readonly ["My new rule"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "The Account which the Rule is created on.";
                    readonly examples: readonly ["A1000001"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly frequency: {
                            readonly type: "string";
                            readonly description: "Frequency of the rule. Sweep Rule Only\n\n`Daily`";
                            readonly enum: readonly ["Daily"];
                        };
                        readonly destinationId: {
                            readonly type: "string";
                            readonly description: "Id of destination beneficiary. e.g. B1000001. Sweep Rule Only";
                        };
                        readonly balanceToLeave: {
                            readonly type: "number";
                            readonly description: "Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only";
                        };
                        readonly triggerBalance: {
                            readonly type: "number";
                            readonly description: "Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only";
                        };
                        readonly splits: {
                            readonly type: "array";
                            readonly items: {
                                readonly required: readonly ["destinationId", "percent"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly destinationId: {
                                        readonly type: "string";
                                        readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                    };
                                    readonly percent: {
                                        readonly type: "string";
                                        readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                    };
                                };
                                readonly description: "Configuration for a Split Rule";
                            };
                        };
                        readonly conditionalSplits: {
                            readonly type: "array";
                            readonly items: {
                                readonly required: readonly ["destinationId", "percent"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly destinationId: {
                                        readonly type: "string";
                                        readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                    };
                                    readonly percent: {
                                        readonly type: "string";
                                        readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                    };
                                };
                                readonly description: "Configuration for a Split Rule";
                            };
                        };
                        readonly conditionalSplitConfig: {
                            readonly required: readonly ["conditionAmount", "destinationId", "percent"];
                            readonly type: "object";
                            readonly properties: {
                                readonly destinationId: {
                                    readonly type: "string";
                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                };
                                readonly percent: {
                                    readonly type: "string";
                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                };
                                readonly conditionAmount: {
                                    readonly maximum: 2147483647;
                                    readonly minimum: 0.01;
                                    readonly type: "number";
                                    readonly description: "Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.";
                                };
                                readonly conditionDone: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the condition amount has been met. e.g. true or false";
                                };
                            };
                            readonly description: "Configuration for a Conditional Split Rule";
                        };
                        readonly sourceId: {
                            readonly type: "string";
                            readonly description: "Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only";
                        };
                    };
                    readonly description: "Configuration fields for all types of rules. To be populated where applicable based on rule type.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const CreateStandingOrderInitiation: {
    readonly body: {
        readonly required: readonly ["aspspId", "context", "payment", "schedule"];
        readonly type: "object";
        readonly properties: {
            readonly aspspId: {
                readonly type: "string";
                readonly description: "Identifier for ASPSP being used for the standing order";
                readonly examples: readonly ["H100000001"];
            };
            readonly payment: {
                readonly required: readonly ["amount", "destination", "reference"];
                readonly type: "object";
                readonly properties: {
                    readonly destination: {
                        readonly required: readonly ["type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Indicates the type of destination. Can be one of ACCOUNT, SCAN";
                                readonly enum: readonly ["ACCOUNT", "SCAN"];
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Identifier of the destination account if using ACCOUNT type";
                                readonly examples: readonly ["A1100001"];
                            };
                            readonly accountNumber: {
                                readonly pattern: "^[0-9]{8}$";
                                readonly type: "string";
                                readonly description: "Account Number of destination account if using SCAN type";
                                readonly examples: readonly ["12345678"];
                            };
                            readonly sortCode: {
                                readonly pattern: "^[0-9]{6}$";
                                readonly type: "string";
                                readonly description: "Sort Code of destination account if using SCAN type";
                                readonly examples: readonly ["000000"];
                            };
                            readonly name: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Name of destination account if using SCAN type (this may be truncated)";
                                readonly examples: readonly ["Test"];
                            };
                        };
                        readonly description: "The destination account for the payment";
                    };
                    readonly amount: {
                        readonly required: readonly ["currency", "recurringAmount"];
                        readonly type: "object";
                        readonly properties: {
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "Currency of the account in ISO 4217 format. Default is GBP";
                                readonly enum: readonly ["GBP"];
                            };
                            readonly recurringAmount: {
                                readonly maximum: 2147483647;
                                readonly minimum: 0.01;
                                readonly type: "number";
                                readonly description: "Recurring amount of the payment in Major Currency Units - '1' = 1.00 GBP";
                                readonly examples: readonly [100];
                            };
                        };
                        readonly description: "The amount of the standing order";
                    };
                    readonly reference: {
                        readonly type: "string";
                        readonly description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.";
                        readonly examples: readonly ["Invoice ABC123"];
                    };
                };
                readonly description: "The payment of the standing order";
            };
            readonly schedule: {
                readonly required: readonly ["frequency", "initialDate"];
                readonly type: "object";
                readonly properties: {
                    readonly frequency: {
                        readonly type: "string";
                        readonly description: "Type of the capability, can be one of WEEKLY, MONTHLY";
                        readonly enum: readonly ["WEEKLY", "MONTHLY"];
                    };
                    readonly initialDate: {
                        readonly type: "string";
                        readonly description: "The date on which the standing order should begin. This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'";
                        readonly examples: readonly ["2021-03-25"];
                    };
                    readonly finalDate: {
                        readonly type: "string";
                        readonly description: "The optional date on which the standing order should end. If unspecified, the standing order will continue until cancelled.This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'";
                        readonly examples: readonly ["2021-03-25"];
                    };
                };
                readonly description: "The schedule of the standing order";
            };
            readonly context: {
                readonly required: readonly ["merchant"];
                readonly type: "object";
                readonly properties: {
                    readonly paymentContextCode: {
                        readonly type: "string";
                        readonly description: "Indicates type of Payment Context, can be one of BILLPAYMENT, ECOMMERCEGOODS, ECOMMERCESERVICES, OTHER, PARTYTOPARTY. If no value or paymentContext is provided, PARTYTOPARTY is considered the default value.";
                        readonly enum: readonly ["BillPayment", "EcommerceGoods", "EcommerceServices", "Other", "PartyToParty", "BILLPAYMENT", "ECOMMERCEGOODS", "ECOMMERCESERVICES", "OTHER", "PARTYTOPARTY"];
                    };
                    readonly deliveryAddress: {
                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "First line of the address";
                            };
                            readonly addressLine2: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Second line of the address";
                            };
                            readonly postTown: {
                                readonly maxLength: 35;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The post town";
                            };
                            readonly postCode: {
                                readonly maxLength: 16;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "The postcode";
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "The country";
                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "GB", "MQ", "YT", "GP", "GF", "RE", "MF", "GI", "GG", "IM", "JE", "MC", "CH", "AD", "SM", "VA", "AX", "PM", "BL", "AF", "AL", "DZ", "AS", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AZ", "BS", "BH", "BD", "BB", "BY", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "IO", "VG", "BN", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CK", "CR", "CU", "CW", "CD", "DJ", "DM", "DO", "TL", "EC", "EG", "SV", "GQ", "ER", "SZ", "ET", "FK", "FO", "FJ", "PF", "TF", "GA", "GM", "GE", "GH", "GL", "GD", "GU", "GT", "GN", "GW", "GY", "HT", "HM", "HN", "HK", "IN", "ID", "IR", "IQ", "IL", "CI", "JM", "JP", "JO", "KZ", "KE", "KI", "XK", "KW", "KG", "LA", "LB", "LS", "LR", "LY", "MO", "MG", "MW", "MY", "MV", "ML", "MH", "MR", "MU", "MX", "FM", "MD", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "AN", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "KP", "MK", "MP", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PN", "PR", "QA", "CG", "RU", "RW", "SH", "KN", "LC", "VC", "WS", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SB", "SO", "ZA", "KR", "GS", "SS", "LK", "SD", "SR", "SY", "SJ", "TW", "TJ", "TZ", "TH", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "UM", "US", "UY", "UZ", "VU", "VE", "VN", "VI", "WF", "EH", "YE", "ZM", "ZW"];
                            };
                        };
                        readonly description: "Information that locates and identifies a specific address, as defined by postal services or in free format text, must be specified if paymentContextCode is ECOMMERCEGOODS";
                    };
                    readonly merchant: {
                        readonly type: "object";
                        readonly properties: {
                            readonly categoryCode: {
                                readonly maxLength: 4;
                                readonly minLength: 3;
                                readonly type: "string";
                                readonly description: "Merchant category code conform to ISO 18245, related to the type of services or goods provided for the transaction. Must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES";
                            };
                            readonly customerId: {
                                readonly maxLength: 70;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Merchant customer identification, must be specified if paymentContextCode is either ECOMMERCEGOODS or ECOMMERCESERVICES";
                            };
                        };
                        readonly description: "Merchant details for the payment context";
                    };
                };
                readonly description: "Payment context for the initiation request";
            };
        };
        readonly description: "Request object to Initiate Standing Order";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly type: "object";
            readonly properties: {
                readonly standingOrderInitiationId: {
                    readonly type: "string";
                    readonly description: "The unique identifier of the standing order initiation request at Modulr";
                    readonly examples: readonly ["I000000001"];
                };
                readonly redirectUrl: {
                    readonly type: "string";
                    readonly description: "A redirect URL for the user to authorise the standing order initiation request at the ASPSP";
                    readonly examples: readonly ["https://www.bankofmoney.com/authorize"];
                };
            };
            readonly description: "Response object to Initiate Standing Order";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const DeleteBeneficiaries: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly cid: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of customer to delete beneficiaries for";
                };
            };
            readonly required: readonly ["cid"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly bid: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID(s) of beneficiaries to delete, must owned by customer and active";
                };
            };
            readonly required: readonly ["bid"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '207': {
            readonly type: "string";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const EditAccount: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w \\-]*";
                readonly type: "string";
                readonly description: "External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long";
            };
            readonly name: {
                readonly maxLength: 40;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Name for the account, only applicable for 'PCM_INDIVIDUAL' and 'PCM_BUSINESS' customer types";
            };
        };
        readonly description: "Details of account to edit";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of account to be edited";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["availableBalance", "balance", "createdDate", "currency", "customerId", "id", "identifiers", "name", "status"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for the account";
                    readonly examples: readonly ["A0000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name for the account";
                };
                readonly balance: {
                    readonly type: "string";
                    readonly description: "Balance of the account in format 'NN.NN'";
                    readonly examples: readonly ["10000.0"];
                };
                readonly availableBalance: {
                    readonly type: "string";
                    readonly description: "The current available balance of the Account. Calculated by subtracting any pending payments from the current balance";
                    readonly examples: readonly ["10000.0"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Currency of the account in ISO 4217 format";
                    readonly examples: readonly ["GBP"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`";
                    readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                    readonly examples: readonly ["ACTIVE"];
                };
                readonly identifiers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                            };
                            readonly accountNumber: {
                                readonly type: "string";
                                readonly description: "Bank account Sort Code";
                                readonly examples: readonly ["12345678"];
                            };
                            readonly sortCode: {
                                readonly type: "string";
                                readonly description: "Bank account Sort Code";
                                readonly examples: readonly ["000000"];
                            };
                            readonly iban: {
                                readonly type: "string";
                                readonly examples: readonly ["GB20MODR04001401100000"];
                            };
                            readonly bic: {
                                readonly type: "string";
                                readonly examples: readonly ["MODRGB21"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly countrySpecificDetails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly bankName: {
                                        readonly type: "string";
                                        readonly description: "The name of the destination bank.";
                                        readonly examples: readonly ["Apple Bank"];
                                    };
                                    readonly bankAddress: {
                                        readonly type: "string";
                                        readonly description: "The address of the destination bank.";
                                        readonly examples: readonly ["2100 Broadway"];
                                    };
                                    readonly bankCity: {
                                        readonly type: "string";
                                        readonly description: "The city in which the destination bank resides.";
                                        readonly examples: readonly ["New York City"];
                                    };
                                    readonly bankBranchName: {
                                        readonly type: "string";
                                        readonly description: "The name of the destination bank's branch.";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly bankBranchCode: {
                                        readonly type: "string";
                                        readonly description: "The code of the destination bank's branch.";
                                        readonly examples: readonly ["44-04"];
                                    };
                                    readonly bankCode: {
                                        readonly type: "string";
                                        readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                    };
                                    readonly chineseId: {
                                        readonly type: "string";
                                        readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                        readonly examples: readonly ["01101201901018889"];
                                    };
                                    readonly province: {
                                        readonly type: "string";
                                        readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                        readonly examples: readonly ["Zhejiang"];
                                    };
                                    readonly business: {
                                        readonly type: "boolean";
                                        readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                        readonly examples: readonly [true];
                                    };
                                    readonly bankCodeType: {
                                        readonly type: "string";
                                        readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                        readonly enum: readonly ["ABA", "CHIPS"];
                                        readonly examples: readonly ["ABA"];
                                    };
                                    readonly bankCountry: {
                                        readonly type: "string";
                                        readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                        readonly enum: readonly
                                        readonly examples: readonly ["US"];
                                    };
                                };
                            };
                        };
                        readonly description: "Account Identifier";
                    };
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique id of the Customer";
                    readonly examples: readonly ["C0000001"];
                };
                readonly customerName: {
                    readonly type: "string";
                    readonly description: "Customer Name";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "Your reference for an account";
                    readonly examples: readonly ["aReference_00001"];
                };
                readonly accessGroups: {
                    readonly type: "array";
                    readonly description: "Ids of Access Groups this account belongs to";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Ids of Access Groups this account belongs to";
                    };
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly directDebit: {
                    readonly type: "boolean";
                    readonly description: "Direct Debit Enabled";
                };
                readonly securedFundingLimit: {
                    readonly type: "string";
                    readonly description: "Limit of funds available below a balance of zero";
                };
            };
            readonly description: "Account";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const EditCustomer: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w \\-]*";
                readonly type: "string";
                readonly description: "External Reference can only have alphanumeric characters plus underscore, hyphen and space up to 50 characters long";
            };
            readonly associates: {
                readonly type: "array";
                readonly description: "Applicable to all types except 'PCM_BUSINESS'";
                readonly items: {
                    readonly required: readonly ["firstName", "homeAddress", "lastName", "type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Type of associate";
                            readonly enum: readonly ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL", "PCM_INDIVIDUAL", "SIGNATORY", "TRUST_SETTLOR", "TRUST_BENEFICIARY", "TRUST_TRUSTEE", "PREQUALIFIED"];
                        };
                        readonly firstName: {
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly pattern: "^[\\p{L}' -]+$";
                            readonly type: "string";
                            readonly description: "Letters, hyphens and apostrophes";
                        };
                        readonly middleName: {
                            readonly pattern: "^[\\p{L}' -]*$";
                            readonly type: "string";
                            readonly description: "Letters, hyphens and apostrophes";
                        };
                        readonly lastName: {
                            readonly maxLength: 100;
                            readonly minLength: 1;
                            readonly pattern: "^[\\p{L}' -]+$";
                            readonly type: "string";
                            readonly description: "Letters, hyphens and apostrophes";
                        };
                        readonly dateOfBirth: {
                            readonly type: "string";
                            readonly description: "Date in yyyy-MM-dd format. If associate is a non-applicant director or partner, then partial DOB of yyyy-MM format is allowed. Valid age is from 16 to 100 years. If Applicant then minimum age required is 18 years for specific partners. Required for all associate types except PCM_INDIVIDUAL.";
                        };
                        readonly ownership: {
                            readonly maximum: 100;
                            readonly minimum: 1;
                            readonly type: "integer";
                            readonly description: "Ownership percentage for Partners";
                            readonly format: "int32";
                        };
                        readonly homeAddress: {
                            readonly required: readonly ["addressLine1", "postTown"];
                            readonly type: "object";
                            readonly properties: {
                                readonly addressLine1: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                                readonly addressLine2: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                                readonly postTown: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                                readonly postCode: {
                                    readonly maxLength: 10;
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                    readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "GB", "MQ", "YT", "GP", "GF", "RE", "MF", "GI", "GG", "IM", "JE", "MC", "CH", "AD", "SM", "VA", "AX", "PM", "BL", "AF", "AL", "DZ", "AS", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AZ", "BS", "BH", "BD", "BB", "BY", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "IO", "VG", "BN", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CK", "CR", "CU", "CW", "CD", "DJ", "DM", "DO", "TL", "EC", "EG", "SV", "GQ", "ER", "SZ", "ET", "FK", "FO", "FJ", "PF", "TF", "GA", "GM", "GE", "GH", "GL", "GD", "GU", "GT", "GN", "GW", "GY", "HT", "HM", "HN", "HK", "IN", "ID", "IR", "IQ", "IL", "CI", "JM", "JP", "JO", "KZ", "KE", "KI", "XK", "KW", "KG", "LA", "LB", "LS", "LR", "LY", "MO", "MG", "MW", "MY", "MV", "ML", "MH", "MR", "MU", "MX", "FM", "MD", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "AN", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "KP", "MK", "MP", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PN", "PR", "QA", "CG", "RU", "RW", "SH", "KN", "LC", "VC", "WS", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SB", "SO", "ZA", "KR", "GS", "SS", "LK", "SD", "SR", "SY", "SJ", "TW", "TJ", "TZ", "TH", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "UM", "US", "UY", "UZ", "VU", "VE", "VN", "VI", "WF", "EH", "YE", "ZM", "ZW"];
                                };
                                readonly countrySubDivision: {
                                    readonly maxLength: 35;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                            };
                            readonly description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'";
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of associate";
                        };
                    };
                    readonly description: "Applicable to all types except 'PCM_BUSINESS'";
                };
            };
            readonly name: {
                readonly maxLength: 100;
                readonly minLength: 0;
                readonly pattern: "^([_'@,&()£$€¥=#%\\‘\\’:;/<>«»\\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*?[\\p{L}0-9])+[_'@,&()£$€¥=#%\\‘\\’:;/<>«»\\\"!\\‘\\“\\”.\\?\\-\\s\\*\\{\\}\\[\\]\\+\\%\\\\]*";
                readonly type: "string";
                readonly description: "AlphaNumeric characters plus [ _ ' @ , & £ $ € ¥ = # % ‘ ’ : ; \\ / < > « »  ! ‘ “ ” . ? - *{ }  + % ( )]. Mandatory for all types except 'INDIVIDUAL and PCM_INDIVIDUAL'";
            };
            readonly brandNames: {
                readonly type: "array";
                readonly description: "The customers brand name(s)";
                readonly items: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique id for the Brand Name";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "The Brand Name";
                        };
                    };
                    readonly description: "The customers brand name(s)";
                };
            };
            readonly tradingAddress: {
                readonly required: readonly ["addressLine1", "postTown"];
                readonly type: "object";
                readonly properties: {
                    readonly addressLine1: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly addressLine2: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postTown: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                    readonly postCode: {
                        readonly maxLength: 10;
                        readonly type: "string";
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly enum: readonly
                    };
                    readonly countrySubDivision: {
                        readonly maxLength: 35;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                };
                readonly description: "Applicable to all types except 'INDIVIDUAL' and 'PCM_INDIVIDUAL'";
            };
            readonly customerTrust: {
                readonly required: readonly ["trustNature"];
                readonly type: "object";
                readonly properties: {
                    readonly trustNature: {
                        readonly type: "string";
                        readonly description: "Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.";
                        readonly enum: readonly ["BARE_TRUSTS", "INTEREST_IN_POSSESSION_TRUSTS", "DISCRETIONARY_TRUSTS", "ACCUMULATION_TRUSTS", "MIXED_TRUSTS", "SETTLOR_INTERESTED_TRUSTS", "NON_RESIDENT_TRUSTS", "OFFSHORE_TRUSTS", "FAMILY_LIVING_TRUST", "PILOT_TRUST", "VULNERABLE_BENEFICIARY_TRUST", "CHARITABLE_TRUSTS", "IRREVOCABLE_LIFE_INSURANCE_TRUST", "TESTAMENTARY_TRUSTS", "OTHER"];
                    };
                };
                readonly description: "Trust nature for customers of type Trust. Mandatory for type Trust, not to be set for non-trust customers.";
            };
            readonly complianceData: {
                readonly type: "object";
                readonly properties: {
                    readonly typeDescription: {
                        readonly maxLength: 200;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                };
                readonly description: "Required for customers of type PREQUALIFIED. Not allowed for all other customer types.";
            };
        };
        readonly description: "Details of customer to edit";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly examples: readonly ["C0000000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of customer to be edited";
                };
            };
            readonly required: readonly ["customerId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["createdDate", "id", "name", "status", "type", "verificationStatus"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for a Customer. Begins with 'C'";
                    readonly examples: readonly ["C00000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Customer's company name - must be unique across the Modulr platform.";
                };
                readonly brandNames: {
                    readonly type: "array";
                    readonly description: "The customers brand name(s)";
                    readonly items: {
                        readonly required: readonly ["id", "name"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Brand Name";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The Brand Name";
                            };
                        };
                        readonly description: "BrandName";
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`";
                    readonly enum: readonly ["LLC", "PLC", "SOLETRADER", "OPARTNRSHP", "LPARTNRSHP", "LLP", "CHARITY", "INDIVIDUAL", "PCM_INDIVIDUAL", "PCM_BUSINESS", "TRUST", "PREQUALIFIED"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`";
                    readonly enum: readonly ["ACTIVE", "CLOSED"];
                };
                readonly verificationStatus: {
                    readonly type: "string";
                    readonly description: "How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                    readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                };
                readonly companyRegNumber: {
                    readonly type: "string";
                    readonly description: "The company registration / incorporation number of the company. Only applicable for companies registered with Companies House";
                };
                readonly expectedMonthlySpend: {
                    readonly type: "integer";
                    readonly description: "Indication of the monthly spend of the customer.";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly registeredAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly countrySubDivision: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address";
                };
                readonly tradingAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly countrySubDivision: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address";
                };
                readonly partnerId: {
                    readonly type: "string";
                    readonly description: "The owning partner identifier";
                };
                readonly associates: {
                    readonly type: "array";
                    readonly description: "Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.";
                    readonly items: {
                        readonly required: readonly ["dateOfBirth", "firstName", "id", "lastName", "type", "verificationStatus"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Associate";
                            };
                            readonly firstName: {
                                readonly type: "string";
                                readonly description: "Associate's first name(s)";
                            };
                            readonly middleName: {
                                readonly type: "string";
                                readonly description: "Associate's middle name";
                            };
                            readonly lastName: {
                                readonly type: "string";
                                readonly description: "Associate's surname";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "Associate's email address";
                            };
                            readonly phone: {
                                readonly type: "string";
                                readonly description: "Associate's phone number, in international number format";
                            };
                            readonly applicant: {
                                readonly type: "boolean";
                                readonly description: "Indicates which Associate originally applied for the Modulr account";
                            };
                            readonly ownership: {
                                readonly type: "integer";
                                readonly description: "The Associate's percentage ownership of the Customer";
                                readonly format: "int32";
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`";
                                readonly enum: readonly ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL", "PCM_INDIVIDUAL", "SIGNATORY", "TRUST_SETTLOR", "TRUST_BENEFICIARY", "TRUST_TRUSTEE", "PREQUALIFIED"];
                            };
                            readonly dateOfBirth: {
                                readonly type: "string";
                                readonly description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown";
                            };
                            readonly verificationStatus: {
                                readonly type: "string";
                                readonly description: "How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                                readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                            };
                            readonly homeAddress: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly type: "string";
                                    };
                                    readonly addressLine2: {
                                        readonly type: "string";
                                    };
                                    readonly postTown: {
                                        readonly type: "string";
                                    };
                                    readonly postCode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly countrySubDivision: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Address";
                            };
                            readonly documentInfo: {
                                readonly type: "array";
                                readonly description: "Documents gathered during Customer Due Diligence checks on an Associate.";
                                readonly items: {
                                    readonly required: readonly ["fileName", "path", "uploadedDate"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly path: {
                                            readonly type: "string";
                                        };
                                        readonly fileName: {
                                            readonly type: "string";
                                        };
                                        readonly uploadedDate: {
                                            readonly type: "string";
                                            readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                            readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                                        };
                                    };
                                    readonly description: "Document";
                                };
                            };
                            readonly additionalPersonalIdentifiers: {
                                readonly type: "array";
                                readonly description: "Additional personal identifier(s)";
                                readonly items: {
                                    readonly required: readonly ["type", "value"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of Additional Personal Identifier\n\n`BSN`";
                                            readonly enum: readonly ["BSN"];
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                            readonly description: "Additional Personal Identifier value";
                                        };
                                    };
                                    readonly description: "AdditionalPersonalIdentifier";
                                };
                            };
                            readonly complianceData: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly relationship: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.";
                            };
                        };
                        readonly description: "Associate";
                    };
                };
                readonly industryCode: {
                    readonly type: "string";
                };
                readonly tcsVersion: {
                    readonly type: "integer";
                    readonly description: "Version of the Modulr Account Terms and Conditions the Customer has agreed to.";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly documentInfo: {
                    readonly type: "array";
                    readonly description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.";
                    readonly items: {
                        readonly required: readonly ["fileName", "path", "uploadedDate"];
                        readonly type: "object";
                        readonly properties: {
                            readonly path: {
                                readonly type: "string";
                            };
                            readonly fileName: {
                                readonly type: "string";
                            };
                            readonly uploadedDate: {
                                readonly type: "string";
                                readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                            };
                        };
                        readonly description: "Document";
                    };
                };
                readonly externalReference: {
                    readonly type: "string";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly delegate: {
                    readonly required: readonly ["created", "id", "name", "roleId", "status", "updated"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique reference for the Delegate.";
                            readonly examples: readonly ["D0000001"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name for the Delegate";
                        };
                        readonly address: {
                            readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                            readonly type: "object";
                            readonly properties: {
                                readonly addressLine1: {
                                    readonly type: "string";
                                };
                                readonly addressLine2: {
                                    readonly type: "string";
                                };
                                readonly postTown: {
                                    readonly type: "string";
                                };
                                readonly postCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly countrySubDivision: {
                                    readonly type: "string";
                                };
                            };
                            readonly description: "Address";
                        };
                        readonly roleId: {
                            readonly type: "string";
                            readonly description: "The id of the Role assigned to the delegate";
                            readonly examples: readonly ["R02002M5"];
                        };
                        readonly externalReference: {
                            readonly type: "string";
                            readonly description: "External system reference for the Delegate";
                        };
                        readonly partner: {
                            readonly type: "string";
                            readonly description: "Partner Bid.";
                            readonly examples: readonly ["R0000001"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "Status of the Delegate.";
                        };
                        readonly created: {
                            readonly type: "string";
                            readonly description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                            readonly format: "date-time";
                        };
                        readonly updated: {
                            readonly type: "string";
                            readonly description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                            readonly format: "date-time";
                        };
                    };
                    readonly description: "Delegate";
                };
                readonly legalEntity: {
                    readonly type: "string";
                    readonly description: "Legal entity of the customer\n\n`GB` `NL` `IE`";
                    readonly enum: readonly ["GB", "NL", "IE"];
                };
                readonly customerTrust: {
                    readonly type: "object";
                    readonly properties: {
                        readonly trustNature: {
                            readonly type: "string";
                            readonly enum: readonly ["BARE_TRUSTS", "INTEREST_IN_POSSESSION_TRUSTS", "DISCRETIONARY_TRUSTS", "ACCUMULATION_TRUSTS", "MIXED_TRUSTS", "SETTLOR_INTERESTED_TRUSTS", "NON_RESIDENT_TRUSTS", "OFFSHORE_TRUSTS", "FAMILY_LIVING_TRUST", "PILOT_TRUST", "VULNERABLE_BENEFICIARY_TRUST", "CHARITABLE_TRUSTS", "IRREVOCABLE_LIFE_INSURANCE_TRUST", "TESTAMENTARY_TRUSTS", "OTHER"];
                            readonly description: "`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`";
                        };
                    };
                    readonly description: "Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.";
                };
                readonly taxProfile: {
                    readonly required: readonly ["taxIdentifier"];
                    readonly type: "object";
                    readonly properties: {
                        readonly taxIdentifier: {
                            readonly type: "string";
                            readonly description: "Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                        };
                    };
                    readonly description: "Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                };
                readonly complianceData: {
                    readonly type: "object";
                    readonly properties: {
                        readonly typeDescription: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Required for customers of type PREQUALIFIED. Not allowed for all other customer types.";
                };
            };
            readonly description: "A Customer is a single legal entity that can have 1 or more accounts";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const EditCustomerNotification: {
    readonly body: {
        readonly required: readonly ["config", "destinations", "status"];
        readonly type: "object";
        readonly properties: {
            readonly status: {
                readonly type: "string";
                readonly description: "Status of the notification.";
                readonly enum: readonly ["ACTIVE", "INACTIVE"];
            };
            readonly destinations: {
                readonly type: "array";
                readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                readonly items: {
                    readonly type: "string";
                    readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                };
            };
            readonly config: {
                readonly type: "object";
                readonly properties: {
                    readonly threshold: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                    };
                    readonly timesToRun: {
                        readonly type: "array";
                        readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["AM", "PM"];
                        };
                    };
                    readonly daysToRun: {
                        readonly type: "array";
                        readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                        };
                    };
                    readonly retry: {
                        readonly type: "boolean";
                        readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly secret: {
                        readonly maxLength: 32;
                        readonly minLength: 32;
                        readonly type: "string";
                        readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly hmacAlgorithm: {
                        readonly type: "string";
                        readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.";
                        readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                    };
                };
                readonly description: "Configuration information for this Notification entity.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly notificationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["customerId", "notificationId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const EditPartnerNotification: {
    readonly body: {
        readonly required: readonly ["config", "destinations", "status"];
        readonly type: "object";
        readonly properties: {
            readonly status: {
                readonly type: "string";
                readonly description: "Status of the notification.";
                readonly enum: readonly ["ACTIVE", "INACTIVE"];
            };
            readonly destinations: {
                readonly type: "array";
                readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                readonly items: {
                    readonly type: "string";
                    readonly description: "The list of emails or url(webhook) used for sending the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this should be a single URL.";
                };
            };
            readonly config: {
                readonly type: "object";
                readonly properties: {
                    readonly threshold: {
                        readonly minimum: 0;
                        readonly type: "number";
                        readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                    };
                    readonly timesToRun: {
                        readonly type: "array";
                        readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["AM", "PM"];
                        };
                    };
                    readonly daysToRun: {
                        readonly type: "array";
                        readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                        };
                    };
                    readonly retry: {
                        readonly type: "boolean";
                        readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly secret: {
                        readonly maxLength: 32;
                        readonly minLength: 32;
                        readonly type: "string";
                        readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                    };
                    readonly hmacAlgorithm: {
                        readonly type: "string";
                        readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.";
                        readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                    };
                };
                readonly description: "Configuration information for this Notification entity.";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly partnerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly notificationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["partnerId", "notificationId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ExpireAuthorisation: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly authId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["authId"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GenerateCardHolderToken: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly publicKey: {
                readonly type: "string";
                readonly description: "Base64 UTF-8 encoded RSA public key to be used to encrypt the token in the response. The key must be at least 4096 bits in length.";
            };
            readonly purpose: {
                readonly type: "string";
                readonly description: "What the token will be used for. UPDATE tokens cannot be used for READ purposes, and READ tokens cannot be used for updates.\n\nDefault: `READ`";
                readonly default: "READ";
                readonly enum: readonly ["READ", "UPDATE"];
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card to generate the token";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly 'X-MOD-CARD-MGMT-TOKEN': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Card Management Token required when the token will be used to alter card details";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["encrypted", "token"];
            readonly type: "object";
            readonly properties: {
                readonly token: {
                    readonly type: "string";
                    readonly description: "The token to use by the client for retrieving card details. Where 'encrypted' is true, this will be a value that must be decrypted on the client device before being used in subsequent API calls";
                    readonly examples: readonly ["eyJ0....zRyk"];
                };
                readonly encrypted: {
                    readonly type: "boolean";
                    readonly description: "Whether this token is encrypted";
                };
                readonly encryptedSymmetricKey: {
                    readonly type: "string";
                    readonly description: "Base64 UTF-8 encoded Symmetric key used to encrypt token, encrypted with client's public key. Only provided if 'encrypted' is true.";
                };
                readonly initialisationVector: {
                    readonly type: "string";
                    readonly description: "Base64 UTF-8 encoded initialisation vector used with symmetric key for encrypting the token. Only provided if 'encrypted' is true.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GenerateCsv: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly fromDate: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly toDate: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccessGroup: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Access group ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["accountIds", "beneficiaryIds", "countOfAccounts", "id", "name", "status", "type", "typeId"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique ID for the access group";
                    readonly examples: readonly ["G0000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Access group name";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`";
                    readonly enum: readonly ["SERVICE_PARTNER", "SERVICE_CUSTOMER", "DELEGATE", "USER_DEFINED"];
                };
                readonly typeId: {
                    readonly type: "string";
                    readonly description: "The identifier of the linked entity implied by the type, e.g. the partner ID";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the access group\n\n`ACTIVE` `DELETED`";
                    readonly enum: readonly ["ACTIVE", "DELETED"];
                };
                readonly countOfAccounts: {
                    readonly type: "integer";
                    readonly description: "The number of accounts in this group";
                    readonly format: "int64";
                    readonly deprecated: true;
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly accountIds: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly description: "BIDs of Accounts in the group";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "BIDs of Accounts in the group";
                    };
                };
                readonly beneficiaryIds: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly description: "BIDs of Beneficiaries in the group";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "BIDs of Beneficiaries in the group";
                    };
                };
            };
            readonly description: "AccessGroupWithDetails";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccessGroups: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ids: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly description: "ID of access group(s) to fetch";
                    readonly items: {
                        readonly type: "string";
                        readonly examples: readonly ["G0000001"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly types: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly description: "Access group types";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Access group type";
                        readonly enum: readonly ["SERVICE_PARTNER", "SERVICE_CUSTOMER", "DELEGATE", "USER_DEFINED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly statuses: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly description: "Access group statuses";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Access group status";
                        readonly enum: readonly ["ACTIVE", "DELETED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly typeIds: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly description: "Ids of the entity implied by the type(s), e.g. the partner ID";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Is of the entity implied by the type(s), e.g. the partner ID";
                        readonly examples: readonly ["C0000001"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly showCountOfAccounts: {
                    readonly type: "string";
                    readonly description: "Whether to include the count of accounts in the response";
                    readonly default: "true";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["countOfAccounts", "id", "name", "status", "type", "typeId"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique ID for the access group";
                        readonly examples: readonly ["G0000001"];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Access group name";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`";
                        readonly enum: readonly ["SERVICE_PARTNER", "SERVICE_CUSTOMER", "DELEGATE", "USER_DEFINED"];
                    };
                    readonly typeId: {
                        readonly type: "string";
                        readonly description: "The identifier of the linked entity implied by the type, e.g. the partner ID";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of the access group\n\n`ACTIVE` `DELETED`";
                        readonly enum: readonly ["ACTIVE", "DELETED"];
                    };
                    readonly countOfAccounts: {
                        readonly type: "integer";
                        readonly description: "The number of accounts in this group";
                        readonly format: "int64";
                        readonly deprecated: true;
                        readonly minimum: -9223372036854776000;
                        readonly maximum: 9223372036854776000;
                    };
                };
                readonly description: "AccessGroup";
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of account to fetch";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                    };
                    readonly default: readonly ["ACTIVE"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account statuses allowed when fetching the account";
                };
                readonly includePendingTransactions: {
                    readonly type: "boolean";
                    readonly default: false;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Include all pending transactions in 'balance' field";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["availableBalance", "balance", "createdDate", "currency", "customerId", "id", "identifiers", "name", "status"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for the account";
                    readonly examples: readonly ["A0000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name for the account";
                };
                readonly balance: {
                    readonly type: "string";
                    readonly description: "Balance of the account in format 'NN.NN'";
                    readonly examples: readonly ["10000.0"];
                };
                readonly availableBalance: {
                    readonly type: "string";
                    readonly description: "The current available balance of the Account. Calculated by subtracting any pending payments from the current balance";
                    readonly examples: readonly ["10000.0"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "Currency of the account in ISO 4217 format";
                    readonly examples: readonly ["GBP"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`";
                    readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                    readonly examples: readonly ["ACTIVE"];
                };
                readonly identifiers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                            };
                            readonly accountNumber: {
                                readonly type: "string";
                                readonly description: "Bank account Sort Code";
                                readonly examples: readonly ["12345678"];
                            };
                            readonly sortCode: {
                                readonly type: "string";
                                readonly description: "Bank account Sort Code";
                                readonly examples: readonly ["000000"];
                            };
                            readonly iban: {
                                readonly type: "string";
                                readonly examples: readonly ["GB20MODR04001401100000"];
                            };
                            readonly bic: {
                                readonly type: "string";
                                readonly examples: readonly ["MODRGB21"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly countrySpecificDetails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly bankName: {
                                        readonly type: "string";
                                        readonly description: "The name of the destination bank.";
                                        readonly examples: readonly ["Apple Bank"];
                                    };
                                    readonly bankAddress: {
                                        readonly type: "string";
                                        readonly description: "The address of the destination bank.";
                                        readonly examples: readonly ["2100 Broadway"];
                                    };
                                    readonly bankCity: {
                                        readonly type: "string";
                                        readonly description: "The city in which the destination bank resides.";
                                        readonly examples: readonly ["New York City"];
                                    };
                                    readonly bankBranchName: {
                                        readonly type: "string";
                                        readonly description: "The name of the destination bank's branch.";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly bankBranchCode: {
                                        readonly type: "string";
                                        readonly description: "The code of the destination bank's branch.";
                                        readonly examples: readonly ["44-04"];
                                    };
                                    readonly bankCode: {
                                        readonly type: "string";
                                        readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                    };
                                    readonly chineseId: {
                                        readonly type: "string";
                                        readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                        readonly examples: readonly ["01101201901018889"];
                                    };
                                    readonly province: {
                                        readonly type: "string";
                                        readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                        readonly examples: readonly ["Zhejiang"];
                                    };
                                    readonly business: {
                                        readonly type: "boolean";
                                        readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                        readonly examples: readonly [true];
                                    };
                                    readonly bankCodeType: {
                                        readonly type: "string";
                                        readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                        readonly enum: readonly ["ABA", "CHIPS"];
                                        readonly examples: readonly ["ABA"];
                                    };
                                    readonly bankCountry: {
                                        readonly type: "string";
                                        readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                        readonly enum: readonly
                                        readonly examples: readonly ["US"];
                                    };
                                };
                            };
                        };
                        readonly description: "Account Identifier";
                    };
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique id of the Customer";
                    readonly examples: readonly ["C0000001"];
                };
                readonly customerName: {
                    readonly type: "string";
                    readonly description: "Customer Name";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "Your reference for an account";
                    readonly examples: readonly ["aReference_00001"];
                };
                readonly accessGroups: {
                    readonly type: "array";
                    readonly description: "Ids of Access Groups this account belongs to";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Ids of Access Groups this account belongs to";
                    };
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly directDebit: {
                    readonly type: "boolean";
                    readonly description: "Direct Debit Enabled";
                };
                readonly securedFundingLimit: {
                    readonly type: "string";
                    readonly description: "Limit of funds available below a balance of zero";
                };
            };
            readonly description: "Account";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccounts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "ID of the account(s) to fetch";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly q: {
                    readonly type: "string";
                    readonly description: "ID or name of the account to search for";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly identifierType: {
                    readonly type: "string";
                    readonly description: "Accounts that contain this identifier type";
                    readonly examples: readonly ["SCAN"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'name.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'name.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'accountNumber.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'accountNumber.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'iban.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'iban.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Account statuses\n\nDefault: `ACTIVE`";
                        readonly default: "ACTIVE";
                        readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly minBalance: {
                    readonly minimum: 0;
                    readonly type: "string";
                    readonly description: "Accounts with balance equal or more than this amount";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly maxBalance: {
                    readonly minimum: 0.01;
                    readonly type: "string";
                    readonly description: "Accounts with balance equal or less than this amount";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly description: "Accounts created after and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly toCreatedDate: {
                    readonly type: "string";
                    readonly description: "Accounts created before and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly page: {
                    readonly type: "string";
                    readonly description: "Page to fetch (0 indexed)";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "string";
                    readonly description: "Size of Page to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sortField: {
                    readonly pattern: "(id|name|balance|externalReference|createdDate)";
                    readonly type: "string";
                    readonly description: "Sort by field";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sortOrder: {
                    readonly pattern: "(asc|desc)";
                    readonly type: "string";
                    readonly description: "Sorting order";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency for getting account by currency. Expected ISO Standard currency name i.e. GBP, EUR etc";
                    readonly examples: readonly ["GBP"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly showAvailableBalance: {
                    readonly type: "string";
                    readonly description: "Show available balance";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["name.type", "name.value", "accountNumber.type", "accountNumber.value", "iban.type", "iban.value"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["availableBalance", "balance", "createdDate", "currency", "customerId", "id", "identifiers", "name", "status"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the account";
                                readonly examples: readonly ["A0000001"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name for the account";
                            };
                            readonly balance: {
                                readonly type: "string";
                                readonly description: "Balance of the account in format 'NN.NN'";
                                readonly examples: readonly ["10000.0"];
                            };
                            readonly availableBalance: {
                                readonly type: "string";
                                readonly description: "The current available balance of the Account. Calculated by subtracting any pending payments from the current balance";
                                readonly examples: readonly ["10000.0"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "Currency of the account in ISO 4217 format";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`";
                                readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                                readonly examples: readonly ["ACTIVE"];
                            };
                            readonly identifiers: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                            readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                                        };
                                        readonly accountNumber: {
                                            readonly type: "string";
                                            readonly description: "Bank account Sort Code";
                                            readonly examples: readonly ["12345678"];
                                        };
                                        readonly sortCode: {
                                            readonly type: "string";
                                            readonly description: "Bank account Sort Code";
                                            readonly examples: readonly ["000000"];
                                        };
                                        readonly iban: {
                                            readonly type: "string";
                                            readonly examples: readonly ["GB20MODR04001401100000"];
                                        };
                                        readonly bic: {
                                            readonly type: "string";
                                            readonly examples: readonly ["MODRGB21"];
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly examples: readonly ["GBP"];
                                        };
                                        readonly countrySpecificDetails: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly bankName: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the destination bank.";
                                                    readonly examples: readonly ["Apple Bank"];
                                                };
                                                readonly bankAddress: {
                                                    readonly type: "string";
                                                    readonly description: "The address of the destination bank.";
                                                    readonly examples: readonly ["2100 Broadway"];
                                                };
                                                readonly bankCity: {
                                                    readonly type: "string";
                                                    readonly description: "The city in which the destination bank resides.";
                                                    readonly examples: readonly ["New York City"];
                                                };
                                                readonly bankBranchName: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the destination bank's branch.";
                                                    readonly examples: readonly ["New York"];
                                                };
                                                readonly bankBranchCode: {
                                                    readonly type: "string";
                                                    readonly description: "The code of the destination bank's branch.";
                                                    readonly examples: readonly ["44-04"];
                                                };
                                                readonly bankCode: {
                                                    readonly type: "string";
                                                    readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                                };
                                                readonly chineseId: {
                                                    readonly type: "string";
                                                    readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                                    readonly examples: readonly ["01101201901018889"];
                                                };
                                                readonly province: {
                                                    readonly type: "string";
                                                    readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                                    readonly examples: readonly ["Zhejiang"];
                                                };
                                                readonly business: {
                                                    readonly type: "boolean";
                                                    readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                                    readonly examples: readonly [true];
                                                };
                                                readonly bankCodeType: {
                                                    readonly type: "string";
                                                    readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                                    readonly enum: readonly ["ABA", "CHIPS"];
                                                    readonly examples: readonly ["ABA"];
                                                };
                                                readonly bankCountry: {
                                                    readonly type: "string";
                                                    readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                                    readonly enum: readonly
                                                    readonly examples: readonly ["US"];
                                                };
                                            };
                                        };
                                    };
                                    readonly description: "Account Identifier";
                                };
                            };
                            readonly customerId: {
                                readonly type: "string";
                                readonly description: "Unique id of the Customer";
                                readonly examples: readonly ["C0000001"];
                            };
                            readonly customerName: {
                                readonly type: "string";
                                readonly description: "Customer Name";
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "Your reference for an account";
                                readonly examples: readonly ["aReference_00001"];
                            };
                            readonly accessGroups: {
                                readonly type: "array";
                                readonly description: "Ids of Access Groups this account belongs to";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Ids of Access Groups this account belongs to";
                                };
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly directDebit: {
                                readonly type: "boolean";
                                readonly description: "Direct Debit Enabled";
                            };
                            readonly securedFundingLimit: {
                                readonly type: "string";
                                readonly description: "Limit of funds available below a balance of zero";
                            };
                        };
                        readonly description: "Account";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAccountsByCustomer: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of customer to fetch accounts for";
                };
            };
            readonly required: readonly ["customerId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly customerStatuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Customer statuses\n\nDefault: `ACTIVE`";
                        readonly default: "ACTIVE";
                        readonly enum: readonly ["ACTIVE", "CLOSED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Account statuses\n\nDefault: `ACTIVE`";
                        readonly default: "ACTIVE";
                        readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly minBalance: {
                    readonly minimum: 0;
                    readonly type: "string";
                    readonly description: "Accounts with balance equal or more than this amount";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly maxBalance: {
                    readonly minimum: 0.01;
                    readonly type: "string";
                    readonly description: "Accounts with balance equal or less than this amount";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly description: "Accounts created after and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly toCreatedDate: {
                    readonly type: "string";
                    readonly description: "Accounts created before and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly page: {
                    readonly type: "string";
                    readonly description: "Page to fetch (0 indexed)";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "string";
                    readonly description: "Size of Page to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sortField: {
                    readonly pattern: "(id|name|balance|externalReference|createdDate)";
                    readonly type: "string";
                    readonly description: "Sort by field";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sortOrder: {
                    readonly pattern: "(asc|desc)";
                    readonly type: "string";
                    readonly description: "Sorting order";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "The currency for getting account by currency. Expected ISO Standard currency name i.e. GBP, EUR etc";
                    readonly examples: readonly ["GBP"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly showAvailableBalance: {
                    readonly type: "string";
                    readonly description: "Show available balance";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["availableBalance", "balance", "createdDate", "currency", "customerId", "id", "identifiers", "name", "status"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the account";
                                readonly examples: readonly ["A0000001"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name for the account";
                            };
                            readonly balance: {
                                readonly type: "string";
                                readonly description: "Balance of the account in format 'NN.NN'";
                                readonly examples: readonly ["10000.0"];
                            };
                            readonly availableBalance: {
                                readonly type: "string";
                                readonly description: "The current available balance of the Account. Calculated by subtracting any pending payments from the current balance";
                                readonly examples: readonly ["10000.0"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "Currency of the account in ISO 4217 format";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`";
                                readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                                readonly examples: readonly ["ACTIVE"];
                            };
                            readonly identifiers: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                            readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                                        };
                                        readonly accountNumber: {
                                            readonly type: "string";
                                            readonly description: "Bank account Sort Code";
                                            readonly examples: readonly ["12345678"];
                                        };
                                        readonly sortCode: {
                                            readonly type: "string";
                                            readonly description: "Bank account Sort Code";
                                            readonly examples: readonly ["000000"];
                                        };
                                        readonly iban: {
                                            readonly type: "string";
                                            readonly examples: readonly ["GB20MODR04001401100000"];
                                        };
                                        readonly bic: {
                                            readonly type: "string";
                                            readonly examples: readonly ["MODRGB21"];
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly examples: readonly ["GBP"];
                                        };
                                        readonly countrySpecificDetails: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly bankName: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the destination bank.";
                                                    readonly examples: readonly ["Apple Bank"];
                                                };
                                                readonly bankAddress: {
                                                    readonly type: "string";
                                                    readonly description: "The address of the destination bank.";
                                                    readonly examples: readonly ["2100 Broadway"];
                                                };
                                                readonly bankCity: {
                                                    readonly type: "string";
                                                    readonly description: "The city in which the destination bank resides.";
                                                    readonly examples: readonly ["New York City"];
                                                };
                                                readonly bankBranchName: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the destination bank's branch.";
                                                    readonly examples: readonly ["New York"];
                                                };
                                                readonly bankBranchCode: {
                                                    readonly type: "string";
                                                    readonly description: "The code of the destination bank's branch.";
                                                    readonly examples: readonly ["44-04"];
                                                };
                                                readonly bankCode: {
                                                    readonly type: "string";
                                                    readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                                };
                                                readonly chineseId: {
                                                    readonly type: "string";
                                                    readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                                    readonly examples: readonly ["01101201901018889"];
                                                };
                                                readonly province: {
                                                    readonly type: "string";
                                                    readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                                    readonly examples: readonly ["Zhejiang"];
                                                };
                                                readonly business: {
                                                    readonly type: "boolean";
                                                    readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                                    readonly examples: readonly [true];
                                                };
                                                readonly bankCodeType: {
                                                    readonly type: "string";
                                                    readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                                    readonly enum: readonly ["ABA", "CHIPS"];
                                                    readonly examples: readonly ["ABA"];
                                                };
                                                readonly bankCountry: {
                                                    readonly type: "string";
                                                    readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                                    readonly enum: readonly
                                                    readonly examples: readonly ["US"];
                                                };
                                            };
                                        };
                                    };
                                    readonly description: "Account Identifier";
                                };
                            };
                            readonly customerId: {
                                readonly type: "string";
                                readonly description: "Unique id of the Customer";
                                readonly examples: readonly ["C0000001"];
                            };
                            readonly customerName: {
                                readonly type: "string";
                                readonly description: "Customer Name";
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "Your reference for an account";
                                readonly examples: readonly ["aReference_00001"];
                            };
                            readonly accessGroups: {
                                readonly type: "array";
                                readonly description: "Ids of Access Groups this account belongs to";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Ids of Access Groups this account belongs to";
                                };
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly directDebit: {
                                readonly type: "boolean";
                                readonly description: "Direct Debit Enabled";
                            };
                            readonly securedFundingLimit: {
                                readonly type: "string";
                                readonly description: "Limit of funds available below a balance of zero";
                            };
                        };
                        readonly description: "Account";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAllCustomerNotifications: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["customerId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the notification.";
                    };
                    readonly customerId: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the customer of this notification.";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                        readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                    };
                    readonly channel: {
                        readonly type: "string";
                        readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                        readonly enum: readonly ["EMAIL", "WEBHOOK"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                        readonly enum: readonly ["ACTIVE", "INACTIVE"];
                    };
                    readonly destinations: {
                        readonly type: "array";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        };
                    };
                    readonly config: {
                        readonly type: "object";
                        readonly properties: {
                            readonly threshold: {
                                readonly minimum: 0;
                                readonly type: "number";
                                readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                            };
                            readonly timesToRun: {
                                readonly type: "array";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                    readonly enum: readonly ["AM", "PM"];
                                };
                            };
                            readonly daysToRun: {
                                readonly type: "array";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                    readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                                };
                            };
                            readonly retry: {
                                readonly type: "boolean";
                                readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly secret: {
                                readonly maxLength: 32;
                                readonly minLength: 32;
                                readonly type: "string";
                                readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly hmacAlgorithm: {
                                readonly type: "string";
                                readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                                readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                            };
                        };
                        readonly description: "Configuration information for this Notification entity.";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the notification.";
                    };
                    readonly customerId: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the customer of this notification.";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                        readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                    };
                    readonly channel: {
                        readonly type: "string";
                        readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                        readonly enum: readonly ["EMAIL", "WEBHOOK"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                        readonly enum: readonly ["ACTIVE", "INACTIVE"];
                    };
                    readonly destinations: {
                        readonly type: "array";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        };
                    };
                    readonly config: {
                        readonly type: "object";
                        readonly properties: {
                            readonly threshold: {
                                readonly minimum: 0;
                                readonly type: "number";
                                readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                            };
                            readonly timesToRun: {
                                readonly type: "array";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                    readonly enum: readonly ["AM", "PM"];
                                };
                            };
                            readonly daysToRun: {
                                readonly type: "array";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                    readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                                };
                            };
                            readonly retry: {
                                readonly type: "boolean";
                                readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly secret: {
                                readonly maxLength: 32;
                                readonly minLength: 32;
                                readonly type: "string";
                                readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly hmacAlgorithm: {
                                readonly type: "string";
                                readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                                readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                            };
                        };
                        readonly description: "Configuration information for this Notification entity.";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAllPartnerNotifications: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly partnerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["partnerId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the notification.";
                    };
                    readonly customerId: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the customer of this notification.";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                        readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                    };
                    readonly channel: {
                        readonly type: "string";
                        readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                        readonly enum: readonly ["EMAIL", "WEBHOOK"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                        readonly enum: readonly ["ACTIVE", "INACTIVE"];
                    };
                    readonly destinations: {
                        readonly type: "array";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        };
                    };
                    readonly config: {
                        readonly type: "object";
                        readonly properties: {
                            readonly threshold: {
                                readonly minimum: 0;
                                readonly type: "number";
                                readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                            };
                            readonly timesToRun: {
                                readonly type: "array";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                    readonly enum: readonly ["AM", "PM"];
                                };
                            };
                            readonly daysToRun: {
                                readonly type: "array";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                    readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                                };
                            };
                            readonly retry: {
                                readonly type: "boolean";
                                readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly secret: {
                                readonly maxLength: 32;
                                readonly minLength: 32;
                                readonly type: "string";
                                readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly hmacAlgorithm: {
                                readonly type: "string";
                                readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                                readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                            };
                        };
                        readonly description: "Configuration information for this Notification entity.";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the notification.";
                    };
                    readonly customerId: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the customer of this notification.";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                        readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                    };
                    readonly channel: {
                        readonly type: "string";
                        readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                        readonly enum: readonly ["EMAIL", "WEBHOOK"];
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                        readonly enum: readonly ["ACTIVE", "INACTIVE"];
                    };
                    readonly destinations: {
                        readonly type: "array";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                        };
                    };
                    readonly config: {
                        readonly type: "object";
                        readonly properties: {
                            readonly threshold: {
                                readonly minimum: 0;
                                readonly type: "number";
                                readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                            };
                            readonly timesToRun: {
                                readonly type: "array";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                    readonly enum: readonly ["AM", "PM"];
                                };
                            };
                            readonly daysToRun: {
                                readonly type: "array";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                    readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                                };
                            };
                            readonly retry: {
                                readonly type: "boolean";
                                readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly secret: {
                                readonly maxLength: 32;
                                readonly minLength: 32;
                                readonly type: "string";
                                readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                            };
                            readonly hmacAlgorithm: {
                                readonly type: "string";
                                readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                                readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                            };
                        };
                        readonly description: "Configuration information for this Notification entity.";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAspsProviders: {
    readonly response: {
        readonly '200': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Unique identifier (within Modulr) of the ASPSP";
                        readonly examples: readonly ["H100000001"];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the ASPSP";
                        readonly examples: readonly ["Bank of Money"];
                    };
                    readonly capabilities: {
                        readonly type: "array";
                        readonly description: "Capability list of the ASPSP";
                        readonly items: {
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "Type of the capability, can be one of SINGLE_IMMEDIATE, STANDING_ORDER\n\n`SINGLE_IMMEDIATE` `STANDING_ORDER` `SWEEPING_VRP`";
                                    readonly enum: readonly ["SINGLE_IMMEDIATE", "STANDING_ORDER", "SWEEPING_VRP"];
                                    readonly examples: readonly ["SINGLE_IMMEDIATE"];
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly description: "Status of the capability, can be one of ENABLED, DISABLED\n\n`ENABLED` `DISABLED` `INACTIVE` `INTERNAL_ONLY`";
                                    readonly enum: readonly ["ENABLED", "DISABLED", "INACTIVE", "INTERNAL_ONLY"];
                                    readonly examples: readonly ["ENABLED"];
                                };
                            };
                            readonly description: "Capability list of the ASPSP";
                        };
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAsyncTask: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card task";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["createdDate", "status", "taskBid", "type"];
            readonly type: "object";
            readonly properties: {
                readonly taskBid: {
                    readonly type: "string";
                    readonly description: "ID of async task";
                    readonly examples: readonly ["T110000003"];
                };
                readonly resourceUrl: {
                    readonly type: "string";
                    readonly description: "Url of available resource after task completion";
                    readonly examples: readonly ["/cards/V110000022"];
                };
                readonly resourceId: {
                    readonly type: "string";
                    readonly description: "ID of resource after task completion. Will only be returned for COMPLETE tasks.";
                    readonly examples: readonly ["V110000022"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of async task\n\n`PHYSICAL_CARD_CREATE`";
                    readonly enum: readonly ["PHYSICAL_CARD_CREATE"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the task\n\n`RECEIVED` `RUNNING` `COMPLETE` `ERROR`";
                    readonly enum: readonly ["RECEIVED", "RUNNING", "COMPLETE", "ERROR"];
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "The creation date of the task";
                    readonly format: "date-time";
                };
                readonly errorReason: {
                    readonly type: "string";
                    readonly description: "The error reason. Only populated if status is ERROR";
                };
            };
            readonly description: "List of responses on the current page";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetAsyncTasks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["T000000001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card task";
                };
                readonly aid: {
                    readonly type: "string";
                    readonly examples: readonly ["A0000001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The account ID to retrieve card tasks for";
                };
                readonly statuses: {
                    readonly type: "string";
                    readonly enum: readonly ["RECEIVED", "RUNNING", "COMPLETE", "ERROR"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Statuses of card tasks to be retrieved";
                };
                readonly types: {
                    readonly type: "string";
                    readonly enum: readonly ["PHYSICAL_CARD_CREATE"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Types of card tasks to be retrieved";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (0 indexed)";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Size of page to fetch";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["createdDate", "status", "taskBid", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly taskBid: {
                                readonly type: "string";
                                readonly description: "ID of async task";
                                readonly examples: readonly ["T110000003"];
                            };
                            readonly resourceUrl: {
                                readonly type: "string";
                                readonly description: "Url of available resource after task completion";
                                readonly examples: readonly ["/cards/V110000022"];
                            };
                            readonly resourceId: {
                                readonly type: "string";
                                readonly description: "ID of resource after task completion. Will only be returned for COMPLETE tasks.";
                                readonly examples: readonly ["V110000022"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of async task\n\n`PHYSICAL_CARD_CREATE`";
                                readonly enum: readonly ["PHYSICAL_CARD_CREATE"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the task\n\n`RECEIVED` `RUNNING` `COMPLETE` `ERROR`";
                                readonly enum: readonly ["RECEIVED", "RUNNING", "COMPLETE", "ERROR"];
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "The creation date of the task";
                                readonly format: "date-time";
                            };
                            readonly errorReason: {
                                readonly type: "string";
                                readonly description: "The error reason. Only populated if status is ERROR";
                            };
                        };
                        readonly description: "List of responses on the current page";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetBatchPayment: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "id given when batch request was made";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly includePayments: {
                    readonly type: "boolean";
                    readonly default: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for the Batch Payment. 10 characters long";
                    readonly examples: readonly ["D920000001"];
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "External reference, if provided";
                    readonly examples: readonly ["aReference_00001"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Current status of batch.\n\n`ACCEPTED` `REJECTED` `SUBMITTED` `CANCELLED`";
                    readonly enum: readonly ["ACCEPTED", "REJECTED", "SUBMITTED", "CANCELLED"];
                    readonly examples: readonly ["ACCEPTED"];
                };
                readonly totalPayments: {
                    readonly type: "integer";
                    readonly description: "Total count of payments in this batch";
                    readonly format: "int32";
                    readonly examples: readonly [9123];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly currentUserCanApprove: {
                    readonly type: "boolean";
                    readonly description: "Whether the user is allowed to approve this batch, based on their approval limits, and applicable configuration";
                    readonly examples: readonly [true];
                };
                readonly paymentDetails: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "object";
                        readonly properties: {
                            readonly totalPaymentCount: {
                                readonly type: "integer";
                                readonly description: "Total count of payments";
                                readonly format: "int32";
                                readonly examples: readonly [10];
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly totalAmount: {
                                readonly type: "number";
                                readonly description: "Sum total of payment amounts";
                                readonly examples: readonly [100];
                            };
                            readonly pendingApprovalCount: {
                                readonly type: "integer";
                                readonly description: "Count of payments currently pending approval";
                                readonly format: "int32";
                                readonly examples: readonly [5];
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly pendingApprovalAmount: {
                                readonly type: "number";
                                readonly description: "Sum total of payment amounts currently pending approval";
                                readonly examples: readonly [50];
                            };
                        };
                        readonly description: "Summary of payments and approvals";
                    };
                    readonly description: "Summary of payments and approvals, per currency (as a 3-alpha currency code)";
                };
                readonly approvals: {
                    readonly type: "array";
                    readonly description: "List of batch-level approvals";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly approvedBy: {
                                readonly type: "string";
                                readonly description: "ID of user who approved this batch payment request";
                                readonly examples: readonly ["U2100021"];
                            };
                            readonly approvedOn: {
                                readonly type: "string";
                                readonly description: "Date this approval was applied";
                                readonly format: "date";
                                readonly examples: readonly ["2022-06-25"];
                            };
                        };
                        readonly description: "A single approval against a batch payment request";
                    };
                };
                readonly currentUserCanCancel: {
                    readonly type: "boolean";
                    readonly description: "Whether the user is allowed and currently able to cancel at least one of the payments in this batch";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the batch payment was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly processingDateFrom: {
                    readonly type: "string";
                    readonly description: "Earliest processing date in the batch file or the batch creation date if the file does not have any dates. Date format 'yyyy-MM-dd'";
                    readonly format: "date";
                    readonly examples: readonly ["2017-01-28"];
                };
                readonly processingDateTo: {
                    readonly type: "string";
                    readonly description: "Last processing date in the batch file or empty if the file does not have any dates. Date format 'Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000'";
                    readonly format: "date";
                    readonly examples: readonly ["2017-01-28"];
                };
                readonly paymentResponses: {
                    readonly type: "array";
                    readonly description: "Full details of all payments in this batch";
                    readonly deprecated: true;
                    readonly items: {
                        readonly required: readonly ["details", "externalReference", "id", "status"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Payment request. 10 characters long";
                                readonly examples: readonly ["P000001ABC"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`";
                                readonly enum: readonly ["SUBMITTED", "SCREENING_REQ", "VALIDATED", "PENDING_FOR_DATE", "PENDING_FOR_FUNDS", "EXT_PROC", "PROCESSED", "RECONCILED", "ER_INVALID", "ER_EXTCONN", "ER_EXTSYS", "ER_EXPIRED", "ER_GENERAL", "ER_BATCH", "EXT_SENT", "UNALLOCATED", "HELD", "RETURNED", "CANCELLED", "REPROCESSING", "VOID", "CLEARING", "HELD_IN_SUSPENSE"];
                                readonly examples: readonly ["VALIDATED"];
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'";
                                readonly format: "date-time";
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "external reference if provided";
                                readonly examples: readonly ["aReference_00001"];
                            };
                            readonly details: {
                                readonly type: "object";
                                readonly description: "All the details of the payment from the original request";
                                readonly additionalProperties: true;
                            };
                            readonly approvalStatus: {
                                readonly type: "string";
                                readonly description: "Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`";
                                readonly enum: readonly ["NOTNEEDED", "PENDING", "APPROVED", "REJECTED", "DELETED"];
                                readonly examples: readonly ["NOTNEEDED"];
                            };
                            readonly message: {
                                readonly type: "string";
                                readonly description: "Information about payment (if available)";
                            };
                            readonly schemeInfo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                    };
                                    readonly responseCode: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Information with regards to the payment scheme";
                            };
                        };
                        readonly description: "Full details of all payments in this batch";
                    };
                };
                readonly summary: {
                    readonly type: "object";
                    readonly properties: {
                        readonly total: {
                            readonly type: "integer";
                            readonly description: "Total count of payment requests in this batch";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly invalid: {
                            readonly type: "integer";
                            readonly description: "Count of invalid payment requests";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly inprogress: {
                            readonly type: "integer";
                            readonly description: "Count of payment requests in progress";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly completed: {
                            readonly type: "integer";
                            readonly description: "Count of completed payments";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly errors: {
                            readonly type: "integer";
                            readonly description: "Count of failed payment requests";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly info: {
                            readonly type: "string";
                            readonly description: "Additional information or error message regarding this batch payment request";
                        };
                        readonly strict: {
                            readonly type: "boolean";
                        };
                    };
                    readonly description: "Summary of the state of payment requests in this batch";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetBatchPayments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly externalReference: {
                    readonly maxLength: 50;
                    readonly minLength: 0;
                    readonly pattern: "[\\w-\\s]*";
                    readonly type: "string";
                    readonly description: "Batch payments External Reference contains this text.";
                    readonly examples: readonly ["aReference_00001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly description: "Batch payments created date equal or after to this date.";
                    readonly examples: readonly ["2022-05-16"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly batchPaymentStatuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Current status of batch. Multiple statuses can be specified by repeating the parameter.";
                        readonly enum: readonly ["ACCEPTED", "REJECTED", "SUBMITTED", "CANCELLED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly paymentStatuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Current status of payment. Multiple statuses can be specified by repeating the parameter.";
                        readonly enum: readonly ["SUBMITTED", "SCREENING_REQ", "VALIDATED", "PENDING_FOR_DATE", "PENDING_FOR_FUNDS", "EXT_PROC", "PROCESSED", "RECONCILED", "ER_INVALID", "ER_EXTCONN", "ER_EXTSYS", "ER_EXPIRED", "ER_GENERAL", "ER_BATCH", "EXT_SENT", "UNALLOCATED", "HELD", "RETURNED", "CANCELLED", "REPROCESSING", "VOID", "CLEARING"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly approvalStatus: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Filter batch payments which contain payments with the specified approval statuses";
                        readonly enum: readonly ["NOTNEEDED", "PENDING", "APPROVED", "REJECTED", "DELETED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly currentUserCanApprove: {
                    readonly type: "string";
                    readonly description: "Only return batch payments the current user can approve.";
                    readonly examples: readonly [true];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly createdByCustomerId: {
                    readonly type: "string";
                    readonly description: "Limit results by the customer which created the batch payment request";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly submissionType: {
                    readonly type: "string";
                    readonly description: "Limit results to batches with submission type specified";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly page: {
                    readonly type: "string";
                    readonly description: "Page to fetch (0 indexed)";
                    readonly default: "0";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "string";
                    readonly description: "Size of Page to fetch";
                    readonly default: "20";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Batch Payment. 10 characters long";
                                readonly examples: readonly ["D920000001"];
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "External reference, if provided";
                                readonly examples: readonly ["aReference_00001"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Current status of batch.\n\n`ACCEPTED` `REJECTED` `SUBMITTED` `CANCELLED`";
                                readonly enum: readonly ["ACCEPTED", "REJECTED", "SUBMITTED", "CANCELLED"];
                                readonly examples: readonly ["ACCEPTED"];
                            };
                            readonly totalPayments: {
                                readonly type: "integer";
                                readonly description: "Total count of payments in this batch";
                                readonly format: "int32";
                                readonly examples: readonly [9123];
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly currentUserCanApprove: {
                                readonly type: "boolean";
                                readonly description: "Whether the user is allowed to approve this batch, based on their approval limits, and applicable configuration";
                                readonly examples: readonly [true];
                            };
                            readonly paymentDetails: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly totalPaymentCount: {
                                            readonly type: "integer";
                                            readonly description: "Total count of payments";
                                            readonly format: "int32";
                                            readonly examples: readonly [10];
                                            readonly minimum: -2147483648;
                                            readonly maximum: 2147483647;
                                        };
                                        readonly totalAmount: {
                                            readonly type: "number";
                                            readonly description: "Sum total of payment amounts";
                                            readonly examples: readonly [100];
                                        };
                                        readonly pendingApprovalCount: {
                                            readonly type: "integer";
                                            readonly description: "Count of payments currently pending approval";
                                            readonly format: "int32";
                                            readonly examples: readonly [5];
                                            readonly minimum: -2147483648;
                                            readonly maximum: 2147483647;
                                        };
                                        readonly pendingApprovalAmount: {
                                            readonly type: "number";
                                            readonly description: "Sum total of payment amounts currently pending approval";
                                            readonly examples: readonly [50];
                                        };
                                    };
                                    readonly description: "Summary of payments and approvals";
                                };
                                readonly description: "Summary of payments and approvals, per currency (as a 3-alpha currency code)";
                            };
                            readonly approvals: {
                                readonly type: "array";
                                readonly description: "List of batch-level approvals";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly approvedBy: {
                                            readonly type: "string";
                                            readonly description: "ID of user who approved this batch payment request";
                                            readonly examples: readonly ["U2100021"];
                                        };
                                        readonly approvedOn: {
                                            readonly type: "string";
                                            readonly description: "Date this approval was applied";
                                            readonly format: "date";
                                            readonly examples: readonly ["2022-06-25"];
                                        };
                                    };
                                    readonly description: "A single approval against a batch payment request";
                                };
                            };
                            readonly currentUserCanCancel: {
                                readonly type: "boolean";
                                readonly description: "Whether the user is allowed and currently able to cancel at least one of the payments in this batch";
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime when the batch payment was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly processingDateFrom: {
                                readonly type: "string";
                                readonly description: "Earliest processing date in the batch file or the batch creation date if the file does not have any dates. Date format 'yyyy-MM-dd'";
                                readonly format: "date";
                                readonly examples: readonly ["2017-01-28"];
                            };
                            readonly processingDateTo: {
                                readonly type: "string";
                                readonly description: "Last processing date in the batch file or empty if the file does not have any dates. Date format 'Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000'";
                                readonly format: "date";
                                readonly examples: readonly ["2017-01-28"];
                            };
                        };
                        readonly description: "List of responses on the current page";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0-based, i.e first page = 0, second page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetBeneficiaries: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Id of Beneficiary(s) to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Filter by Customer Id";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly q: {
                    readonly type: "string";
                    readonly description: "Partial name of beneficiary or Scan Details Or IBAN Or external referenceOr default reference to search for. Deprecated use validForAccount, orSortCode, orAccountNumber, orIban, orName, orExternalReference, orDefaultReference instead";
                    readonly deprecated: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly modifiedSince: {
                    readonly type: "string";
                    readonly description: "Beneficiaries modified after this date time";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly hasExternalReference: {
                    readonly type: "boolean";
                    readonly description: "Filter by existence of external reference";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "External reference for beneficiary";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly iban: {
                    readonly type: "string";
                    readonly description: "IBAN";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly qualifier: {
                    readonly type: "string";
                    readonly description: "A list of external qualifiers";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "Approval item state(s) to filter by";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly validForAccount: {
                    readonly type: "string";
                    readonly description: "Source account BID. Limit results to beneficiaries which would be valid recipients of payments from the given account (e.g. IBAN can’t be paid from GBP account, SCAN can’t be paid from non-GBP account). The specified account must be accessible to the user";
                    readonly examples: readonly ["A000000001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orSortCode.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orSortCode.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orAccountNumber.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orAccountNumber.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orIban.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orIban.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orName.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orName.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orExternalReference.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orExternalReference.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orDefaultReference.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'orDefaultReference.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Created date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly partialName: {
                    readonly type: "string";
                    readonly description: "Partial name";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sortCode: {
                    readonly type: "string";
                    readonly description: "Sort code";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly accountNumber: {
                    readonly type: "string";
                    readonly description: "Account number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly page: {
                    readonly type: "string";
                    readonly description: "Page to fetch (0 indexed)";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "string";
                    readonly description: "Size of Page to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["orSortCode.type", "orSortCode.value", "orAccountNumber.type", "orAccountNumber.value", "orIban.type", "orIban.value", "orName.type", "orName.value", "orExternalReference.type", "orExternalReference.value", "orDefaultReference.type", "orDefaultReference.value"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["created", "customerId", "defaultReference", "destinationIdentifier", "id", "name", "status", "updated"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique reference for the Beneficiary.";
                                readonly examples: readonly ["B00000001A"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name for the Beneficiary";
                            };
                            readonly birthdate: {
                                readonly type: "string";
                                readonly description: "Date of birth for the Beneficiary in yyyy-MM-dd format";
                                readonly format: "date";
                            };
                            readonly emailAddress: {
                                readonly type: "string";
                                readonly description: "Email address for the Beneficiary";
                            };
                            readonly phoneNumber: {
                                readonly type: "string";
                                readonly description: "Phone number for the Beneficiary in international pattern";
                            };
                            readonly destinationIdentifier: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                        readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                                    };
                                    readonly accountNumber: {
                                        readonly type: "string";
                                        readonly description: "Bank account Sort Code";
                                        readonly examples: readonly ["12345678"];
                                    };
                                    readonly sortCode: {
                                        readonly type: "string";
                                        readonly description: "Bank account Sort Code";
                                        readonly examples: readonly ["000000"];
                                    };
                                    readonly iban: {
                                        readonly type: "string";
                                        readonly examples: readonly ["GB20MODR04001401100000"];
                                    };
                                    readonly bic: {
                                        readonly type: "string";
                                        readonly examples: readonly ["MODRGB21"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly examples: readonly ["GBP"];
                                    };
                                    readonly countrySpecificDetails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly bankName: {
                                                readonly type: "string";
                                                readonly description: "The name of the destination bank.";
                                                readonly examples: readonly ["Apple Bank"];
                                            };
                                            readonly bankAddress: {
                                                readonly type: "string";
                                                readonly description: "The address of the destination bank.";
                                                readonly examples: readonly ["2100 Broadway"];
                                            };
                                            readonly bankCity: {
                                                readonly type: "string";
                                                readonly description: "The city in which the destination bank resides.";
                                                readonly examples: readonly ["New York City"];
                                            };
                                            readonly bankBranchName: {
                                                readonly type: "string";
                                                readonly description: "The name of the destination bank's branch.";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly bankBranchCode: {
                                                readonly type: "string";
                                                readonly description: "The code of the destination bank's branch.";
                                                readonly examples: readonly ["44-04"];
                                            };
                                            readonly bankCode: {
                                                readonly type: "string";
                                                readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                            };
                                            readonly chineseId: {
                                                readonly type: "string";
                                                readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                                readonly examples: readonly ["01101201901018889"];
                                            };
                                            readonly province: {
                                                readonly type: "string";
                                                readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                                readonly examples: readonly ["Zhejiang"];
                                            };
                                            readonly business: {
                                                readonly type: "boolean";
                                                readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                                readonly examples: readonly [true];
                                            };
                                            readonly bankCodeType: {
                                                readonly type: "string";
                                                readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                                readonly enum: readonly ["ABA", "CHIPS"];
                                                readonly examples: readonly ["ABA"];
                                            };
                                            readonly bankCountry: {
                                                readonly type: "string";
                                                readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "GB", "MQ", "YT", "GP", "GF", "RE", "MF", "GI", "GG", "IM", "JE", "MC", "CH", "AD", "SM", "VA", "AX", "PM", "BL", "AF", "AL", "DZ", "AS", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AZ", "BS", "BH", "BD", "BB", "BY", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "IO", "VG", "BN", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CK", "CR", "CU", "CW", "CD", "DJ", "DM", "DO", "TL", "EC", "EG", "SV", "GQ", "ER", "SZ", "ET", "FK", "FO", "FJ", "PF", "TF", "GA", "GM", "GE", "GH", "GL", "GD", "GU", "GT", "GN", "GW", "GY", "HT", "HM", "HN", "HK", "IN", "ID", "IR", "IQ", "IL", "CI", "JM", "JP", "JO", "KZ", "KE", "KI", "XK", "KW", "KG", "LA", "LB", "LS", "LR", "LY", "MO", "MG", "MW", "MY", "MV", "ML", "MH", "MR", "MU", "MX", "FM", "MD", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "AN", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "KP", "MK", "MP", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PN", "PR", "QA", "CG", "RU", "RW", "SH", "KN", "LC", "VC", "WS", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SB", "SO", "ZA", "KR", "GS", "SS", "LK", "SD", "SR", "SY", "SJ", "TW", "TJ", "TZ", "TH", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "UM", "US", "UY", "UZ", "VU", "VE", "VN", "VI", "WF", "EH", "YE", "ZM", "ZW"];
                                                readonly examples: readonly ["US"];
                                            };
                                        };
                                    };
                                };
                                readonly description: "Account Identifier";
                            };
                            readonly redirectedDestination: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                        readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                                    };
                                    readonly accountNumber: {
                                        readonly type: "string";
                                        readonly description: "Bank account Sort Code";
                                        readonly examples: readonly ["12345678"];
                                    };
                                    readonly sortCode: {
                                        readonly type: "string";
                                        readonly description: "Bank account Sort Code";
                                        readonly examples: readonly ["000000"];
                                    };
                                    readonly iban: {
                                        readonly type: "string";
                                        readonly examples: readonly ["GB20MODR04001401100000"];
                                    };
                                    readonly bic: {
                                        readonly type: "string";
                                        readonly examples: readonly ["MODRGB21"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly examples: readonly ["GBP"];
                                    };
                                    readonly countrySpecificDetails: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly bankName: {
                                                readonly type: "string";
                                                readonly description: "The name of the destination bank.";
                                                readonly examples: readonly ["Apple Bank"];
                                            };
                                            readonly bankAddress: {
                                                readonly type: "string";
                                                readonly description: "The address of the destination bank.";
                                                readonly examples: readonly ["2100 Broadway"];
                                            };
                                            readonly bankCity: {
                                                readonly type: "string";
                                                readonly description: "The city in which the destination bank resides.";
                                                readonly examples: readonly ["New York City"];
                                            };
                                            readonly bankBranchName: {
                                                readonly type: "string";
                                                readonly description: "The name of the destination bank's branch.";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly bankBranchCode: {
                                                readonly type: "string";
                                                readonly description: "The code of the destination bank's branch.";
                                                readonly examples: readonly ["44-04"];
                                            };
                                            readonly bankCode: {
                                                readonly type: "string";
                                                readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                            };
                                            readonly chineseId: {
                                                readonly type: "string";
                                                readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                                readonly examples: readonly ["01101201901018889"];
                                            };
                                            readonly province: {
                                                readonly type: "string";
                                                readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                                readonly examples: readonly ["Zhejiang"];
                                            };
                                            readonly business: {
                                                readonly type: "boolean";
                                                readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                                readonly examples: readonly [true];
                                            };
                                            readonly bankCodeType: {
                                                readonly type: "string";
                                                readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                                readonly enum: readonly ["ABA", "CHIPS"];
                                                readonly examples: readonly ["ABA"];
                                            };
                                            readonly bankCountry: {
                                                readonly type: "string";
                                                readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                                readonly enum: readonly
                                                readonly examples: readonly ["US"];
                                            };
                                        };
                                    };
                                };
                                readonly description: "Account Identifier";
                            };
                            readonly defaultReference: {
                                readonly type: "string";
                                readonly description: "Default reference used for payments to the Beneficiary.";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the Beneficiary. Can be:";
                            };
                            readonly created: {
                                readonly type: "string";
                                readonly description: "Datetime the Beneficiary was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Id of the account if this beneficiary is a Modulr account, null otherwise";
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "External system reference for the Beneficiary";
                            };
                            readonly approvalRequired: {
                                readonly type: "boolean";
                                readonly description: "Indicates if the beneficiary creation is pending approval";
                            };
                            readonly customerId: {
                                readonly type: "string";
                                readonly description: "Id of the customer than owns this beneficiary";
                                readonly examples: readonly ["C0000001"];
                            };
                            readonly updated: {
                                readonly type: "string";
                                readonly description: "Datetime the Beneficiary was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly address: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly type: "string";
                                    };
                                    readonly addressLine2: {
                                        readonly type: "string";
                                    };
                                    readonly postTown: {
                                        readonly type: "string";
                                    };
                                    readonly postCode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly countrySubDivision: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Address";
                            };
                            readonly qualifier: {
                                readonly type: "string";
                                readonly description: "Qualifier for this beneficiary";
                            };
                            readonly approvalRequestId: {
                                readonly type: "string";
                                readonly description: "Approval request ID for pending records.";
                            };
                            readonly approvalStatus: {
                                readonly type: "string";
                                readonly description: "Approval status of item.\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`";
                                readonly enum: readonly ["NOTNEEDED", "PENDING", "APPROVED", "REJECTED", "DELETED"];
                            };
                            readonly accessGroups: {
                                readonly uniqueItems: true;
                                readonly type: "array";
                                readonly description: "Access groups associated with beneficiary.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "Access groups associated with beneficiary.";
                                };
                            };
                        };
                        readonly description: "Beneficiary";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card to view";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Card identifier. Maximum of 10 alphanumeric characters";
                    readonly examples: readonly ["V000000001"];
                };
                readonly holder: {
                    readonly required: readonly ["billingAddress", "dateOfBirth", "firstName", "lastName", "mobileNumber"];
                    readonly type: "object";
                    readonly properties: {
                        readonly title: {
                            readonly pattern: "^[0-9a-zA-Z]{1,4}$";
                            readonly type: "string";
                            readonly description: "Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.";
                            readonly examples: readonly ["Mr"];
                        };
                        readonly firstName: {
                            readonly pattern: "[\\x20-\\x7e]{1,20}";
                            readonly type: "string";
                            readonly description: "Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                            readonly examples: readonly ["Joe"];
                        };
                        readonly lastName: {
                            readonly pattern: "[\\x20-\\x7e]{1,20}";
                            readonly type: "string";
                            readonly description: "Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                            readonly examples: readonly ["Bloggs"];
                        };
                        readonly billingAddress: {
                            readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                            readonly type: "object";
                            readonly properties: {
                                readonly addressLine1: {
                                    readonly maxLength: 50;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "First line of address";
                                    readonly examples: readonly ["Floor 10"];
                                };
                                readonly addressLine2: {
                                    readonly maxLength: 50;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                    readonly description: "Second line of address";
                                    readonly examples: readonly ["80 George Street"];
                                };
                                readonly postTown: {
                                    readonly maxLength: 20;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "Post town";
                                    readonly examples: readonly ["EDINBURGH"];
                                };
                                readonly postCode: {
                                    readonly maxLength: 10;
                                    readonly minLength: 1;
                                    readonly type: "string";
                                    readonly description: "Postcode";
                                    readonly examples: readonly ["EH2 3BU"];
                                };
                                readonly country: {
                                    readonly type: "string";
                                    readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                                    readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                    readonly examples: readonly ["GB"];
                                };
                            };
                            readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                        };
                        readonly dateOfBirth: {
                            readonly type: "string";
                            readonly description: "Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.";
                            readonly format: "date";
                            readonly examples: readonly ["2001-01-01"];
                        };
                        readonly mobileNumber: {
                            readonly type: "string";
                            readonly description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.";
                            readonly examples: readonly ["+447123456000"];
                        };
                        readonly email: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly type: "string";
                            readonly description: "Cardholder email";
                            readonly examples: readonly ["cardholder@example.com"];
                        };
                    };
                    readonly description: "CardHolder";
                };
                readonly expiry: {
                    readonly type: "string";
                    readonly description: "An ISO 8601 date with year & month components only";
                    readonly examples: readonly ["2018-12"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`";
                    readonly enum: readonly ["CREATED", "ACTIVE", "BLOCKED", "SUSPENDED", "CANCELLED", "EXPIRED"];
                };
                readonly currency: {
                    readonly type: "string";
                    readonly description: "A 3 letter ISO 4217 code representing the card currency";
                    readonly examples: readonly ["GBP"];
                };
                readonly limit: {
                    readonly type: "string";
                    readonly description: "Total card authorisation limit";
                    readonly examples: readonly ["1000.0"];
                };
                readonly maxLimit: {
                    readonly type: "string";
                    readonly description: "Maximum limit which can be set on this card and is the maximum lifetime spend the card can have";
                    readonly examples: readonly ["4000.0"];
                };
                readonly spend: {
                    readonly type: "string";
                    readonly description: "Current total of all authorisations on this card";
                    readonly examples: readonly ["250.0"];
                };
                readonly externalRef: {
                    readonly type: "string";
                    readonly description: "Client reference for the newly created card. Maximum of 50 characters.";
                    readonly examples: readonly ["TTQ_51211"];
                };
                readonly maskedPan: {
                    readonly type: "string";
                    readonly description: "Masked card PAN";
                    readonly examples: readonly ["527095******3544"];
                };
                readonly cardType: {
                    readonly type: "string";
                    readonly description: "Card product type";
                    readonly examples: readonly ["Business"];
                };
                readonly cardScheme: {
                    readonly type: "string";
                    readonly description: "Card scheme. MASTERCARD or VISA";
                    readonly examples: readonly ["MASTERCARD"];
                };
                readonly accountBid: {
                    readonly type: "string";
                    readonly description: "Account identifier";
                    readonly examples: readonly ["A020N8PD"];
                };
                readonly format: {
                    readonly type: "string";
                    readonly description: "The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`";
                    readonly enum: readonly ["PHYSICAL", "VIRTUAL"];
                    readonly examples: readonly ["PHYSICAL"];
                };
                readonly constraints: {
                    readonly required: readonly ["mccWhitelist"];
                    readonly type: "object";
                    readonly properties: {
                        readonly mccWhitelist: {
                            readonly type: "array";
                            readonly description: "mccWhitelist";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "mccWhitelist";
                                readonly examples: readonly ["[\"1000\",\"1002-3000\",\"5060\"]"];
                            };
                            readonly examples: readonly ["1000", "1002-3000", "5060"];
                        };
                        readonly authorisation: {
                            readonly type: "object";
                            readonly properties: {
                                readonly spend: {
                                    readonly type: "array";
                                    readonly description: "Spending constraints";
                                    readonly items: {
                                        readonly required: readonly ["currency"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly currency: {
                                                readonly type: "string";
                                                readonly description: "A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`";
                                                readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                                readonly examples: readonly ["GBP"];
                                            };
                                            readonly min: {
                                                readonly type: "number";
                                                readonly description: "Minimum spend amount (inclusive)";
                                                readonly examples: readonly [5];
                                            };
                                            readonly max: {
                                                readonly type: "number";
                                                readonly description: "Maximum spend amount (inclusive)";
                                                readonly examples: readonly [2000];
                                            };
                                        };
                                        readonly description: "Spending constraints";
                                    };
                                };
                            };
                            readonly description: "Authorisation constraints";
                        };
                    };
                    readonly description: "CardConstraints";
                };
                readonly design: {
                    readonly required: readonly ["cardRef", "packagingRef"];
                    readonly type: "object";
                    readonly properties: {
                        readonly cardRef: {
                            readonly type: "string";
                            readonly description: "Design reference for card";
                        };
                        readonly packagingRef: {
                            readonly type: "string";
                            readonly description: "Design reference for card packaging";
                        };
                    };
                    readonly description: "Design references for physical card and packaging";
                };
                readonly printedName: {
                    readonly type: "string";
                    readonly description: "Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly format: "date-time";
                };
                readonly threeDSecureStatus: {
                    readonly type: "string";
                    readonly description: "The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                    readonly deprecated: true;
                    readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                    readonly examples: readonly ["ENROLLED"];
                };
                readonly authentication: {
                    readonly type: "object";
                    readonly properties: {
                        readonly otpSmsStatus: {
                            readonly type: "string";
                            readonly description: "The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                            readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                            readonly examples: readonly ["ENROLLED"];
                        };
                        readonly knowledgeBaseStatus: {
                            readonly type: "string";
                            readonly description: "The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                            readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                            readonly examples: readonly ["ENROLLED"];
                        };
                    };
                    readonly description: "The 3DS authentication method statuses";
                };
                readonly shippingAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly maxLength: 50;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly description: "First line of address";
                            readonly examples: readonly ["Floor 10"];
                        };
                        readonly addressLine2: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly type: "string";
                            readonly description: "Second line of address";
                            readonly examples: readonly ["80 George Street"];
                        };
                        readonly postTown: {
                            readonly maxLength: 20;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly description: "Post town";
                            readonly examples: readonly ["EDINBURGH"];
                        };
                        readonly postCode: {
                            readonly maxLength: 10;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly description: "Postcode";
                            readonly examples: readonly ["EH2 3BU"];
                        };
                        readonly country: {
                            readonly type: "string";
                            readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                            readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                            readonly examples: readonly ["GB"];
                        };
                    };
                    readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCardActivities: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly examples: readonly ["2019-01-01T15:14:38-0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activities with a created date equal to or after this date. Format: 'yyyy-MM-dd'T'HH:mm:ssZ'. Value cannot be more than 7 days in the past when mandatory. Value is optional if only a single Card ID has been provided";
                };
                readonly toCreatedDate: {
                    readonly type: "string";
                    readonly examples: readonly ["2019-01-01T15:14:38-0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activities with a created date before this date. Format: 'yyyy-MM-dd'T'HH:mm:ssZ'. Value is optional if only a single Card ID has been provided";
                };
                readonly statuses: {
                    readonly type: "string";
                    readonly enum: readonly ["DECLINED", "APPROVED", "SETTLED", "EXPIRED", "APPLIED"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activities with possibly multiple statuses equal to this value. Omitting this is equivalent to supplying all values";
                };
                readonly types: {
                    readonly type: "string";
                    readonly enum: readonly ["AUTHORISATION", "REVERSAL", "SETTLEMENT", "REFUND", "ORIGINAL_CREDIT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activities with possibly multiple types equal to this value. Omitting this is equivalent to supplying all values";
                };
                readonly cards: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly default: readonly [];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activities with possibly multiple card IDs equal to this value. Only one of 'cards' or 'accounts' must be supplied";
                };
                readonly accounts: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly default: readonly [];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activities with possibly multiple account IDs equal to this value. Only one of 'cards' or 'accounts' must be supplied";
                };
                readonly ids: {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly default: readonly [];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activities with the specified IDs. Only 'page' and/or 'size' may be used in conjunction with this filter.";
                };
                readonly orderId: {
                    readonly type: "integer";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Activites with specified Order Id";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (0 indexed)";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Max page size is 500";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["billingAmount", "billingCurrency", "cardId", "createdDate", "fxRate", "id", "mcc", "orderId", "transactionAmount", "transactionCurrency", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The card activity identifier. Maximum of 10 alphanumeric characters";
                                readonly examples: readonly ["X000000001"];
                            };
                            readonly orderId: {
                                readonly type: "string";
                                readonly description: "Order identifier which links together related authorisations, reversals & settlements. Maximum of 10 alphanumeric characters";
                                readonly examples: readonly ["1234"];
                            };
                            readonly cardId: {
                                readonly type: "string";
                                readonly description: "Card identifier. Maximum of 10 alphanumeric characters";
                                readonly examples: readonly ["V000000001"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of card activity\n\n`AUTHORISATION` `REVERSAL` `SETTLEMENT` `REFUND`";
                                readonly enum: readonly ["AUTHORISATION", "REVERSAL", "SETTLEMENT", "REFUND"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of card activity. Only applies to activities of type AUTHORISATION\n\n`DECLINED` `APPROVED` `SETTLED` `EXPIRED`";
                                readonly enum: readonly ["DECLINED", "APPROVED", "SETTLED", "EXPIRED"];
                            };
                            readonly reason: {
                                readonly type: "string";
                                readonly description: "The reason why this activity was declined. Only applies to activities with status DECLINED";
                                readonly examples: readonly ["Account has insufficient funds"];
                            };
                            readonly verifiedBy3DS: {
                                readonly type: "boolean";
                                readonly description: "Whether the activity was 3DS enabled";
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "The creation date of the card activity";
                                readonly format: "date-time";
                            };
                            readonly transactionAmount: {
                                readonly type: "number";
                                readonly description: "The card activity transaction amount";
                                readonly examples: readonly [123.45];
                            };
                            readonly transactionCurrency: {
                                readonly type: "string";
                                readonly description: "The 3 letter ISO 4217 card activity transaction currency";
                                readonly examples: readonly ["EUR"];
                            };
                            readonly billingAmount: {
                                readonly type: "number";
                                readonly description: "The card activity billing amount";
                                readonly examples: readonly [678.91];
                            };
                            readonly billingCurrency: {
                                readonly type: "string";
                                readonly description: "The 3 letter ISO 4217 card activity billing currency";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly fxRate: {
                                readonly type: "number";
                                readonly description: "The FX rate applied to any conversion between transaction & billing amount. Rounded to 6 decimal places and zero padded";
                                readonly examples: readonly [1.123456];
                            };
                            readonly mcc: {
                                readonly type: "string";
                                readonly description: "The Merchant Category Code (MCC) for the card activity. Follows ISO-18245 format";
                                readonly examples: readonly ["5182"];
                            };
                            readonly merchantName: {
                                readonly type: "string";
                                readonly description: "The merchant name";
                                readonly examples: readonly ["Loudons Cafe"];
                            };
                            readonly merchantCountry: {
                                readonly type: "string";
                                readonly description: "The 3 letter ISO 3166 merchant country code";
                                readonly examples: readonly ["GBR"];
                            };
                            readonly authorisationInfo: {
                                readonly required: readonly ["inputMethod", "type"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "Transaction type";
                                    };
                                    readonly inputMethod: {
                                        readonly type: "string";
                                        readonly description: "Input method";
                                    };
                                };
                                readonly description: "Authorisation information of the activity";
                            };
                            readonly cardTokenId: {
                                readonly type: "string";
                                readonly description: "The card token associated with this activity, if a tokenised card was used.";
                            };
                            readonly cardTokenDeviceId: {
                                readonly type: "string";
                                readonly description: "The bound card token device associated with this activity, if a tokenised card was used.";
                            };
                        };
                        readonly description: "List of responses on the current page";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCards: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly examples: readonly ["2019-03-01T01:01:01+0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Cards created on or after this date. Cannot be older than 7 days. Format is `yyyy-MM-dd'T'HH:mm:ss` with zero offset from UTC.";
                };
                readonly toCreatedDate: {
                    readonly type: "string";
                    readonly examples: readonly ["2019-03-01T01:01:01+0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Cards created on or before this date. Format is `yyyy-MM-dd'T'HH:mm:ss` with zero offset from UTC.";
                };
                readonly statuses: {
                    readonly type: "string";
                    readonly enum: readonly ["CREATED", "ACTIVE", "BLOCKED", "SUSPENDED", "CANCELLED", "EXPIRED"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Statuses of cards to be retrieved";
                };
                readonly id: {
                    readonly type: "string";
                    readonly examples: readonly ["V000000001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card to view.";
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly examples: readonly ["A0000001"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of account to retrieve cards for.";
                };
                readonly externalRef: {
                    readonly type: "string";
                    readonly examples: readonly ["ExampleCardRef123"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The client reference of the card to retrieve.";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (0 indexed)";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Size of page to fetch";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Card identifier. Maximum of 10 alphanumeric characters";
                                readonly examples: readonly ["V000000001"];
                            };
                            readonly holder: {
                                readonly required: readonly ["billingAddress", "dateOfBirth", "firstName", "lastName", "mobileNumber"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly title: {
                                        readonly pattern: "^[0-9a-zA-Z]{1,4}$";
                                        readonly type: "string";
                                        readonly description: "Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.";
                                        readonly examples: readonly ["Mr"];
                                    };
                                    readonly firstName: {
                                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                                        readonly type: "string";
                                        readonly description: "Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                                        readonly examples: readonly ["Joe"];
                                    };
                                    readonly lastName: {
                                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                                        readonly type: "string";
                                        readonly description: "Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                                        readonly examples: readonly ["Bloggs"];
                                    };
                                    readonly billingAddress: {
                                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly addressLine1: {
                                                readonly maxLength: 50;
                                                readonly minLength: 1;
                                                readonly type: "string";
                                                readonly description: "First line of address";
                                                readonly examples: readonly ["Floor 10"];
                                            };
                                            readonly addressLine2: {
                                                readonly maxLength: 50;
                                                readonly minLength: 0;
                                                readonly type: "string";
                                                readonly description: "Second line of address";
                                                readonly examples: readonly ["80 George Street"];
                                            };
                                            readonly postTown: {
                                                readonly maxLength: 20;
                                                readonly minLength: 1;
                                                readonly type: "string";
                                                readonly description: "Post town";
                                                readonly examples: readonly ["EDINBURGH"];
                                            };
                                            readonly postCode: {
                                                readonly maxLength: 10;
                                                readonly minLength: 1;
                                                readonly type: "string";
                                                readonly description: "Postcode";
                                                readonly examples: readonly ["EH2 3BU"];
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                                readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                                readonly examples: readonly ["GB"];
                                            };
                                        };
                                        readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                                    };
                                    readonly dateOfBirth: {
                                        readonly type: "string";
                                        readonly description: "Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.";
                                        readonly format: "date";
                                        readonly examples: readonly ["2001-01-01"];
                                    };
                                    readonly mobileNumber: {
                                        readonly type: "string";
                                        readonly description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.";
                                        readonly examples: readonly ["+447123456000"];
                                    };
                                    readonly email: {
                                        readonly maxLength: 50;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Cardholder email";
                                        readonly examples: readonly ["cardholder@example.com"];
                                    };
                                };
                                readonly description: "CardHolder";
                            };
                            readonly expiry: {
                                readonly type: "string";
                                readonly description: "An ISO 8601 date with year & month components only";
                                readonly examples: readonly ["2018-12"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`";
                                readonly enum: readonly ["CREATED", "ACTIVE", "BLOCKED", "SUSPENDED", "CANCELLED", "EXPIRED"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "A 3 letter ISO 4217 code representing the card currency";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly limit: {
                                readonly type: "string";
                                readonly description: "Total card authorisation limit";
                                readonly examples: readonly ["1000.0"];
                            };
                            readonly maxLimit: {
                                readonly type: "string";
                                readonly description: "Maximum limit which can be set on this card and is the maximum lifetime spend the card can have";
                                readonly examples: readonly ["4000.0"];
                            };
                            readonly spend: {
                                readonly type: "string";
                                readonly description: "Current total of all authorisations on this card";
                                readonly examples: readonly ["250.0"];
                            };
                            readonly externalRef: {
                                readonly type: "string";
                                readonly description: "Client reference for the newly created card. Maximum of 50 characters.";
                                readonly examples: readonly ["TTQ_51211"];
                            };
                            readonly maskedPan: {
                                readonly type: "string";
                                readonly description: "Masked card PAN";
                                readonly examples: readonly ["527095******3544"];
                            };
                            readonly cardType: {
                                readonly type: "string";
                                readonly description: "Card product type";
                                readonly examples: readonly ["Business"];
                            };
                            readonly cardScheme: {
                                readonly type: "string";
                                readonly description: "Card scheme. MASTERCARD or VISA";
                                readonly examples: readonly ["MASTERCARD"];
                            };
                            readonly accountBid: {
                                readonly type: "string";
                                readonly description: "Account identifier";
                                readonly examples: readonly ["A020N8PD"];
                            };
                            readonly format: {
                                readonly type: "string";
                                readonly description: "The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`";
                                readonly enum: readonly ["PHYSICAL", "VIRTUAL"];
                                readonly examples: readonly ["PHYSICAL"];
                            };
                            readonly constraints: {
                                readonly required: readonly ["mccWhitelist"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly mccWhitelist: {
                                        readonly type: "array";
                                        readonly description: "mccWhitelist";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly description: "mccWhitelist";
                                            readonly examples: readonly ["[\"1000\",\"1002-3000\",\"5060\"]"];
                                        };
                                        readonly examples: readonly ["1000", "1002-3000", "5060"];
                                    };
                                    readonly authorisation: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly spend: {
                                                readonly type: "array";
                                                readonly description: "Spending constraints";
                                                readonly items: {
                                                    readonly required: readonly ["currency"];
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly currency: {
                                                            readonly type: "string";
                                                            readonly description: "A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`";
                                                            readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                                            readonly examples: readonly ["GBP"];
                                                        };
                                                        readonly min: {
                                                            readonly type: "number";
                                                            readonly description: "Minimum spend amount (inclusive)";
                                                            readonly examples: readonly [5];
                                                        };
                                                        readonly max: {
                                                            readonly type: "number";
                                                            readonly description: "Maximum spend amount (inclusive)";
                                                            readonly examples: readonly [2000];
                                                        };
                                                    };
                                                    readonly description: "Spending constraints";
                                                };
                                            };
                                        };
                                        readonly description: "Authorisation constraints";
                                    };
                                };
                                readonly description: "CardConstraints";
                            };
                            readonly design: {
                                readonly required: readonly ["cardRef", "packagingRef"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly cardRef: {
                                        readonly type: "string";
                                        readonly description: "Design reference for card";
                                    };
                                    readonly packagingRef: {
                                        readonly type: "string";
                                        readonly description: "Design reference for card packaging";
                                    };
                                };
                                readonly description: "Design references for physical card and packaging";
                            };
                            readonly printedName: {
                                readonly type: "string";
                                readonly description: "Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)";
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly threeDSecureStatus: {
                                readonly type: "string";
                                readonly description: "The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                                readonly deprecated: true;
                                readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                                readonly examples: readonly ["ENROLLED"];
                            };
                            readonly authentication: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly otpSmsStatus: {
                                        readonly type: "string";
                                        readonly description: "The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                                        readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                                        readonly examples: readonly ["ENROLLED"];
                                    };
                                    readonly knowledgeBaseStatus: {
                                        readonly type: "string";
                                        readonly description: "The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                                        readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                                        readonly examples: readonly ["ENROLLED"];
                                    };
                                };
                                readonly description: "The 3DS authentication method statuses";
                            };
                            readonly shippingAddress: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly maxLength: 50;
                                        readonly minLength: 1;
                                        readonly type: "string";
                                        readonly description: "First line of address";
                                        readonly examples: readonly ["Floor 10"];
                                    };
                                    readonly addressLine2: {
                                        readonly maxLength: 50;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Second line of address";
                                        readonly examples: readonly ["80 George Street"];
                                    };
                                    readonly postTown: {
                                        readonly maxLength: 20;
                                        readonly minLength: 1;
                                        readonly type: "string";
                                        readonly description: "Post town";
                                        readonly examples: readonly ["EDINBURGH"];
                                    };
                                    readonly postCode: {
                                        readonly maxLength: 10;
                                        readonly minLength: 1;
                                        readonly type: "string";
                                        readonly description: "Postcode";
                                        readonly examples: readonly ["EH2 3BU"];
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                        readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                                        readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                        readonly examples: readonly ["GB"];
                                    };
                                };
                                readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                            };
                        };
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCardsByAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly aid: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account ID";
                };
            };
            readonly required: readonly ["aid"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly statuses: {
                    readonly type: "string";
                    readonly enum: readonly ["CREATED", "ACTIVE", "BLOCKED", "SUSPENDED", "CANCELLED", "EXPIRED"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Statuses of cards to be retrieved";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Card identifier. Maximum of 10 alphanumeric characters";
                                readonly examples: readonly ["V000000001"];
                            };
                            readonly holder: {
                                readonly required: readonly ["billingAddress", "dateOfBirth", "firstName", "lastName", "mobileNumber"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly title: {
                                        readonly pattern: "^[0-9a-zA-Z]{1,4}$";
                                        readonly type: "string";
                                        readonly description: "Cardholder title is optional for all card types. Maximum of 4 alphanumeric characters.";
                                        readonly examples: readonly ["Mr"];
                                    };
                                    readonly firstName: {
                                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                                        readonly type: "string";
                                        readonly description: "Cardholder first name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                                        readonly examples: readonly ["Joe"];
                                    };
                                    readonly lastName: {
                                        readonly pattern: "[\\x20-\\x7e]{1,20}";
                                        readonly type: "string";
                                        readonly description: "Cardholder last name. Maximum of 20 alphanumeric characters including space, hyphen and apostrophe. Optional for individual customers whose partner has verification type EXTERNAL.";
                                        readonly examples: readonly ["Bloggs"];
                                    };
                                    readonly billingAddress: {
                                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly addressLine1: {
                                                readonly maxLength: 50;
                                                readonly minLength: 1;
                                                readonly type: "string";
                                                readonly description: "First line of address";
                                                readonly examples: readonly ["Floor 10"];
                                            };
                                            readonly addressLine2: {
                                                readonly maxLength: 50;
                                                readonly minLength: 0;
                                                readonly type: "string";
                                                readonly description: "Second line of address";
                                                readonly examples: readonly ["80 George Street"];
                                            };
                                            readonly postTown: {
                                                readonly maxLength: 20;
                                                readonly minLength: 1;
                                                readonly type: "string";
                                                readonly description: "Post town";
                                                readonly examples: readonly ["EDINBURGH"];
                                            };
                                            readonly postCode: {
                                                readonly maxLength: 10;
                                                readonly minLength: 1;
                                                readonly type: "string";
                                                readonly description: "Postcode";
                                                readonly examples: readonly ["EH2 3BU"];
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                                readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                                readonly examples: readonly ["GB"];
                                            };
                                        };
                                        readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                                    };
                                    readonly dateOfBirth: {
                                        readonly type: "string";
                                        readonly description: "Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Optional for individual customers.";
                                        readonly format: "date";
                                        readonly examples: readonly ["2001-01-01"];
                                    };
                                    readonly mobileNumber: {
                                        readonly type: "string";
                                        readonly description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.";
                                        readonly examples: readonly ["+447123456000"];
                                    };
                                    readonly email: {
                                        readonly maxLength: 50;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Cardholder email";
                                        readonly examples: readonly ["cardholder@example.com"];
                                    };
                                };
                                readonly description: "CardHolder";
                            };
                            readonly expiry: {
                                readonly type: "string";
                                readonly description: "An ISO 8601 date with year & month components only";
                                readonly examples: readonly ["2018-12"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The current state of the card.\n\n`CREATED` `ACTIVE` `BLOCKED` `SUSPENDED` `CANCELLED` `EXPIRED`";
                                readonly enum: readonly ["CREATED", "ACTIVE", "BLOCKED", "SUSPENDED", "CANCELLED", "EXPIRED"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "A 3 letter ISO 4217 code representing the card currency";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly limit: {
                                readonly type: "string";
                                readonly description: "Total card authorisation limit";
                                readonly examples: readonly ["1000.0"];
                            };
                            readonly maxLimit: {
                                readonly type: "string";
                                readonly description: "Maximum limit which can be set on this card and is the maximum lifetime spend the card can have";
                                readonly examples: readonly ["4000.0"];
                            };
                            readonly spend: {
                                readonly type: "string";
                                readonly description: "Current total of all authorisations on this card";
                                readonly examples: readonly ["250.0"];
                            };
                            readonly externalRef: {
                                readonly type: "string";
                                readonly description: "Client reference for the newly created card. Maximum of 50 characters.";
                                readonly examples: readonly ["TTQ_51211"];
                            };
                            readonly maskedPan: {
                                readonly type: "string";
                                readonly description: "Masked card PAN";
                                readonly examples: readonly ["527095******3544"];
                            };
                            readonly cardType: {
                                readonly type: "string";
                                readonly description: "Card product type";
                                readonly examples: readonly ["Business"];
                            };
                            readonly cardScheme: {
                                readonly type: "string";
                                readonly description: "Card scheme. MASTERCARD or VISA";
                                readonly examples: readonly ["MASTERCARD"];
                            };
                            readonly accountBid: {
                                readonly type: "string";
                                readonly description: "Account identifier";
                                readonly examples: readonly ["A020N8PD"];
                            };
                            readonly format: {
                                readonly type: "string";
                                readonly description: "The format of the card.  PHYSICAL or VIRTUAL\n\n`PHYSICAL` `VIRTUAL`";
                                readonly enum: readonly ["PHYSICAL", "VIRTUAL"];
                                readonly examples: readonly ["PHYSICAL"];
                            };
                            readonly constraints: {
                                readonly required: readonly ["mccWhitelist"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly mccWhitelist: {
                                        readonly type: "array";
                                        readonly description: "mccWhitelist";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly description: "mccWhitelist";
                                            readonly examples: readonly ["[\"1000\",\"1002-3000\",\"5060\"]"];
                                        };
                                        readonly examples: readonly ["1000", "1002-3000", "5060"];
                                    };
                                    readonly authorisation: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly spend: {
                                                readonly type: "array";
                                                readonly description: "Spending constraints";
                                                readonly items: {
                                                    readonly required: readonly ["currency"];
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly currency: {
                                                            readonly type: "string";
                                                            readonly description: "A 3 letter ISO 4217 code representing the transaction currency\n\n`GBP` `EUR` `AED` `AFN` `ALL` `AMD` `ANG` `AOA` `ARS` `AUD` `AWG` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BOV` `BRL` `BSD` `BTN` `BWP` `BYN` `BZD` `CAD` `CDF` `CHE` `CHF` `CHW` `CLF` `CLP` `CNY` `COP` `COU` `CRC` `CUC` `CUP` `CVE` `CZK` `DJF` `DKK` `DOP` `DZD` `EGP` `ERN` `ETB` `FJD` `FKP` `GEL` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRU` `MUR` `MVR` `MWK` `MXN` `MXV` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SLE` `SLL` `SOS` `SRD` `SSP` `STN` `SVC` `SYP` `SZL` `SHP` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `USN` `UYI` `UYU` `UYW` `UZS` `VES` `VND` `VUV` `WST` `XAF` `XAG` `XAU` `XBA` `XBB` `XBC` `XBD` `XCD` `XDR` `XOF` `XPD` `XPF` `XPT` `XSU` `XTS` `XUA` `XXX` `YER` `ZAR` `ZMW` `ZWL`";
                                                            readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                                            readonly examples: readonly ["GBP"];
                                                        };
                                                        readonly min: {
                                                            readonly type: "number";
                                                            readonly description: "Minimum spend amount (inclusive)";
                                                            readonly examples: readonly [5];
                                                        };
                                                        readonly max: {
                                                            readonly type: "number";
                                                            readonly description: "Maximum spend amount (inclusive)";
                                                            readonly examples: readonly [2000];
                                                        };
                                                    };
                                                    readonly description: "Spending constraints";
                                                };
                                            };
                                        };
                                        readonly description: "Authorisation constraints";
                                    };
                                };
                                readonly description: "CardConstraints";
                            };
                            readonly design: {
                                readonly required: readonly ["cardRef", "packagingRef"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly cardRef: {
                                        readonly type: "string";
                                        readonly description: "Design reference for card";
                                    };
                                    readonly packagingRef: {
                                        readonly type: "string";
                                        readonly description: "Design reference for card packaging";
                                    };
                                };
                                readonly description: "Design references for physical card and packaging";
                            };
                            readonly printedName: {
                                readonly type: "string";
                                readonly description: "Name printed on the card. Will only be returned for physical cards. Maximum of 20 alphanumeric characters (including full stop, hyphen, apostrophe, caret and space)";
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly threeDSecureStatus: {
                                readonly type: "string";
                                readonly description: "The 3DS status of the card, based on the SMS one time password\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                                readonly deprecated: true;
                                readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                                readonly examples: readonly ["ENROLLED"];
                            };
                            readonly authentication: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly otpSmsStatus: {
                                        readonly type: "string";
                                        readonly description: "The SMS one time password authentication status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                                        readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                                        readonly examples: readonly ["ENROLLED"];
                                    };
                                    readonly knowledgeBaseStatus: {
                                        readonly type: "string";
                                        readonly description: "The knowledge based authentication (KBA) status\n\n`NOT_ENROLLED` `ENROLLED` `UNENROLLED`";
                                        readonly enum: readonly ["NOT_ENROLLED", "ENROLLED", "UNENROLLED"];
                                        readonly examples: readonly ["ENROLLED"];
                                    };
                                };
                                readonly description: "The 3DS authentication method statuses";
                            };
                            readonly shippingAddress: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly maxLength: 50;
                                        readonly minLength: 1;
                                        readonly type: "string";
                                        readonly description: "First line of address";
                                        readonly examples: readonly ["Floor 10"];
                                    };
                                    readonly addressLine2: {
                                        readonly maxLength: 50;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Second line of address";
                                        readonly examples: readonly ["80 George Street"];
                                    };
                                    readonly postTown: {
                                        readonly maxLength: 20;
                                        readonly minLength: 1;
                                        readonly type: "string";
                                        readonly description: "Post town";
                                        readonly examples: readonly ["EDINBURGH"];
                                    };
                                    readonly postCode: {
                                        readonly maxLength: 10;
                                        readonly minLength: 1;
                                        readonly type: "string";
                                        readonly description: "Postcode";
                                        readonly examples: readonly ["EH2 3BU"];
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                        readonly description: "Country (ISO 3166 alpha-2 country code)\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `AX` `AW` `BL` `CW` `GF` `GL` `GP` `ME` `MF` `MQ` `NC` `PF` `PM` `RE` `SX` `TF` `WF` `YT` `AI` `BM` `FK` `GB` `GG` `GI` `GS` `IO` `JE` `KY` `MS` `PN` `SH` `TC` `VG`";
                                        readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                        readonly examples: readonly ["GB"];
                                    };
                                };
                                readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                            };
                        };
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCollectionSchedules: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly mandateId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Mandate Id to fetch collections for.";
                };
                readonly sortField: {
                    readonly pattern: "id|createdDate|payment|status|externalReference";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort by field";
                };
                readonly sortOrder: {
                    readonly pattern: "asc|desc";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort order";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (zero-indexed)";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Size of page to fetch.";
                };
            };
            readonly required: readonly ["mandateId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["createdDate", "frequency", "id", "numberOfPayments", "status"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for direct-debit collection.";
                                readonly examples: readonly ["Q0000001"];
                            };
                            readonly frequency: {
                                readonly type: "string";
                                readonly description: "Frequency for direct-debit collection";
                                readonly examples: readonly ["MONTHLY"];
                            };
                            readonly numberOfPayments: {
                                readonly type: "integer";
                                readonly description: "Number of payments for direct-debit collection";
                                readonly format: "int32";
                                readonly examples: readonly [12];
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly firstPaymentAmount: {
                                readonly type: "number";
                                readonly description: "Amount of the first collection payment";
                                readonly examples: readonly [100];
                            };
                            readonly firstPaymentDate: {
                                readonly type: "string";
                                readonly description: "Date of the first collection payment. Format is yyyy-MM-dd.";
                                readonly examples: readonly ["2018-01-10"];
                            };
                            readonly regularPaymentAmount: {
                                readonly type: "number";
                                readonly description: "Amount of the regular collection payments";
                                readonly examples: readonly [100];
                            };
                            readonly regularPaymentStartDate: {
                                readonly type: "string";
                                readonly description: "Start date of the regular collection payment. Format is yyyy-MM-dd.";
                                readonly examples: readonly ["2018-01-10"];
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime when direct-debit collection was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the direct-debit collection. Can be one of ACTIVE, PENDING, SUBMITTED, REJECTED, CANCELLED\n\n`ACTIVE` `PENDING` `SUBMITTED` `REJECTED` `CANCELLED`";
                                readonly enum: readonly ["ACTIVE", "PENDING", "SUBMITTED", "REJECTED", "CANCELLED"];
                                readonly examples: readonly ["PROCESSING"];
                            };
                            readonly externalReference: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0-based, i.e first page = 0, second page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCollections: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account Id to fetch collections items for.";
                };
                readonly mandateId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of mandate whose the collection to fetch.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "type of collection to fetch";
                };
                readonly startDate: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Collection activities happened on or after this date";
                };
                readonly endDate: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Collection item activities happened on or before this date";
                };
            };
            readonly required: readonly ["accountId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["activityDate", "amount", "id", "mandateId", "message", "originalActivityDate", "payerName", "reconciliationDate", "reconciliationReference", "status", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for a direct-debit collection";
                                readonly examples: readonly ["K000100100"];
                            };
                            readonly mandateId: {
                                readonly type: "string";
                                readonly description: "Unique id for direct-debit mandate.";
                                readonly examples: readonly ["G0000001"];
                            };
                            readonly collectionScheduleId: {
                                readonly type: "string";
                                readonly description: "Unique id for direct-debit collection schedule for which triggered the collection";
                                readonly examples: readonly ["Q9200001"];
                            };
                            readonly activityDate: {
                                readonly type: "string";
                                readonly description: "collection or reportRaised date for indemnity???";
                                readonly examples: readonly ["2018-01-09"];
                            };
                            readonly amount: {
                                readonly type: "number";
                                readonly description: "Amount of the collection payment";
                                readonly examples: readonly [100];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of the collection activity.  Can be one of COLLECTION, INDEMNITY\n\n`COLLECTION` `INDEMNITY`";
                                readonly enum: readonly ["COLLECTION", "INDEMNITY"];
                                readonly examples: readonly ["COLLECTION"];
                            };
                            readonly payerName: {
                                readonly type: "string";
                                readonly description: "Name of the payer";
                                readonly examples: readonly ["Mr John Doe"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the collection.  Can be one of SUCCESS, FAILED, PROCESSING, SCHEDULED, REPRESENTABLE, REPRESENTED, CANCELLED\n\n`SUCCESS` `FAILED` `PROCESSING` `SCHEDULED` `REPRESENTABLE` `REPRESENTED` `CANCELLED`";
                                readonly enum: readonly ["SUCCESS", "FAILED", "PROCESSING", "SCHEDULED", "REPRESENTABLE", "REPRESENTED", "CANCELLED"];
                                readonly examples: readonly ["FAILED"];
                            };
                            readonly message: {
                                readonly type: "string";
                                readonly description: "Failure description of the payment activity";
                                readonly examples: readonly ["Instruction Cancelled"];
                            };
                            readonly originalActivityDate: {
                                readonly type: "string";
                                readonly description: "The original scheduled date for a payment to be collected";
                                readonly examples: readonly ["2018-01-09"];
                            };
                            readonly reconciliationDate: {
                                readonly type: "string";
                                readonly description: "The reconciled date for a payment to be collected";
                                readonly examples: readonly ["2018-01-09"];
                            };
                            readonly reconciliationReference: {
                                readonly type: "string";
                                readonly description: "The reconciled reference that links to a payment";
                                readonly examples: readonly ["2018-01-09"];
                            };
                        };
                        readonly description: "List of responses on the current page";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0-based, i.e first page = 0, second page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCreatePhysicalCardAsyncTasksByAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly aid: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The account ID to retrieve create physical card tasks for";
                };
            };
            readonly required: readonly ["aid"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly statuses: {
                    readonly type: "string";
                    readonly enum: readonly ["RECEIVED", "RUNNING", "COMPLETE", "ERROR"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Statuses of tasks to be retrieved";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (0 indexed)";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Size of page to fetch";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["createdDate", "status", "taskBid", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly taskBid: {
                                readonly type: "string";
                                readonly description: "ID of async task";
                                readonly examples: readonly ["T110000003"];
                            };
                            readonly resourceUrl: {
                                readonly type: "string";
                                readonly description: "Url of available resource after task completion";
                                readonly examples: readonly ["/cards/V110000022"];
                            };
                            readonly resourceId: {
                                readonly type: "string";
                                readonly description: "ID of resource after task completion. Will only be returned for COMPLETE tasks.";
                                readonly examples: readonly ["V110000022"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of async task\n\n`PHYSICAL_CARD_CREATE`";
                                readonly enum: readonly ["PHYSICAL_CARD_CREATE"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the task\n\n`RECEIVED` `RUNNING` `COMPLETE` `ERROR`";
                                readonly enum: readonly ["RECEIVED", "RUNNING", "COMPLETE", "ERROR"];
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "The creation date of the task";
                                readonly format: "date-time";
                            };
                            readonly errorReason: {
                                readonly type: "string";
                                readonly description: "The error reason. Only populated if status is ERROR";
                            };
                        };
                        readonly description: "List of responses on the current page";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCustomer: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of customer to fetch";
                };
            };
            readonly required: readonly ["customerId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly statuses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["ACTIVE", "CLOSED"];
                    };
                    readonly default: readonly ["ACTIVE"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Customer statuses allowed when fetching the customer";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["createdDate", "id", "name", "status", "type", "verificationStatus"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for a Customer. Begins with 'C'";
                    readonly examples: readonly ["C00000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Customer's company name - must be unique across the Modulr platform.";
                };
                readonly brandNames: {
                    readonly type: "array";
                    readonly description: "The customers brand name(s)";
                    readonly items: {
                        readonly required: readonly ["id", "name"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Brand Name";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The Brand Name";
                            };
                        };
                        readonly description: "BrandName";
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`";
                    readonly enum: readonly ["LLC", "PLC", "SOLETRADER", "OPARTNRSHP", "LPARTNRSHP", "LLP", "CHARITY", "INDIVIDUAL", "PCM_INDIVIDUAL", "PCM_BUSINESS", "TRUST", "PREQUALIFIED"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`";
                    readonly enum: readonly ["ACTIVE", "CLOSED"];
                };
                readonly verificationStatus: {
                    readonly type: "string";
                    readonly description: "How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                    readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                };
                readonly companyRegNumber: {
                    readonly type: "string";
                    readonly description: "The company registration / incorporation number of the company. Only applicable for companies registered with Companies House";
                };
                readonly expectedMonthlySpend: {
                    readonly type: "integer";
                    readonly description: "Indication of the monthly spend of the customer.";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly registeredAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly countrySubDivision: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address";
                };
                readonly tradingAddress: {
                    readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                    readonly type: "object";
                    readonly properties: {
                        readonly addressLine1: {
                            readonly type: "string";
                        };
                        readonly addressLine2: {
                            readonly type: "string";
                        };
                        readonly postTown: {
                            readonly type: "string";
                        };
                        readonly postCode: {
                            readonly type: "string";
                        };
                        readonly country: {
                            readonly type: "string";
                        };
                        readonly countrySubDivision: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Address";
                };
                readonly partnerId: {
                    readonly type: "string";
                    readonly description: "The owning partner identifier";
                };
                readonly associates: {
                    readonly type: "array";
                    readonly description: "Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.";
                    readonly items: {
                        readonly required: readonly ["dateOfBirth", "firstName", "id", "lastName", "type", "verificationStatus"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Associate";
                            };
                            readonly firstName: {
                                readonly type: "string";
                                readonly description: "Associate's first name(s)";
                            };
                            readonly middleName: {
                                readonly type: "string";
                                readonly description: "Associate's middle name";
                            };
                            readonly lastName: {
                                readonly type: "string";
                                readonly description: "Associate's surname";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "Associate's email address";
                            };
                            readonly phone: {
                                readonly type: "string";
                                readonly description: "Associate's phone number, in international number format";
                            };
                            readonly applicant: {
                                readonly type: "boolean";
                                readonly description: "Indicates which Associate originally applied for the Modulr account";
                            };
                            readonly ownership: {
                                readonly type: "integer";
                                readonly description: "The Associate's percentage ownership of the Customer";
                                readonly format: "int32";
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`";
                                readonly enum: readonly ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL", "PCM_INDIVIDUAL", "SIGNATORY", "TRUST_SETTLOR", "TRUST_BENEFICIARY", "TRUST_TRUSTEE", "PREQUALIFIED"];
                            };
                            readonly dateOfBirth: {
                                readonly type: "string";
                                readonly description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown";
                            };
                            readonly verificationStatus: {
                                readonly type: "string";
                                readonly description: "How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                                readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                            };
                            readonly homeAddress: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly type: "string";
                                    };
                                    readonly addressLine2: {
                                        readonly type: "string";
                                    };
                                    readonly postTown: {
                                        readonly type: "string";
                                    };
                                    readonly postCode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly countrySubDivision: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Address";
                            };
                            readonly documentInfo: {
                                readonly type: "array";
                                readonly description: "Documents gathered during Customer Due Diligence checks on an Associate.";
                                readonly items: {
                                    readonly required: readonly ["fileName", "path", "uploadedDate"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly path: {
                                            readonly type: "string";
                                        };
                                        readonly fileName: {
                                            readonly type: "string";
                                        };
                                        readonly uploadedDate: {
                                            readonly type: "string";
                                            readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                            readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                                        };
                                    };
                                    readonly description: "Document";
                                };
                            };
                            readonly additionalPersonalIdentifiers: {
                                readonly type: "array";
                                readonly description: "Additional personal identifier(s)";
                                readonly items: {
                                    readonly required: readonly ["type", "value"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of Additional Personal Identifier\n\n`BSN`";
                                            readonly enum: readonly ["BSN"];
                                        };
                                        readonly value: {
                                            readonly type: "string";
                                            readonly description: "Additional Personal Identifier value";
                                        };
                                    };
                                    readonly description: "AdditionalPersonalIdentifier";
                                };
                            };
                            readonly complianceData: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly relationship: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.";
                            };
                        };
                        readonly description: "Associate";
                    };
                };
                readonly industryCode: {
                    readonly type: "string";
                };
                readonly tcsVersion: {
                    readonly type: "integer";
                    readonly description: "Version of the Modulr Account Terms and Conditions the Customer has agreed to.";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly documentInfo: {
                    readonly type: "array";
                    readonly description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.";
                    readonly items: {
                        readonly required: readonly ["fileName", "path", "uploadedDate"];
                        readonly type: "object";
                        readonly properties: {
                            readonly path: {
                                readonly type: "string";
                            };
                            readonly fileName: {
                                readonly type: "string";
                            };
                            readonly uploadedDate: {
                                readonly type: "string";
                                readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                            };
                        };
                        readonly description: "Document";
                    };
                };
                readonly externalReference: {
                    readonly type: "string";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly delegate: {
                    readonly required: readonly ["created", "id", "name", "roleId", "status", "updated"];
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Unique reference for the Delegate.";
                            readonly examples: readonly ["D0000001"];
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name for the Delegate";
                        };
                        readonly address: {
                            readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                            readonly type: "object";
                            readonly properties: {
                                readonly addressLine1: {
                                    readonly type: "string";
                                };
                                readonly addressLine2: {
                                    readonly type: "string";
                                };
                                readonly postTown: {
                                    readonly type: "string";
                                };
                                readonly postCode: {
                                    readonly type: "string";
                                };
                                readonly country: {
                                    readonly type: "string";
                                };
                                readonly countrySubDivision: {
                                    readonly type: "string";
                                };
                            };
                            readonly description: "Address";
                        };
                        readonly roleId: {
                            readonly type: "string";
                            readonly description: "The id of the Role assigned to the delegate";
                            readonly examples: readonly ["R02002M5"];
                        };
                        readonly externalReference: {
                            readonly type: "string";
                            readonly description: "External system reference for the Delegate";
                        };
                        readonly partner: {
                            readonly type: "string";
                            readonly description: "Partner Bid.";
                            readonly examples: readonly ["R0000001"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "Status of the Delegate.";
                        };
                        readonly created: {
                            readonly type: "string";
                            readonly description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                            readonly format: "date-time";
                        };
                        readonly updated: {
                            readonly type: "string";
                            readonly description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                            readonly format: "date-time";
                        };
                    };
                    readonly description: "Delegate";
                };
                readonly legalEntity: {
                    readonly type: "string";
                    readonly description: "Legal entity of the customer\n\n`GB` `NL` `IE`";
                    readonly enum: readonly ["GB", "NL", "IE"];
                };
                readonly customerTrust: {
                    readonly type: "object";
                    readonly properties: {
                        readonly trustNature: {
                            readonly type: "string";
                            readonly enum: readonly ["BARE_TRUSTS", "INTEREST_IN_POSSESSION_TRUSTS", "DISCRETIONARY_TRUSTS", "ACCUMULATION_TRUSTS", "MIXED_TRUSTS", "SETTLOR_INTERESTED_TRUSTS", "NON_RESIDENT_TRUSTS", "OFFSHORE_TRUSTS", "FAMILY_LIVING_TRUST", "PILOT_TRUST", "VULNERABLE_BENEFICIARY_TRUST", "CHARITABLE_TRUSTS", "IRREVOCABLE_LIFE_INSURANCE_TRUST", "TESTAMENTARY_TRUSTS", "OTHER"];
                            readonly description: "`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`";
                        };
                    };
                    readonly description: "Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.";
                };
                readonly taxProfile: {
                    readonly required: readonly ["taxIdentifier"];
                    readonly type: "object";
                    readonly properties: {
                        readonly taxIdentifier: {
                            readonly type: "string";
                            readonly description: "Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                        };
                    };
                    readonly description: "Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                };
                readonly complianceData: {
                    readonly type: "object";
                    readonly properties: {
                        readonly typeDescription: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Required for customers of type PREQUALIFIED. Not allowed for all other customer types.";
                };
            };
            readonly description: "A Customer is a single legal entity that can have 1 or more accounts";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCustomerNotification: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly customerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly notificationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["customerId", "notificationId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetCustomers: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of Customer(s) to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly q: {
                    readonly type: "string";
                    readonly description: "Query parameter. ID, name or external reference of customer to search for";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type to filter, can be one of:\n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly verificationStatus: {
                    readonly type: "string";
                    readonly description: "Verification Status to filter, can be one of:\n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly description: "Customers created after and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly toCreatedDate: {
                    readonly type: "string";
                    readonly description: "Customers created before and on this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly page: {
                    readonly minimum: 0;
                    readonly type: "string";
                    readonly description: "Page to fetch (0 indexed)";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "string";
                    readonly description: "Size of Page to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sortField: {
                    readonly pattern: "(name|createdDate)";
                    readonly type: "string";
                    readonly description: "Sort by field. Sorted by createdDate if not present";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sortOrder: {
                    readonly pattern: "(asc|desc)";
                    readonly type: "string";
                    readonly description: "Sorting order:\n1. asc -> ascendant\n2. desc -> descendant";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly externalRef: {
                    readonly type: "string";
                    readonly description: "A list of external references to filter";
                    readonly deprecated: true;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "A list of external references to filter";
                    readonly examples: readonly ["externalReference[0].type"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'name.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'name.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly companyRegNumber: {
                    readonly type: "string";
                    readonly description: "Customer registration number";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly legalEntity: {
                    readonly type: "string";
                    readonly description: "Customer legal entity";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'tradingAddress.addressLines': {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'tradingAddress.postCode': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'tradingAddress.postTown': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'tradingAddress.country': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'tradingAddress.startDate': {
                    readonly type: "string";
                    readonly format: "date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'tradingAddress.endDate': {
                    readonly type: "string";
                    readonly format: "date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'registeredAddress.addressLines': {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'registeredAddress.postCode': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'registeredAddress.postTown': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'registeredAddress.country': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'registeredAddress.startDate': {
                    readonly type: "string";
                    readonly format: "date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'registeredAddress.endDate': {
                    readonly type: "string";
                    readonly format: "date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.firstNameInitial': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.lastName.type': {
                    readonly type: "string";
                    readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.lastName.value': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.lastNames': {
                    readonly type: "array";
                    readonly items: {
                        readonly required: readonly ["type", "value"];
                        readonly type: "object";
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "WORD_MATCH - using word boundaries,\nWORD_MATCH_ALPHANUMERIC - using word boundaries, but replaces non-alphanumeric characters in the search with a word boundary match,\nPREFIX - same case prefix,\nSUFFIX - same case suffix,\nCONTAINS - same case contains\nEXACT - same case exact\n";
                                readonly enum: readonly ["WORD_MATCH", "WORD_MATCH_ALPHANUMERIC", "PREFIX", "SUFFIX", "CONTAINS", "EXACT"];
                            };
                            readonly value: {
                                readonly type: "string";
                            };
                        };
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.lastNamePrefix': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.dateOfBirth': {
                    readonly type: "string";
                    readonly format: "date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.additionalIdentifier.type': {
                    readonly type: "string";
                    readonly description: "Type of additional personal identifier";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.additionalIdentifier.value': {
                    readonly type: "string";
                    readonly description: "Personal identifier value";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.homeAddress.addressLines': {
                    readonly uniqueItems: true;
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.homeAddress.postCode': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.homeAddress.postTown': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.homeAddress.country': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.homeAddress.startDate': {
                    readonly type: "string";
                    readonly format: "date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.homeAddress.endDate': {
                    readonly type: "string";
                    readonly format: "date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly 'associateSearchCriteria.associateTypes': {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly enum: readonly ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL", "PCM_INDIVIDUAL", "SIGNATORY", "TRUST_SETTLOR", "TRUST_BENEFICIARY", "TRUST_TRUSTEE", "PREQUALIFIED"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["name.type", "name.value", "associateSearchCriteria.lastName.type", "associateSearchCriteria.lastName.value", "associateSearchCriteria.additionalIdentifier.type", "associateSearchCriteria.additionalIdentifier.value"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["createdDate", "id", "name", "status", "type", "verificationStatus"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique identifier for a Customer. Begins with 'C'";
                                readonly examples: readonly ["C00000001"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Customer's company name - must be unique across the Modulr platform.";
                            };
                            readonly brandNames: {
                                readonly type: "array";
                                readonly description: "The customers brand name(s)";
                                readonly items: {
                                    readonly required: readonly ["id", "name"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Unique id for the Brand Name";
                                        };
                                        readonly name: {
                                            readonly type: "string";
                                            readonly description: "The Brand Name";
                                        };
                                    };
                                    readonly description: "BrandName";
                                };
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Type of the customer, can be one of: \n1. LLC -> limited company\n2. PLC -> publicly listed company\n3. SOLETRADER -> sole trader\n4. OPARTNRSHP -> ordinary partnership\n5. LPARTNRSHP -> limited partnership\n6. LLP -> limited liability partnership\n7. CHARITY -> charity\n8. INDIVIDUAL -> individual consumer\n9. PCM_INDIVIDUAL -> partner clearing model individual consumer\n10. PCM_BUSINESS -> partner clearing model business consumer\n\n`LLC` `PLC` `SOLETRADER` `OPARTNRSHP` `LPARTNRSHP` `LLP` `CHARITY` `INDIVIDUAL` `PCM_INDIVIDUAL` `PCM_BUSINESS` `TRUST` `PREQUALIFIED`";
                                readonly enum: readonly ["LLC", "PLC", "SOLETRADER", "OPARTNRSHP", "LPARTNRSHP", "LLP", "CHARITY", "INDIVIDUAL", "PCM_INDIVIDUAL", "PCM_BUSINESS", "TRUST", "PREQUALIFIED"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the Customer. Customers must be 'Active' for Accounts to be created for them.\n\n`ACTIVE` `CLOSED`";
                                readonly enum: readonly ["ACTIVE", "CLOSED"];
                            };
                            readonly verificationStatus: {
                                readonly type: "string";
                                readonly description: "How the identity of the Customer has been verified. Can be: \n1. UNVERIFIED -> no verification checks have been completed\n2. VERIFIED -> verification checks completed satisfactorily\n3. EXVERIFIED -> verification completed externally\n4. REFERRED -> verification is pending manual review\n5. DECLINED -> verification is complete with a negative result\n6. REVIEWED -> verification check has been reviewed\n\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                                readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                            };
                            readonly companyRegNumber: {
                                readonly type: "string";
                                readonly description: "The company registration / incorporation number of the company. Only applicable for companies registered with Companies House";
                            };
                            readonly expectedMonthlySpend: {
                                readonly type: "integer";
                                readonly description: "Indication of the monthly spend of the customer.";
                                readonly format: "int32";
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly registeredAddress: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly type: "string";
                                    };
                                    readonly addressLine2: {
                                        readonly type: "string";
                                    };
                                    readonly postTown: {
                                        readonly type: "string";
                                    };
                                    readonly postCode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly countrySubDivision: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Address";
                            };
                            readonly tradingAddress: {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly type: "string";
                                    };
                                    readonly addressLine2: {
                                        readonly type: "string";
                                    };
                                    readonly postTown: {
                                        readonly type: "string";
                                    };
                                    readonly postCode: {
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                    };
                                    readonly countrySubDivision: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Address";
                            };
                            readonly partnerId: {
                                readonly type: "string";
                                readonly description: "The owning partner identifier";
                            };
                            readonly associates: {
                                readonly type: "array";
                                readonly description: "Array of associate objects that link to the Customer. For example, this could contain the details of the company directors for a Limited company, or or the partners for a partnership.";
                                readonly items: {
                                    readonly required: readonly ["dateOfBirth", "firstName", "id", "lastName", "type", "verificationStatus"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "Unique id for the Associate";
                                        };
                                        readonly firstName: {
                                            readonly type: "string";
                                            readonly description: "Associate's first name(s)";
                                        };
                                        readonly middleName: {
                                            readonly type: "string";
                                            readonly description: "Associate's middle name";
                                        };
                                        readonly lastName: {
                                            readonly type: "string";
                                            readonly description: "Associate's surname";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "Associate's email address";
                                        };
                                        readonly phone: {
                                            readonly type: "string";
                                            readonly description: "Associate's phone number, in international number format";
                                        };
                                        readonly applicant: {
                                            readonly type: "boolean";
                                            readonly description: "Indicates which Associate originally applied for the Modulr account";
                                        };
                                        readonly ownership: {
                                            readonly type: "integer";
                                            readonly description: "The Associate's percentage ownership of the Customer";
                                            readonly format: "int32";
                                            readonly minimum: -2147483648;
                                            readonly maximum: 2147483647;
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "Describes the relation between the Associate and the Customer. Can be one of DIRECTOR, PARTNER, CSECRETARY, SOLETRADER, BENE_OWNER, C_INTEREST, INDIVIDUAL, PCM_INDIVIDUAL, SIGNATORY, TRUST_SETTLOR, TRUST_BENEFICIARY, TRUST_TRUSTEE, PREQUALIFIED\n\n`DIRECTOR` `PARTNER` `CSECRETARY` `SOLETRADER` `BENE_OWNER` `C_INTEREST` `INDIVIDUAL` `PCM_INDIVIDUAL` `SIGNATORY` `TRUST_SETTLOR` `TRUST_BENEFICIARY` `TRUST_TRUSTEE` `PREQUALIFIED`";
                                            readonly enum: readonly ["DIRECTOR", "PARTNER", "CSECRETARY", "SOLETRADER", "BENE_OWNER", "C_INTEREST", "INDIVIDUAL", "PCM_INDIVIDUAL", "SIGNATORY", "TRUST_SETTLOR", "TRUST_BENEFICIARY", "TRUST_TRUSTEE", "PREQUALIFIED"];
                                        };
                                        readonly dateOfBirth: {
                                            readonly type: "string";
                                            readonly description: "Associate's date of birth in format yyyy-MM-dd, or format yyyy-MM where day is unknown";
                                        };
                                        readonly verificationStatus: {
                                            readonly type: "string";
                                            readonly description: "How the Associate was verified. Can be one of UNVERIFIED, VERIFIED, EXVERIFIED, REFERRED, DECLINED, REVIEWED, MIGRATED\n\n`UNVERIFIED` `VERIFIED` `EXVERIFIED` `REFERRED` `DECLINED` `REVIEWED` `MIGRATED`";
                                            readonly enum: readonly ["UNVERIFIED", "VERIFIED", "EXVERIFIED", "REFERRED", "DECLINED", "REVIEWED", "MIGRATED"];
                                        };
                                        readonly homeAddress: {
                                            readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly addressLine1: {
                                                    readonly type: "string";
                                                };
                                                readonly addressLine2: {
                                                    readonly type: "string";
                                                };
                                                readonly postTown: {
                                                    readonly type: "string";
                                                };
                                                readonly postCode: {
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                };
                                                readonly countrySubDivision: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly description: "Address";
                                        };
                                        readonly documentInfo: {
                                            readonly type: "array";
                                            readonly description: "Documents gathered during Customer Due Diligence checks on an Associate.";
                                            readonly items: {
                                                readonly required: readonly ["fileName", "path", "uploadedDate"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly path: {
                                                        readonly type: "string";
                                                    };
                                                    readonly fileName: {
                                                        readonly type: "string";
                                                    };
                                                    readonly uploadedDate: {
                                                        readonly type: "string";
                                                        readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                                        readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                                                    };
                                                };
                                                readonly description: "Document";
                                            };
                                        };
                                        readonly additionalPersonalIdentifiers: {
                                            readonly type: "array";
                                            readonly description: "Additional personal identifier(s)";
                                            readonly items: {
                                                readonly required: readonly ["type", "value"];
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly type: {
                                                        readonly type: "string";
                                                        readonly description: "The type of Additional Personal Identifier\n\n`BSN`";
                                                        readonly enum: readonly ["BSN"];
                                                    };
                                                    readonly value: {
                                                        readonly type: "string";
                                                        readonly description: "Additional Personal Identifier value";
                                                    };
                                                };
                                                readonly description: "AdditionalPersonalIdentifier";
                                            };
                                        };
                                        readonly complianceData: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly relationship: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly description: "Optional for associates of type C_INTEREST and an EU customer legal entity. Mandatory for associates of type PREQUALIFIED. Not to be set for other associate types and/or for UK customer legal entity.";
                                        };
                                    };
                                    readonly description: "Associate";
                                };
                            };
                            readonly industryCode: {
                                readonly type: "string";
                            };
                            readonly tcsVersion: {
                                readonly type: "integer";
                                readonly description: "Version of the Modulr Account Terms and Conditions the Customer has agreed to.";
                                readonly format: "int32";
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly documentInfo: {
                                readonly type: "array";
                                readonly description: "Array of document objects that relate to the Customer being created. Examples of Documents could be proof of a Company Director's identity or address, Articles of Association or a Partnership Agreement.";
                                readonly items: {
                                    readonly required: readonly ["fileName", "path", "uploadedDate"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly path: {
                                            readonly type: "string";
                                        };
                                        readonly fileName: {
                                            readonly type: "string";
                                        };
                                        readonly uploadedDate: {
                                            readonly type: "string";
                                            readonly description: "Valid date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                            readonly examples: readonly ["2017-01-28T01:01:01+0000"];
                                        };
                                    };
                                    readonly description: "Document";
                                };
                            };
                            readonly externalReference: {
                                readonly type: "string";
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime when the customer was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly delegate: {
                                readonly required: readonly ["created", "id", "name", "roleId", "status", "updated"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique reference for the Delegate.";
                                        readonly examples: readonly ["D0000001"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name for the Delegate";
                                    };
                                    readonly address: {
                                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly addressLine1: {
                                                readonly type: "string";
                                            };
                                            readonly addressLine2: {
                                                readonly type: "string";
                                            };
                                            readonly postTown: {
                                                readonly type: "string";
                                            };
                                            readonly postCode: {
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly type: "string";
                                            };
                                            readonly countrySubDivision: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly description: "Address";
                                    };
                                    readonly roleId: {
                                        readonly type: "string";
                                        readonly description: "The id of the Role assigned to the delegate";
                                        readonly examples: readonly ["R02002M5"];
                                    };
                                    readonly externalReference: {
                                        readonly type: "string";
                                        readonly description: "External system reference for the Delegate";
                                    };
                                    readonly partner: {
                                        readonly type: "string";
                                        readonly description: "Partner Bid.";
                                        readonly examples: readonly ["R0000001"];
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly description: "Status of the Delegate.";
                                    };
                                    readonly created: {
                                        readonly type: "string";
                                        readonly description: "Datetime the Delegate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                        readonly format: "date-time";
                                    };
                                    readonly updated: {
                                        readonly type: "string";
                                        readonly description: "Datetime the Delegate was last updated.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                        readonly format: "date-time";
                                    };
                                };
                                readonly description: "Delegate";
                            };
                            readonly legalEntity: {
                                readonly type: "string";
                                readonly description: "Legal entity of the customer\n\n`GB` `NL` `IE`";
                                readonly enum: readonly ["GB", "NL", "IE"];
                            };
                            readonly customerTrust: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly trustNature: {
                                        readonly type: "string";
                                        readonly enum: readonly ["BARE_TRUSTS", "INTEREST_IN_POSSESSION_TRUSTS", "DISCRETIONARY_TRUSTS", "ACCUMULATION_TRUSTS", "MIXED_TRUSTS", "SETTLOR_INTERESTED_TRUSTS", "NON_RESIDENT_TRUSTS", "OFFSHORE_TRUSTS", "FAMILY_LIVING_TRUST", "PILOT_TRUST", "VULNERABLE_BENEFICIARY_TRUST", "CHARITABLE_TRUSTS", "IRREVOCABLE_LIFE_INSURANCE_TRUST", "TESTAMENTARY_TRUSTS", "OTHER"];
                                        readonly description: "`BARE_TRUSTS` `INTEREST_IN_POSSESSION_TRUSTS` `DISCRETIONARY_TRUSTS` `ACCUMULATION_TRUSTS` `MIXED_TRUSTS` `SETTLOR_INTERESTED_TRUSTS` `NON_RESIDENT_TRUSTS` `OFFSHORE_TRUSTS` `FAMILY_LIVING_TRUST` `PILOT_TRUST` `VULNERABLE_BENEFICIARY_TRUST` `CHARITABLE_TRUSTS` `IRREVOCABLE_LIFE_INSURANCE_TRUST` `TESTAMENTARY_TRUSTS` `OTHER`";
                                    };
                                };
                                readonly description: "Trust nature for customers of type trust. Mandatory for type Trust, not to be set for non-trust customers.";
                            };
                            readonly taxProfile: {
                                readonly required: readonly ["taxIdentifier"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly taxIdentifier: {
                                        readonly type: "string";
                                        readonly description: "Tax identifier for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                                    };
                                };
                                readonly description: "Tax profile for customers of type SOLETRADER. Optional for type SOLETRADER, not to be set for non-SOLETRADER customers.";
                            };
                            readonly complianceData: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly typeDescription: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Required for customers of type PREQUALIFIED. Not allowed for all other customer types.";
                            };
                        };
                        readonly description: "A Customer is a single legal entity that can have 1 or more accounts";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetFailedWebHooks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly webhookId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of Webhook ";
                };
            };
            readonly required: readonly ["webhookId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly from: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Failed since Date. Needs to be urlEncoded value";
                };
            };
            readonly required: readonly ["from"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "array";
            readonly items: {
                readonly required: readonly ["customerBid", "eventName", "lastFailedTime", "retry", "url"];
                readonly type: "object";
                readonly properties: {
                    readonly url: {
                        readonly type: "string";
                        readonly description: "Endpoint URL for receiving webhook data";
                    };
                    readonly eventName: {
                        readonly type: "string";
                        readonly description: "Event which would trigger the webhook\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                        readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                    };
                    readonly customerBid: {
                        readonly type: "string";
                        readonly description: "Unique Identifier for the customer of this webhook.";
                    };
                    readonly retry: {
                        readonly type: "boolean";
                        readonly description: "Turn webhook retry mechanism on/off";
                    };
                    readonly lastFailedTime: {
                        readonly type: "string";
                        readonly description: "Last failure time. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01+0000'";
                        readonly format: "date-time";
                    };
                    readonly data: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetLocks: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly beneficiaryId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["beneficiaryId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly minimum: 0;
                    readonly type: "string";
                    readonly description: "Page to fetch (0 indexed)";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly minimum: 1;
                    readonly type: "string";
                    readonly description: "Size of Page to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["ownerId", "ownerType"];
                        readonly type: "object";
                        readonly properties: {
                            readonly ownerId: {
                                readonly type: "string";
                                readonly description: "Reference for the entity owning the lock.";
                                readonly examples: readonly ["R00000001A"];
                            };
                            readonly ownerType: {
                                readonly type: "string";
                                readonly description: "Entity type owning the lock.\n\n`RULE` `PAYMENT`";
                                readonly enum: readonly ["RULE", "PAYMENT"];
                            };
                        };
                        readonly description: "BeneficiaryLock";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetMandates: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id(s) of Mandate(s) to fetch.";
                };
                readonly accountId: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id(s) of account to fetch Mandates for.";
                };
                readonly q: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Query parameter. ID, name or reference of mandate to search for";
                };
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Mandates created on or after this date.";
                };
                readonly toCreatedDate: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Mandates created on or before this date.";
                };
                readonly fromSubmittedDate: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Mandates submitted on or after this date.";
                };
                readonly toSubmittedDate: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Mandates submitted on or before this date.";
                };
                readonly status: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Status of the Mandate";
                };
                readonly name: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account Name on the Mandate";
                };
                readonly reference: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "reference of the Mandate";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "externalReference of the Mandate";
                };
                readonly sortField: {
                    readonly pattern: "id|createdDate|submittedDate|status|name|reference|externalReference";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort by field";
                };
                readonly sortOrder: {
                    readonly pattern: "asc|desc";
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Sort order";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (zero-indexed)";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Size of page to fetch.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["accountId", "accountNumber", "createdDate", "externalReference", "id", "nextValidCollectionDate", "reference", "sortCode", "status"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for direct-debit-mandate.";
                                readonly examples: readonly ["G0000001"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "Unique id for account for this mandate.";
                                readonly examples: readonly ["A0000001"];
                            };
                            readonly reference: {
                                readonly type: "string";
                                readonly description: "DDI reference that was used during creation.";
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "External reference that was used during creation (appears on the bank statement).";
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime when direct-debit-mandate was created.Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Status of the direct-debit-mandate. mandates must be 'ACTIVE' to make collections. Can be one of PENDING, SUBMITTED, ACTIVE, SUSPENDED, REJECTED, CANCELLED\n\n`PENDING` `SUBMITTED` `ACTIVE` `SUSPENDED` `REJECTED` `CANCELLED`";
                                readonly enum: readonly ["PENDING", "SUBMITTED", "ACTIVE", "SUSPENDED", "REJECTED", "CANCELLED"];
                                readonly examples: readonly ["ACTIVE"];
                            };
                            readonly nextValidCollectionDate: {
                                readonly type: "string";
                                readonly description: "The earliest date a collection can be created. Format is yyyy-MM-dd.";
                                readonly examples: readonly ["2018-01-10"];
                            };
                            readonly 'Name given on Mandate': {
                                readonly type: "string";
                            };
                            readonly 'Address given on Mandate': {
                                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly maxLength: 50;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                    };
                                    readonly addressLine2: {
                                        readonly maxLength: 50;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                    };
                                    readonly postTown: {
                                        readonly maxLength: 50;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                    };
                                    readonly postCode: {
                                        readonly maxLength: 8;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                        readonly enum: readonly
                                        readonly description: "`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                    };
                                };
                            };
                            readonly sortCode: {
                                readonly type: "string";
                                readonly description: "Sort Code of the account for which direct-debit-mandate has been created.";
                                readonly examples: readonly ["123456"];
                            };
                            readonly accountNumber: {
                                readonly type: "string";
                                readonly description: "Account Number for which direct-debit-mandate has been created.";
                                readonly examples: readonly ["87654321"];
                            };
                            readonly payeeAccountBid: {
                                readonly type: "string";
                                readonly description: "Unique id for individual recipient account used for internal transfers";
                                readonly examples: readonly ["A0000001"];
                            };
                        };
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0-based, i.e first page = 0, second page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPartnerNotification: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly partnerId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly notificationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly ["partnerId", "notificationId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly required: readonly ["channel", "config", "customerId", "destinations", "id", "status", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the notification.";
                };
                readonly customerId: {
                    readonly type: "string";
                    readonly description: "Unique Identifier for the customer of this notification.";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Type of notification\n\n`PAYIN` `PAYOUT` `BALANCE_LOW` `BALANCE_HIGH` `BALANCE` `DDMANDATE` `CUSTVSTAT` `ACCOUNT_STATEMENT` `PENDING_PAYMENTS` `DD_INCOMING_DEBIT` `DD_FAILED_CLAIM` `DD_FUNDS_RETURNED` `CARD_AUTH` `CARD_CREATION` `UPCOMING_CREDIT` `UPCOMING_COLLECTION_CREDIT` `UPCOMING_COLLECTION_DEBIT` `CARD_STATUS_UPDATE` `CARD_TOKEN_PROVISIONING` `PAYMENT_COMPLIANCE_STATUS` `DD_COLLECTION_STATUS` `ACCOUNT_SWITCH_UPDATE` `PAYMENT_FILE_UPLOAD` `ACCOUNT_STATUS_CHANGE`";
                    readonly enum: readonly ["PAYIN", "PAYOUT", "BALANCE_LOW", "BALANCE_HIGH", "BALANCE", "DDMANDATE", "CUSTVSTAT", "ACCOUNT_STATEMENT", "PENDING_PAYMENTS", "DD_INCOMING_DEBIT", "DD_FAILED_CLAIM", "DD_FUNDS_RETURNED", "CARD_AUTH", "CARD_CREATION", "UPCOMING_CREDIT", "UPCOMING_COLLECTION_CREDIT", "UPCOMING_COLLECTION_DEBIT", "CARD_STATUS_UPDATE", "CARD_TOKEN_PROVISIONING", "PAYMENT_COMPLIANCE_STATUS", "DD_COLLECTION_STATUS", "ACCOUNT_SWITCH_UPDATE", "PAYMENT_FILE_UPLOAD", "ACCOUNT_STATUS_CHANGE"];
                };
                readonly channel: {
                    readonly type: "string";
                    readonly description: "Channel used to send the notification.\n\n`EMAIL` `WEBHOOK`";
                    readonly enum: readonly ["EMAIL", "WEBHOOK"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of notification.\n\n`ACTIVE` `INACTIVE`";
                    readonly enum: readonly ["ACTIVE", "INACTIVE"];
                };
                readonly destinations: {
                    readonly type: "array";
                    readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "A list of emails or url(webhook) used to send the notification. For 'EMAIL' channel this can be a list of comma separated email addresses. For 'WEBHOOK' channel this will be a single URL.";
                    };
                };
                readonly config: {
                    readonly type: "object";
                    readonly properties: {
                        readonly threshold: {
                            readonly minimum: 0;
                            readonly type: "number";
                            readonly description: "Amount threshold which triggers the notification. This attribute only applies to 'EMAIL' notifications channel, of type 'PAYIN', 'PAYOUT'.";
                        };
                        readonly timesToRun: {
                            readonly type: "array";
                            readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Times of the day when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`AM` `PM`";
                                readonly enum: readonly ["AM", "PM"];
                            };
                        };
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Days of the week when to trigger the notification. This attribute applies only to 'EMAIL' notifications channel, of type 'BALANCE'.\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly retry: {
                            readonly type: "boolean";
                            readonly description: "Flag indicating whether failed webhooks should be retried. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly secret: {
                            readonly maxLength: 32;
                            readonly minLength: 32;
                            readonly type: "string";
                            readonly description: "Mandatory for webhook. Secret that is used in HMAC calculation, for webhooks. This attribute applies only to 'WEBHOOK' notifications channel.";
                        };
                        readonly hmacAlgorithm: {
                            readonly type: "string";
                            readonly description: "Signing algorithm that is used in Webhook HMAC calculation. This attribute only applies to 'WEBHOOK' notifications channel.\n\n`hmac-sha1` `hmac-sha256` `hmac-sha384` `hmac-sha512`";
                            readonly enum: readonly ["hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512"];
                        };
                    };
                    readonly description: "Configuration information for this Notification entity.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPaymentInitiation: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly paymentInitiationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment initiation ID";
                };
            };
            readonly required: readonly ["paymentInitiationId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "The identifier of the payment initiation";
                    readonly examples: readonly ["I000000001"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the payment initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL";
                    readonly examples: readonly ["AWAITING_CONSENT"];
                };
                readonly paymentAmount: {
                    readonly required: readonly ["currency", "value"];
                    readonly type: "object";
                    readonly properties: {
                        readonly currency: {
                            readonly type: "string";
                            readonly description: "Currency of the account in ISO 4217 format. Only allowable value is GBP\n\n`GBP`";
                            readonly enum: readonly ["GBP"];
                        };
                        readonly value: {
                            readonly maximum: 2147483647;
                            readonly minimum: 0.01;
                            readonly type: "number";
                            readonly description: "Amount of the payment in Major Currency Units - '1' = 1.00 GBP";
                            readonly examples: readonly [100];
                        };
                    };
                    readonly description: "The amount of the payment";
                };
                readonly paymentReference: {
                    readonly type: "string";
                    readonly description: "The payment reference";
                };
                readonly destination: {
                    readonly required: readonly ["type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`";
                            readonly enum: readonly ["ACCOUNT", "SCAN"];
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Identifier of the destination account if using ACCOUNT type";
                            readonly examples: readonly ["A1100001"];
                        };
                        readonly accountNumber: {
                            readonly pattern: "^[0-9]{8}$";
                            readonly type: "string";
                            readonly description: "Account Number of destination account if using SCAN type";
                            readonly examples: readonly ["12345678"];
                        };
                        readonly sortCode: {
                            readonly pattern: "^[0-9]{6}$";
                            readonly type: "string";
                            readonly description: "Sort Code of destination account if using SCAN type";
                            readonly examples: readonly ["000000"];
                        };
                        readonly name: {
                            readonly maxLength: 70;
                            readonly minLength: 0;
                            readonly type: "string";
                            readonly description: "Name of destination account if using SCAN type (this may be truncated)";
                            readonly examples: readonly ["Test"];
                        };
                    };
                    readonly description: "The destination account for the payment";
                };
                readonly aspspId: {
                    readonly type: "string";
                    readonly description: "The identifier of the ASPSP used for the payment";
                    readonly examples: readonly ["H100000001"];
                };
                readonly aspspPaymentStatus: {
                    readonly type: "string";
                    readonly description: "The status of the payment at the ASPSP. When available, this is passed through from the ASPSP without modification.";
                    readonly examples: readonly ["AcceptedSettlementCompleted"];
                };
            };
            readonly description: "Response object for Get Payment Initiation";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "The identifier of the payment initiation";
                    readonly examples: readonly ["I000000001"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the payment initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL";
                    readonly examples: readonly ["AWAITING_CONSENT"];
                };
                readonly paymentAmount: {
                    readonly required: readonly ["currency", "value"];
                    readonly type: "object";
                    readonly properties: {
                        readonly currency: {
                            readonly type: "string";
                            readonly description: "Currency of the account in ISO 4217 format. Only allowable value is GBP\n\n`GBP`";
                            readonly enum: readonly ["GBP"];
                        };
                        readonly value: {
                            readonly maximum: 2147483647;
                            readonly minimum: 0.01;
                            readonly type: "number";
                            readonly description: "Amount of the payment in Major Currency Units - '1' = 1.00 GBP";
                            readonly examples: readonly [100];
                        };
                    };
                    readonly description: "The amount of the payment";
                };
                readonly paymentReference: {
                    readonly type: "string";
                    readonly description: "The payment reference";
                };
                readonly destination: {
                    readonly required: readonly ["type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`";
                            readonly enum: readonly ["ACCOUNT", "SCAN"];
                        };
                        readonly id: {
                            readonly type: "string";
                            readonly description: "Identifier of the destination account if using ACCOUNT type";
                            readonly examples: readonly ["A1100001"];
                        };
                        readonly accountNumber: {
                            readonly pattern: "^[0-9]{8}$";
                            readonly type: "string";
                            readonly description: "Account Number of destination account if using SCAN type";
                            readonly examples: readonly ["12345678"];
                        };
                        readonly sortCode: {
                            readonly pattern: "^[0-9]{6}$";
                            readonly type: "string";
                            readonly description: "Sort Code of destination account if using SCAN type";
                            readonly examples: readonly ["000000"];
                        };
                        readonly name: {
                            readonly maxLength: 70;
                            readonly minLength: 0;
                            readonly type: "string";
                            readonly description: "Name of destination account if using SCAN type (this may be truncated)";
                            readonly examples: readonly ["Test"];
                        };
                    };
                    readonly description: "The destination account for the payment";
                };
                readonly aspspId: {
                    readonly type: "string";
                    readonly description: "The identifier of the ASPSP used for the payment";
                    readonly examples: readonly ["H100000001"];
                };
                readonly aspspPaymentStatus: {
                    readonly type: "string";
                    readonly description: "The status of the payment at the ASPSP. When available, this is passed through from the ASPSP without modification.";
                    readonly examples: readonly ["AcceptedSettlementCompleted"];
                };
            };
            readonly description: "Response object for Get Payment Initiation";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetPayments: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Payment ID. If specified then all other parameters are ignored";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly fromCreatedDate: {
                    readonly type: "string";
                    readonly description: "Payments created date equal or after to this date. Mandatory Parameter(except when 'id' or 'modifiedSince' parameter is used)";
                    readonly examples: readonly ["2016-01-01T01:01:01+0000"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly toCreatedDate: {
                    readonly type: "string";
                    readonly description: "Payments created date equal or before to this date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly modifiedSince: {
                    readonly type: "string";
                    readonly description: "Payments modified date equal or before to this date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sourceAccountId: {
                    readonly type: "string";
                    readonly description: "The source account ID";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly hasExternalReference: {
                    readonly type: "boolean";
                    readonly description: "True if the API should return all items that have externalReference. False the API should return all items that don't have externalReference";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly externalReference: {
                    readonly pattern: "[\\w-\\s]*";
                    readonly type: "string";
                    readonly description: "External reference can only have alphanumeric characters plus underscore, hyphen and space";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly status: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Payment status, multiple statuses can be specified by repeating the parameter";
                        readonly enum: readonly ["SUBMITTED", "SCREENING_REQ", "VALIDATED", "PENDING_FOR_DATE", "PENDING_FOR_FUNDS", "EXT_PROC", "PROCESSED", "RECONCILED", "ER_INVALID", "ER_EXTCONN", "ER_EXTSYS", "ER_EXPIRED", "ER_GENERAL", "ER_BATCH", "EXT_SENT", "UNALLOCATED", "HELD", "RETURNED", "CANCELLED", "REPROCESSING", "VOID", "CLEARING"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "The payment type to search for.";
                    readonly default: "PAYOUT";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly excludeBatchPayments: {
                    readonly type: "boolean";
                    readonly description: "Exclude payments which are part of a batch with submission type BATCH";
                    readonly default: false;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly batchPaymentId: {
                    readonly type: "string";
                    readonly description: "Filter on batch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly page: {
                    readonly minimum: 0;
                    readonly type: "string";
                    readonly description: "The page to fetch. 0 indexed";
                    readonly default: "0";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly minimum: 1;
                    readonly type: "string";
                    readonly description: "The size of the page(s)";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["details", "externalReference", "id", "status"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Payment request. 10 characters long";
                                readonly examples: readonly ["P000001ABC"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`";
                                readonly enum: readonly ["SUBMITTED", "SCREENING_REQ", "VALIDATED", "PENDING_FOR_DATE", "PENDING_FOR_FUNDS", "EXT_PROC", "PROCESSED", "RECONCILED", "ER_INVALID", "ER_EXTCONN", "ER_EXTSYS", "ER_EXPIRED", "ER_GENERAL", "ER_BATCH", "EXT_SENT", "UNALLOCATED", "HELD", "RETURNED", "CANCELLED", "REPROCESSING", "VOID", "CLEARING", "HELD_IN_SUSPENSE"];
                                readonly examples: readonly ["VALIDATED"];
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'";
                                readonly format: "date-time";
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "external reference if provided";
                                readonly examples: readonly ["aReference_00001"];
                            };
                            readonly details: {
                                readonly type: "object";
                                readonly description: "All the details of the payment from the original request";
                                readonly additionalProperties: true;
                            };
                            readonly approvalStatus: {
                                readonly type: "string";
                                readonly description: "Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`";
                                readonly enum: readonly ["NOTNEEDED", "PENDING", "APPROVED", "REJECTED", "DELETED"];
                                readonly examples: readonly ["NOTNEEDED"];
                            };
                            readonly message: {
                                readonly type: "string";
                                readonly description: "Information about payment (if available)";
                            };
                            readonly schemeInfo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                    };
                                    readonly responseCode: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Information with regards to the payment scheme";
                            };
                        };
                        readonly description: "Full details of all payments in this batch";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0-based, i.e first page = 0, second page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetRule: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account ID of the rule";
                };
                readonly rtype: {
                    readonly type: "string";
                    readonly examples: readonly ["SPLIT, SWEEP, FUNDING"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The type of Rule.";
                };
            };
            readonly required: readonly ["accountId", "rtype"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["accountId", "data", "id", "name", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for a Rule";
                    readonly examples: readonly ["R1000001"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`";
                    readonly enum: readonly ["SPLIT", "SWEEP", "FUNDING"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Rule's name";
                    readonly examples: readonly ["My new rule"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "The Account which the Rule is created on.";
                    readonly examples: readonly ["A1000001"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly frequency: {
                            readonly type: "string";
                            readonly description: "Frequency of the rule. Sweep Rule Only\n\n`Daily`";
                            readonly enum: readonly ["Daily"];
                        };
                        readonly destinationId: {
                            readonly type: "string";
                            readonly description: "Id of destination beneficiary. e.g. B1000001. Sweep Rule Only";
                        };
                        readonly balanceToLeave: {
                            readonly type: "number";
                            readonly description: "Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only";
                        };
                        readonly triggerBalance: {
                            readonly type: "number";
                            readonly description: "Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only";
                        };
                        readonly splits: {
                            readonly type: "array";
                            readonly items: {
                                readonly required: readonly ["destinationId", "percent"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly destinationId: {
                                        readonly type: "string";
                                        readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                    };
                                    readonly percent: {
                                        readonly type: "string";
                                        readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                    };
                                };
                                readonly description: "Configuration for a Split Rule";
                            };
                        };
                        readonly conditionalSplits: {
                            readonly type: "array";
                            readonly items: {
                                readonly required: readonly ["destinationId", "percent"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly destinationId: {
                                        readonly type: "string";
                                        readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                    };
                                    readonly percent: {
                                        readonly type: "string";
                                        readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                    };
                                };
                                readonly description: "Configuration for a Split Rule";
                            };
                        };
                        readonly conditionalSplitConfig: {
                            readonly required: readonly ["conditionAmount", "destinationId", "percent"];
                            readonly type: "object";
                            readonly properties: {
                                readonly destinationId: {
                                    readonly type: "string";
                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                };
                                readonly percent: {
                                    readonly type: "string";
                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                };
                                readonly conditionAmount: {
                                    readonly maximum: 2147483647;
                                    readonly minimum: 0.01;
                                    readonly type: "number";
                                    readonly description: "Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.";
                                };
                                readonly conditionDone: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the condition amount has been met. e.g. true or false";
                                };
                            };
                            readonly description: "Configuration for a Conditional Split Rule";
                        };
                        readonly sourceId: {
                            readonly type: "string";
                            readonly description: "Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only";
                        };
                    };
                    readonly description: "Configuration fields for all types of rules. To be populated where applicable based on rule type.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetRules: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account ID of the rules";
                };
            };
            readonly required: readonly ["accountId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (0 indexed)";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 20;
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Size of Page to fetch";
                };
                readonly rtype: {
                    readonly type: "string";
                    readonly examples: readonly ["SPLIT, SWEEP, FUNDING"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Filter to a specific RuleType";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["accountId", "data", "id", "name", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique identifier for a Rule";
                                readonly examples: readonly ["R1000001"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`";
                                readonly enum: readonly ["SPLIT", "SWEEP", "FUNDING"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Rule's name";
                                readonly examples: readonly ["My new rule"];
                            };
                            readonly accountId: {
                                readonly type: "string";
                                readonly description: "The Account which the Rule is created on.";
                                readonly examples: readonly ["A1000001"];
                            };
                            readonly data: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly daysToRun: {
                                        readonly type: "array";
                                        readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                            readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                                        };
                                    };
                                    readonly frequency: {
                                        readonly type: "string";
                                        readonly description: "Frequency of the rule. Sweep Rule Only\n\n`Daily`";
                                        readonly enum: readonly ["Daily"];
                                    };
                                    readonly destinationId: {
                                        readonly type: "string";
                                        readonly description: "Id of destination beneficiary. e.g. B1000001. Sweep Rule Only";
                                    };
                                    readonly balanceToLeave: {
                                        readonly type: "number";
                                        readonly description: "Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only";
                                    };
                                    readonly triggerBalance: {
                                        readonly type: "number";
                                        readonly description: "Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only";
                                    };
                                    readonly splits: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly required: readonly ["destinationId", "percent"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly destinationId: {
                                                    readonly type: "string";
                                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                                };
                                                readonly percent: {
                                                    readonly type: "string";
                                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                                };
                                            };
                                            readonly description: "Configuration for a Split Rule";
                                        };
                                    };
                                    readonly conditionalSplits: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly required: readonly ["destinationId", "percent"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly destinationId: {
                                                    readonly type: "string";
                                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                                };
                                                readonly percent: {
                                                    readonly type: "string";
                                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                                };
                                            };
                                            readonly description: "Configuration for a Split Rule";
                                        };
                                    };
                                    readonly conditionalSplitConfig: {
                                        readonly required: readonly ["conditionAmount", "destinationId", "percent"];
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly destinationId: {
                                                readonly type: "string";
                                                readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                            };
                                            readonly percent: {
                                                readonly type: "string";
                                                readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                            };
                                            readonly conditionAmount: {
                                                readonly maximum: 2147483647;
                                                readonly minimum: 0.01;
                                                readonly type: "number";
                                                readonly description: "Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.";
                                            };
                                            readonly conditionDone: {
                                                readonly type: "boolean";
                                                readonly description: "Whether the condition amount has been met. e.g. true or false";
                                            };
                                        };
                                        readonly description: "Configuration for a Conditional Split Rule";
                                    };
                                    readonly sourceId: {
                                        readonly type: "string";
                                        readonly description: "Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only";
                                    };
                                };
                                readonly description: "Configuration fields for all types of rules. To be populated where applicable based on rule type.";
                            };
                        };
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSecureCardDetails: {
    readonly response: {
        readonly '200': {
            readonly required: readonly ["cvv2", "pan"];
            readonly type: "object";
            readonly properties: {
                readonly pan: {
                    readonly type: "string";
                    readonly description: "PAN";
                    readonly examples: readonly ["4567123412341234"];
                };
                readonly cvv2: {
                    readonly type: "string";
                    readonly description: "CVV";
                    readonly examples: readonly ["123"];
                };
                readonly pin: {
                    readonly type: "string";
                    readonly description: "PIN";
                    readonly examples: readonly ["1234"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '403': {
            readonly required: readonly ["cvv2", "pan"];
            readonly type: "object";
            readonly properties: {
                readonly pan: {
                    readonly type: "string";
                    readonly description: "PAN";
                    readonly examples: readonly ["4567123412341234"];
                };
                readonly cvv2: {
                    readonly type: "string";
                    readonly description: "CVV";
                    readonly examples: readonly ["123"];
                };
                readonly pin: {
                    readonly type: "string";
                    readonly description: "PIN";
                    readonly examples: readonly ["1234"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetSrdAccounts: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly minimum: 0;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 0;
                    readonly maximum: 2147483647;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Page to fetch (0 indexed)";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly minimum: 1;
                    readonly type: "integer";
                    readonly format: "int32";
                    readonly default: 500;
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Size of Page to fetch";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["sortCode"];
                        readonly type: "object";
                        readonly properties: {
                            readonly sortCode: {
                                readonly type: "string";
                                readonly description: "The sort code of one or more accounts that requires Secondary Reference Data to be provided when making account name check requests.\n";
                                readonly examples: readonly ["123456"];
                            };
                            readonly accountNumbers: {
                                readonly type: "array";
                                readonly description: "Account numbers that require Secondary Reference Data. If empty, Secondary Reference Data is required for all name check requests for this sort code.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "The account number of a specific account that requires Secondary Reference Data to be provided when making account name check requests.";
                                    readonly examples: readonly ["11111111"];
                                };
                                readonly examples: readonly ["11111111", "22222222"];
                            };
                        };
                        readonly description: "List of responses on the current page";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '401': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '403': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '500': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '503': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetStandingOrderInitiation: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly standingOrderInitiationId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Standing order initiation ID";
                };
            };
            readonly required: readonly ["standingOrderInitiationId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "The identifier of the standing order initiation";
                    readonly examples: readonly ["I000000001"];
                };
                readonly payment: {
                    readonly required: readonly ["amount", "destination", "reference"];
                    readonly type: "object";
                    readonly properties: {
                        readonly destination: {
                            readonly required: readonly ["type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`";
                                    readonly enum: readonly ["ACCOUNT", "SCAN"];
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Identifier of the destination account if using ACCOUNT type";
                                    readonly examples: readonly ["A1100001"];
                                };
                                readonly accountNumber: {
                                    readonly pattern: "^[0-9]{8}$";
                                    readonly type: "string";
                                    readonly description: "Account Number of destination account if using SCAN type";
                                    readonly examples: readonly ["12345678"];
                                };
                                readonly sortCode: {
                                    readonly pattern: "^[0-9]{6}$";
                                    readonly type: "string";
                                    readonly description: "Sort Code of destination account if using SCAN type";
                                    readonly examples: readonly ["000000"];
                                };
                                readonly name: {
                                    readonly maxLength: 70;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                    readonly description: "Name of destination account if using SCAN type (this may be truncated)";
                                    readonly examples: readonly ["Test"];
                                };
                            };
                            readonly description: "The destination account for the payment";
                        };
                        readonly amount: {
                            readonly required: readonly ["currency", "recurringAmount"];
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly type: "string";
                                    readonly description: "Currency of the account in ISO 4217 format. Default is GBP\n\n`GBP`";
                                    readonly enum: readonly ["GBP"];
                                };
                                readonly recurringAmount: {
                                    readonly maximum: 2147483647;
                                    readonly minimum: 0.01;
                                    readonly type: "number";
                                    readonly description: "Recurring amount of the payment in Major Currency Units - '1' = 1.00 GBP";
                                    readonly examples: readonly [100];
                                };
                            };
                            readonly description: "The amount of the standing order";
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.";
                            readonly examples: readonly ["Invoice ABC123"];
                        };
                    };
                    readonly description: "The payment of the standing order";
                };
                readonly schedule: {
                    readonly required: readonly ["frequency", "initialDate"];
                    readonly type: "object";
                    readonly properties: {
                        readonly frequency: {
                            readonly type: "string";
                            readonly description: "Type of the capability, can be one of WEEKLY, MONTHLY\n\n`WEEKLY` `MONTHLY`";
                            readonly enum: readonly ["WEEKLY", "MONTHLY"];
                        };
                        readonly initialDate: {
                            readonly type: "string";
                            readonly description: "The date on which the standing order should begin. This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'";
                            readonly examples: readonly ["2021-03-25"];
                        };
                        readonly finalDate: {
                            readonly type: "string";
                            readonly description: "The optional date on which the standing order should end. If unspecified, the standing order will continue until cancelled.This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'";
                            readonly examples: readonly ["2021-03-25"];
                        };
                    };
                    readonly description: "The schedule of the standing order";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the standing order initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL";
                    readonly examples: readonly ["AWAITING_CONSENT"];
                };
                readonly aspspId: {
                    readonly type: "string";
                    readonly description: "The identifier of the ASPSP used for the standing order";
                    readonly examples: readonly ["H100000001"];
                };
                readonly standingOrderStatus: {
                    readonly type: "string";
                    readonly description: "The status of the standing order at the ASPSP. When available, this is passed through from the ASPSP without modification.";
                    readonly examples: readonly ["InitiationCompleted"];
                };
            };
            readonly description: "Response object for Get Standing Order Initiation";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "The identifier of the standing order initiation";
                    readonly examples: readonly ["I000000001"];
                };
                readonly payment: {
                    readonly required: readonly ["amount", "destination", "reference"];
                    readonly type: "object";
                    readonly properties: {
                        readonly destination: {
                            readonly required: readonly ["type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "Indicates the type of destination. Can be one of ACCOUNT, SCAN\n\n`ACCOUNT` `SCAN`";
                                    readonly enum: readonly ["ACCOUNT", "SCAN"];
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Identifier of the destination account if using ACCOUNT type";
                                    readonly examples: readonly ["A1100001"];
                                };
                                readonly accountNumber: {
                                    readonly pattern: "^[0-9]{8}$";
                                    readonly type: "string";
                                    readonly description: "Account Number of destination account if using SCAN type";
                                    readonly examples: readonly ["12345678"];
                                };
                                readonly sortCode: {
                                    readonly pattern: "^[0-9]{6}$";
                                    readonly type: "string";
                                    readonly description: "Sort Code of destination account if using SCAN type";
                                    readonly examples: readonly ["000000"];
                                };
                                readonly name: {
                                    readonly maxLength: 70;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                    readonly description: "Name of destination account if using SCAN type (this may be truncated)";
                                    readonly examples: readonly ["Test"];
                                };
                            };
                            readonly description: "The destination account for the payment";
                        };
                        readonly amount: {
                            readonly required: readonly ["currency", "recurringAmount"];
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly type: "string";
                                    readonly description: "Currency of the account in ISO 4217 format. Default is GBP\n\n`GBP`";
                                    readonly enum: readonly ["GBP"];
                                };
                                readonly recurringAmount: {
                                    readonly maximum: 2147483647;
                                    readonly minimum: 0.01;
                                    readonly type: "number";
                                    readonly description: "Recurring amount of the payment in Major Currency Units - '1' = 1.00 GBP";
                                    readonly examples: readonly [100];
                                };
                            };
                            readonly description: "The amount of the standing order";
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters. Can contain alphanumeric, '-', '.', '&', '/' and space.";
                            readonly examples: readonly ["Invoice ABC123"];
                        };
                    };
                    readonly description: "The payment of the standing order";
                };
                readonly schedule: {
                    readonly required: readonly ["frequency", "initialDate"];
                    readonly type: "object";
                    readonly properties: {
                        readonly frequency: {
                            readonly type: "string";
                            readonly description: "Type of the capability, can be one of WEEKLY, MONTHLY\n\n`WEEKLY` `MONTHLY`";
                            readonly enum: readonly ["WEEKLY", "MONTHLY"];
                        };
                        readonly initialDate: {
                            readonly type: "string";
                            readonly description: "The date on which the standing order should begin. This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'";
                            readonly examples: readonly ["2021-03-25"];
                        };
                        readonly finalDate: {
                            readonly type: "string";
                            readonly description: "The optional date on which the standing order should end. If unspecified, the standing order will continue until cancelled.This must be at least 3 days in the future from today. Date format 'yyyy-MM-dd'";
                            readonly examples: readonly ["2021-03-25"];
                        };
                    };
                    readonly description: "The schedule of the standing order";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the standing order initiation, can be one of SUBMITTED, AWAITING_CONSENT, CONSENT_REJECTED, EXECUTED, ER_EXPIRED, ER_EXTSYS, ER_GENERAL";
                    readonly examples: readonly ["AWAITING_CONSENT"];
                };
                readonly aspspId: {
                    readonly type: "string";
                    readonly description: "The identifier of the ASPSP used for the standing order";
                    readonly examples: readonly ["H100000001"];
                };
                readonly standingOrderStatus: {
                    readonly type: "string";
                    readonly description: "The status of the standing order at the ASPSP. When available, this is passed through from the ASPSP without modification.";
                    readonly examples: readonly ["InitiationCompleted"];
                };
            };
            readonly description: "Response object for Get Standing Order Initiation";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const GetTransactionsByAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of account to fetch transactions for";
                };
            };
            readonly required: readonly ["accountId"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly q: {
                    readonly type: "string";
                    readonly description: "Partial description text to search for";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly minAmount: {
                    readonly minimum: 0;
                    readonly type: "string";
                    readonly description: "Transactions with amount equal or more than this amount";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly maxAmount: {
                    readonly minimum: 0.01;
                    readonly type: "string";
                    readonly description: "Transactions with amount equal or less than this amount";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly fromPostedDate: {
                    readonly type: "string";
                    readonly description: "Transactions with posted date equal or after to this date";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly toPostedDate: {
                    readonly type: "string";
                    readonly description: "Transactions with posted date equal or before to this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly type: {
                    readonly type: "array";
                    readonly description: "Transaction types";
                    readonly items: {
                        readonly type: "string";
                        readonly description: "Transaction type";
                        readonly enum: readonly ["PI_BACS", "PI_BACS_CONTRA", "PI_FAST", "PI_CHAPS", "PI_DD", "PI_SECT", "PI_SEPA_INST", "PI_REV", "PI_FAST_REV", "PO_FAST", "PO_CHAPS", "PO_DD", "PO_SECT", "PO_SEPA_INST", "PO_REV", "INT_INTERC", "INT_INTRAC", "ADHOC", "FE_TXN", "FE_ACMNT", "FE_ACOPN", "FE_REV", "PO_MASTER", "PI_MASTER", "PO_REV_MASTER", "PO_VISA", "PI_VISA", "PI_SWIFT", "PO_SWIFT"];
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly credit: {
                    readonly type: "boolean";
                    readonly description: "If true only credit transactions will be returned, if false, only debit transactions will be returned";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly sourceId: {
                    readonly type: "string";
                    readonly description: "Transactions with this sourceId";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly size: {
                    readonly maximum: 500;
                    readonly type: "string";
                    readonly description: "Size of Page to fetch";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly fromTransactionDate: {
                    readonly type: "string";
                    readonly description: "Transactions with transaction date equal or after to this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly toTransactionDate: {
                    readonly type: "string";
                    readonly description: "Transactions with transaction date equal or before to this date. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
                readonly page: {
                    readonly type: "string";
                    readonly description: "Page to fetch (0 indexed)";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["content", "page", "size", "totalPages", "totalSize"];
            readonly type: "object";
            readonly properties: {
                readonly content: {
                    readonly type: "array";
                    readonly description: "List of responses on the current page";
                    readonly items: {
                        readonly required: readonly ["amount", "credit", "currency", "id", "postedDate", "sourceId", "transactionDate", "type"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Transaction";
                                readonly examples: readonly ["T0000001"];
                            };
                            readonly amount: {
                                readonly type: "number";
                                readonly description: "Amount of the transaction in Major Currency Units";
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "Currency of the account in ISO 4217 format";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Description of the transaction. Contains Payer/ Payee details and reference";
                            };
                            readonly transactionDate: {
                                readonly type: "string";
                                readonly description: "Datetime when the transaction took place. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly postedDate: {
                                readonly type: "string";
                                readonly description: "Datetime when the transaction was posted to the Modulr system. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                readonly format: "date-time";
                            };
                            readonly credit: {
                                readonly type: "boolean";
                                readonly description: "Indicates if the transaction was a Credit or a Debit";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "Enumerated type indicating the type of the transaction\n\n`PI_BACS` `PI_BACS_CONTRA` `PI_FAST` `PI_CHAPS` `PI_DD` `PI_SECT` `PI_SEPA_INST` `PI_REV` `PI_FAST_REV` `PO_FAST` `PO_CHAPS` `PO_DD` `PO_SECT` `PO_SEPA_INST` `PO_REV` `INT_INTERC` `INT_INTRAC` `ADHOC` `FE_TXN` `FE_ACMNT` `FE_ACOPN` `FE_REV` `PO_MASTER` `PI_MASTER` `PO_REV_MASTER` `PO_VISA` `PI_VISA` `PI_SWIFT` `PO_SWIFT`";
                                readonly enum: readonly ["PI_BACS", "PI_BACS_CONTRA", "PI_FAST", "PI_CHAPS", "PI_DD", "PI_SECT", "PI_SEPA_INST", "PI_REV", "PI_FAST_REV", "PO_FAST", "PO_CHAPS", "PO_DD", "PO_SECT", "PO_SEPA_INST", "PO_REV", "INT_INTERC", "INT_INTRAC", "ADHOC", "FE_TXN", "FE_ACMNT", "FE_ACOPN", "FE_REV", "PO_MASTER", "PI_MASTER", "PO_REV_MASTER", "PO_VISA", "PI_VISA", "PI_SWIFT", "PO_SWIFT"];
                            };
                            readonly sourceId: {
                                readonly type: "string";
                            };
                            readonly sourceExternalReference: {
                                readonly type: "string";
                            };
                            readonly additionalInfo: {
                                readonly type: "object";
                                readonly description: "any extra information available on transaction.";
                                readonly additionalProperties: true;
                            };
                            readonly account: {
                                readonly required: readonly ["availableBalance", "balance", "createdDate", "currency", "customerId", "id", "identifiers", "name", "status"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "Unique id for the account";
                                        readonly examples: readonly ["A0000001"];
                                    };
                                    readonly name: {
                                        readonly type: "string";
                                        readonly description: "Name for the account";
                                    };
                                    readonly balance: {
                                        readonly type: "string";
                                        readonly description: "Balance of the account in format 'NN.NN'";
                                        readonly examples: readonly ["10000.0"];
                                    };
                                    readonly availableBalance: {
                                        readonly type: "string";
                                        readonly description: "The current available balance of the Account. Calculated by subtracting any pending payments from the current balance";
                                        readonly examples: readonly ["10000.0"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly description: "Currency of the account in ISO 4217 format";
                                        readonly examples: readonly ["GBP"];
                                    };
                                    readonly status: {
                                        readonly type: "string";
                                        readonly description: "Status of the account. Accounts must be 'ACTIVE' to make and receive payments. Can be one of ACTIVE, BLOCKED, CLOSED, CLIENT_BLOCKED\n\n`ACTIVE` `BLOCKED` `CLOSED` `CLIENT_BLOCKED`";
                                        readonly enum: readonly ["ACTIVE", "BLOCKED", "CLOSED", "CLIENT_BLOCKED"];
                                        readonly examples: readonly ["ACTIVE"];
                                    };
                                    readonly identifiers: {
                                        readonly type: "array";
                                        readonly items: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["SCAN", "IBAN", "DD", "INTL"];
                                                    readonly description: "`SCAN` `IBAN` `DD` `INTL`";
                                                };
                                                readonly accountNumber: {
                                                    readonly type: "string";
                                                    readonly description: "Bank account Sort Code";
                                                    readonly examples: readonly ["12345678"];
                                                };
                                                readonly sortCode: {
                                                    readonly type: "string";
                                                    readonly description: "Bank account Sort Code";
                                                    readonly examples: readonly ["000000"];
                                                };
                                                readonly iban: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["GB20MODR04001401100000"];
                                                };
                                                readonly bic: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["MODRGB21"];
                                                };
                                                readonly currency: {
                                                    readonly type: "string";
                                                    readonly examples: readonly ["GBP"];
                                                };
                                                readonly countrySpecificDetails: {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly bankName: {
                                                            readonly type: "string";
                                                            readonly description: "The name of the destination bank.";
                                                            readonly examples: readonly ["Apple Bank"];
                                                        };
                                                        readonly bankAddress: {
                                                            readonly type: "string";
                                                            readonly description: "The address of the destination bank.";
                                                            readonly examples: readonly ["2100 Broadway"];
                                                        };
                                                        readonly bankCity: {
                                                            readonly type: "string";
                                                            readonly description: "The city in which the destination bank resides.";
                                                            readonly examples: readonly ["New York City"];
                                                        };
                                                        readonly bankBranchName: {
                                                            readonly type: "string";
                                                            readonly description: "The name of the destination bank's branch.";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                        readonly bankBranchCode: {
                                                            readonly type: "string";
                                                            readonly description: "The code of the destination bank's branch.";
                                                            readonly examples: readonly ["44-04"];
                                                        };
                                                        readonly bankCode: {
                                                            readonly type: "string";
                                                            readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                                        };
                                                        readonly chineseId: {
                                                            readonly type: "string";
                                                            readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                                            readonly examples: readonly ["01101201901018889"];
                                                        };
                                                        readonly province: {
                                                            readonly type: "string";
                                                            readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                                            readonly examples: readonly ["Zhejiang"];
                                                        };
                                                        readonly business: {
                                                            readonly type: "boolean";
                                                            readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                                            readonly examples: readonly [true];
                                                        };
                                                        readonly bankCodeType: {
                                                            readonly type: "string";
                                                            readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.\n\n`ABA` `CHIPS`";
                                                            readonly enum: readonly ["ABA", "CHIPS"];
                                                            readonly examples: readonly ["ABA"];
                                                        };
                                                        readonly bankCountry: {
                                                            readonly type: "string";
                                                            readonly description: "The country in which the destination bank resides.\n\n`AT` `BE` `BG` `CY` `CZ` `DK` `EE` `FI` `FR` `DE` `GR` `HR` `HU` `IS` `IE` `IT` `LV` `LI` `LT` `LU` `MT` `NL` `NO` `PL` `PT` `RO` `SK` `SI` `ES` `SE` `GB` `MQ` `YT` `GP` `GF` `RE` `MF` `GI` `GG` `IM` `JE` `MC` `CH` `AD` `SM` `VA` `AX` `PM` `BL` `AF` `AL` `DZ` `AS` `AO` `AI` `AQ` `AG` `AR` `AM` `AW` `AU` `AZ` `BS` `BH` `BD` `BB` `BY` `BZ` `BJ` `BM` `BT` `BO` `BQ` `BA` `BW` `BV` `BR` `IO` `VG` `BN` `BF` `BI` `KH` `CM` `CA` `CV` `KY` `CF` `TD` `CL` `CN` `CX` `CC` `CO` `KM` `CK` `CR` `CU` `CW` `CD` `DJ` `DM` `DO` `TL` `EC` `EG` `SV` `GQ` `ER` `SZ` `ET` `FK` `FO` `FJ` `PF` `TF` `GA` `GM` `GE` `GH` `GL` `GD` `GU` `GT` `GN` `GW` `GY` `HT` `HM` `HN` `HK` `IN` `ID` `IR` `IQ` `IL` `CI` `JM` `JP` `JO` `KZ` `KE` `KI` `XK` `KW` `KG` `LA` `LB` `LS` `LR` `LY` `MO` `MG` `MW` `MY` `MV` `ML` `MH` `MR` `MU` `MX` `FM` `MD` `MN` `ME` `MS` `MA` `MZ` `MM` `NA` `NR` `NP` `AN` `NC` `NZ` `NI` `NE` `NG` `NU` `NF` `KP` `MK` `MP` `OM` `PK` `PW` `PS` `PA` `PG` `PY` `PE` `PH` `PN` `PR` `QA` `CG` `RU` `RW` `SH` `KN` `LC` `VC` `WS` `ST` `SA` `SN` `RS` `SC` `SL` `SG` `SX` `SB` `SO` `ZA` `KR` `GS` `SS` `LK` `SD` `SR` `SY` `SJ` `TW` `TJ` `TZ` `TH` `TG` `TK` `TO` `TT` `TN` `TR` `TM` `TC` `TV` `UG` `UA` `AE` `UM` `US` `UY` `UZ` `VU` `VE` `VN` `VI` `WF` `EH` `YE` `ZM` `ZW`";
                                                            readonly enum: readonly
                                                            readonly examples: readonly ["US"];
                                                        };
                                                    };
                                                };
                                            };
                                            readonly description: "Account Identifier";
                                        };
                                    };
                                    readonly customerId: {
                                        readonly type: "string";
                                        readonly description: "Unique id of the Customer";
                                        readonly examples: readonly ["C0000001"];
                                    };
                                    readonly customerName: {
                                        readonly type: "string";
                                        readonly description: "Customer Name";
                                    };
                                    readonly externalReference: {
                                        readonly type: "string";
                                        readonly description: "Your reference for an account";
                                        readonly examples: readonly ["aReference_00001"];
                                    };
                                    readonly accessGroups: {
                                        readonly type: "array";
                                        readonly description: "Ids of Access Groups this account belongs to";
                                        readonly items: {
                                            readonly type: "string";
                                            readonly description: "Ids of Access Groups this account belongs to";
                                        };
                                    };
                                    readonly createdDate: {
                                        readonly type: "string";
                                        readonly description: "Datetime when the account was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                                        readonly format: "date-time";
                                    };
                                    readonly directDebit: {
                                        readonly type: "boolean";
                                        readonly description: "Direct Debit Enabled";
                                    };
                                    readonly securedFundingLimit: {
                                        readonly type: "string";
                                        readonly description: "Limit of funds available below a balance of zero";
                                    };
                                };
                                readonly description: "Account";
                            };
                        };
                        readonly description: "Transaction";
                    };
                };
                readonly size: {
                    readonly type: "integer";
                    readonly description: "Page size";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalSize: {
                    readonly type: "integer";
                    readonly description: "Total count";
                    readonly format: "int64";
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
                readonly page: {
                    readonly type: "integer";
                    readonly description: "Current page number, 0 based; i.e first-page = 0, second-page = 1";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalPages: {
                    readonly type: "integer";
                    readonly description: "Total pages";
                    readonly format: "int32";
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly pageStartBalance: {
                    readonly type: "number";
                    readonly description: "The sum of the transactions up to this page.\nThis is only present if there are no filters other than page and size defined";
                    readonly examples: readonly [250.3];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const MigrateMandate: {
    readonly body: {
        readonly required: readonly ["originator", "originatorReference"];
        readonly type: "object";
        readonly properties: {
            readonly bacsReference: {
                readonly type: "string";
                readonly description: "Bacs Reference";
                readonly examples: readonly ["00ABCD"];
            };
            readonly originatorReference: {
                readonly type: "string";
                readonly description: "Originator Reference";
                readonly examples: readonly ["AB1234567"];
            };
            readonly originator: {
                readonly required: readonly ["accountNumber", "name", "serviceUserNumber", "sortCode"];
                readonly type: "object";
                readonly properties: {
                    readonly sortCode: {
                        readonly pattern: "^\\d{6}$";
                        readonly type: "string";
                        readonly description: "Sort Code";
                    };
                    readonly accountNumber: {
                        readonly pattern: "^\\d{8}$";
                        readonly type: "string";
                        readonly description: "Account Number";
                        readonly examples: readonly ["01234567"];
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Originator's Name";
                        readonly examples: readonly ["Super gym"];
                    };
                    readonly serviceUserNumber: {
                        readonly pattern: "^\\d{6}$";
                        readonly type: "string";
                        readonly description: "Service User Number";
                    };
                };
                readonly description: "Originator";
            };
        };
        readonly description: "Details of the migrated Mandate";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account id for which Mandate is migrated";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["id"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Migrated Mandate Id";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "object";
            readonly properties: {
                readonly field: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                    readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                    readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                };
                readonly errorCode: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly sourceService: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ModifyRule: {
    readonly body: {
        readonly required: readonly ["accountId", "data", "name", "type"];
        readonly type: "object";
        readonly properties: {
            readonly type: {
                readonly type: "string";
                readonly description: "The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}";
                readonly enum: readonly ["SPLIT", "SWEEP", "FUNDING"];
            };
            readonly name: {
                readonly maxLength: 25;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Rule's name";
                readonly examples: readonly ["My new rule"];
            };
            readonly accountId: {
                readonly type: "string";
                readonly description: "The Account which the Rule is created on.";
                readonly examples: readonly ["A1000001"];
            };
            readonly data: {
                readonly type: "object";
                readonly properties: {
                    readonly daysToRun: {
                        readonly type: "array";
                        readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                            readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                        };
                    };
                    readonly frequency: {
                        readonly type: "string";
                        readonly description: "Frequency of the rule. Sweep Rule Only";
                        readonly enum: readonly ["Daily"];
                    };
                    readonly destinationId: {
                        readonly type: "string";
                        readonly description: "Id of destination beneficiary. e.g. B1000001. Sweep Rule Only";
                    };
                    readonly balanceToLeave: {
                        readonly type: "number";
                        readonly description: "Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only";
                    };
                    readonly triggerBalance: {
                        readonly type: "number";
                        readonly description: "Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only";
                    };
                    readonly splits: {
                        readonly type: "array";
                        readonly items: {
                            readonly required: readonly ["destinationId", "percent"];
                            readonly type: "object";
                            readonly properties: {
                                readonly destinationId: {
                                    readonly type: "string";
                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                };
                                readonly percent: {
                                    readonly type: "string";
                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                };
                            };
                            readonly description: "Configuration for a Split Rule";
                        };
                    };
                    readonly conditionalSplits: {
                        readonly type: "array";
                        readonly items: {
                            readonly required: readonly ["destinationId", "percent"];
                            readonly type: "object";
                            readonly properties: {
                                readonly destinationId: {
                                    readonly type: "string";
                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                };
                                readonly percent: {
                                    readonly type: "string";
                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                };
                            };
                            readonly description: "Configuration for a Split Rule";
                        };
                    };
                    readonly conditionalSplitConfig: {
                        readonly required: readonly ["conditionAmount", "destinationId", "percent"];
                        readonly type: "object";
                        readonly properties: {
                            readonly destinationId: {
                                readonly type: "string";
                                readonly description: "Id of destination beneficiary. e.g. B1000001.";
                            };
                            readonly percent: {
                                readonly type: "string";
                                readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                            };
                            readonly conditionAmount: {
                                readonly maximum: 2147483647;
                                readonly minimum: 0.01;
                                readonly type: "number";
                                readonly description: "Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.";
                            };
                            readonly conditionDone: {
                                readonly type: "boolean";
                                readonly description: "Whether the condition amount has been met. e.g. true or false";
                            };
                        };
                        readonly description: "Configuration for a Conditional Split Rule";
                    };
                    readonly sourceId: {
                        readonly type: "string";
                        readonly description: "Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only";
                    };
                };
                readonly description: "Configuration fields for all types of rules. To be populated where applicable based on rule type.";
            };
        };
        readonly description: "create rule request";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly ruleId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of Rule to be edited";
                };
            };
            readonly required: readonly ["ruleId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["accountId", "data", "id", "name", "type"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique identifier for a Rule";
                    readonly examples: readonly ["R1000001"];
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of Rule. Can be one of the following {SWEEP, SPLIT, FUNDING}\n\n`SPLIT` `SWEEP` `FUNDING`";
                    readonly enum: readonly ["SPLIT", "SWEEP", "FUNDING"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Rule's name";
                    readonly examples: readonly ["My new rule"];
                };
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "The Account which the Rule is created on.";
                    readonly examples: readonly ["A1000001"];
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly daysToRun: {
                            readonly type: "array";
                            readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Day(s) of the week the rule is to run. e.g. [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]. Sweep Rule Only\n\n`MONDAY` `TUESDAY` `WEDNESDAY` `THURSDAY` `FRIDAY` `SATURDAY` `SUNDAY`";
                                readonly enum: readonly ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"];
                            };
                        };
                        readonly frequency: {
                            readonly type: "string";
                            readonly description: "Frequency of the rule. Sweep Rule Only\n\n`Daily`";
                            readonly enum: readonly ["Daily"];
                        };
                        readonly destinationId: {
                            readonly type: "string";
                            readonly description: "Id of destination beneficiary. e.g. B1000001. Sweep Rule Only";
                        };
                        readonly balanceToLeave: {
                            readonly type: "number";
                            readonly description: "Balance to be left after the rule has been ran. e.g. 100.00. Sweep Rule Only";
                        };
                        readonly triggerBalance: {
                            readonly type: "number";
                            readonly description: "Minimum balance required to trigger the rule. e.g. 100.00. Sweep Rule Only";
                        };
                        readonly splits: {
                            readonly type: "array";
                            readonly items: {
                                readonly required: readonly ["destinationId", "percent"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly destinationId: {
                                        readonly type: "string";
                                        readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                    };
                                    readonly percent: {
                                        readonly type: "string";
                                        readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                    };
                                };
                                readonly description: "Configuration for a Split Rule";
                            };
                        };
                        readonly conditionalSplits: {
                            readonly type: "array";
                            readonly items: {
                                readonly required: readonly ["destinationId", "percent"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly destinationId: {
                                        readonly type: "string";
                                        readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                    };
                                    readonly percent: {
                                        readonly type: "string";
                                        readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                    };
                                };
                                readonly description: "Configuration for a Split Rule";
                            };
                        };
                        readonly conditionalSplitConfig: {
                            readonly required: readonly ["conditionAmount", "destinationId", "percent"];
                            readonly type: "object";
                            readonly properties: {
                                readonly destinationId: {
                                    readonly type: "string";
                                    readonly description: "Id of destination beneficiary. e.g. B1000001.";
                                };
                                readonly percent: {
                                    readonly type: "string";
                                    readonly description: "Percentage of payment to be moved to specified destination. e.g. 7.25.";
                                };
                                readonly conditionAmount: {
                                    readonly maximum: 2147483647;
                                    readonly minimum: 0.01;
                                    readonly type: "number";
                                    readonly description: "Amount the conditional split rule should reach before defaulting to the split rule. e.g. 100.";
                                };
                                readonly conditionDone: {
                                    readonly type: "boolean";
                                    readonly description: "Whether the condition amount has been met. e.g. true or false";
                                };
                            };
                            readonly description: "Configuration for a Conditional Split Rule";
                        };
                        readonly sourceId: {
                            readonly type: "string";
                            readonly description: "Account to fund the supplied accountId. e.g. A1000002. Funding Rule Only";
                        };
                    };
                    readonly description: "Configuration fields for all types of rules. To be populated where applicable based on rule type.";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const Proceed: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly useDuplicate: {
                readonly type: "boolean";
                readonly description: "User confirms to proceed with creating payments on a duplicate file";
            };
        };
        readonly description: "File create payments request body";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly fileId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment File ID";
                };
            };
            readonly required: readonly ["fileId"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["batchPaymentId", "fileId", "status"];
            readonly type: "object";
            readonly properties: {
                readonly fileId: {
                    readonly type: "string";
                    readonly description: "Unique id of the uploaded file";
                    readonly examples: readonly ["F1100001"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the uploaded file\n\n`SUBMITTED` `INVALID` `VALID` `DUPLICATE` `REJECTED` `ACCEPTED` `PROCESSED`";
                    readonly enum: readonly ["SUBMITTED", "INVALID", "VALID", "DUPLICATE", "REJECTED", "ACCEPTED", "PROCESSED"];
                    readonly examples: readonly ["INVALID"];
                };
                readonly fileName: {
                    readonly type: "string";
                    readonly description: "File name of the uploaded file";
                    readonly examples: readonly ["file1"];
                };
                readonly batchPaymentId: {
                    readonly type: "string";
                    readonly description: "Unique id for the Batch Payment";
                    readonly examples: readonly ["B1100001"];
                };
            };
            readonly description: "File create payments response";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReinstateMandate: {
    readonly body: {
        readonly required: readonly ["reason"];
        readonly type: "object";
        readonly properties: {
            readonly reason: {
                readonly maxLength: 300;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Reason to re-instate the mandate";
            };
        };
        readonly description: "Details of Mandate reinstatement.";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of Mandate to reinstate.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RejectCollection: {
    readonly body: {
        readonly required: readonly ["claimBId", "rejectCode"];
        readonly type: "object";
        readonly properties: {
            readonly claimBId: {
                readonly pattern: "[A-Za-z]{1}[0-9]{2}([A-Za-z0-9]){5}";
                readonly type: "string";
                readonly description: "Collection Claim Business ID";
                readonly examples: readonly ["A123456B"];
            };
            readonly rejectCode: {
                readonly type: "string";
                readonly enum: readonly ["ADVANCE_NOTICE_DISPUTED", "AMOUNT_DIFFERS", "AMOUNT_NOT_YET_DUE", "PRESENTATION_OVERDUE", "SKIP_DEBIT_ATTEMPT"];
            };
        };
        readonly description: "Collection reject request";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '400': {
            readonly type: "object";
            readonly properties: {
                readonly field: {
                    readonly type: "string";
                };
                readonly code: {
                    readonly type: "string";
                    readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                    readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                };
                readonly errorCode: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly sourceService: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RemoveRules: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly rIds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id(s) of Rules to delete";
                };
            };
            readonly required: readonly ["rIds"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '207': {
            readonly type: "object";
            readonly additionalProperties: true;
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReplaceCard: {
    readonly body: {
        readonly required: readonly ["reason"];
        readonly type: "object";
        readonly properties: {
            readonly reason: {
                readonly type: "string";
                readonly description: "The reason for replacing the card. Can be one of DAMAGED (physical only), LOST, STOLEN, RENEW";
                readonly enum: readonly ["STOLEN", "DAMAGED", "LOST", "RENEW"];
                readonly examples: readonly ["STOLEN"];
            };
            readonly externalRef: {
                readonly maxLength: 50;
                readonly minLength: 1;
                readonly pattern: "[\\w-\\s]*";
                readonly type: "string";
                readonly description: "Client reference for the newly created card. Maximum of 50 alphanumeric characters (including underscore, hyphen and space).";
            };
            readonly design: {
                readonly required: readonly ["cardRef", "packagingRef"];
                readonly type: "object";
                readonly properties: {
                    readonly cardRef: {
                        readonly type: "string";
                        readonly description: "Design reference for card";
                    };
                    readonly packagingRef: {
                        readonly type: "string";
                        readonly description: "Design reference for card packaging";
                    };
                };
                readonly description: "Design references for physical card and packaging";
            };
            readonly expiry: {
                readonly type: "string";
                readonly description: "ISO 8601 date with year & month components only. The supplied value must be in the future (cannot be the current month) and is _inclusive_ of the specified month. If no expiry is selected, the standard product expiry date will be set";
                readonly examples: readonly ["2026-12"];
            };
            readonly shippingAddress: {
                readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                readonly type: "object";
                readonly properties: {
                    readonly addressLine1: {
                        readonly maxLength: 50;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly description: "First line of address";
                        readonly examples: readonly ["Floor 10"];
                    };
                    readonly addressLine2: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                        readonly description: "Second line of address";
                        readonly examples: readonly ["80 George Street"];
                    };
                    readonly postTown: {
                        readonly maxLength: 20;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly description: "Post town";
                        readonly examples: readonly ["EDINBURGH"];
                    };
                    readonly postCode: {
                        readonly maxLength: 10;
                        readonly minLength: 1;
                        readonly type: "string";
                        readonly description: "Postcode";
                        readonly examples: readonly ["EH2 3BU"];
                    };
                    readonly country: {
                        readonly type: "string";
                        readonly description: "Country (ISO 3166 alpha-2 country code)";
                        readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                        readonly examples: readonly ["GB"];
                    };
                };
                readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
            };
        };
        readonly description: "Replacement";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["createdDate", "cvv2", "expiry", "externalRef", "id", "maxLimit", "pan"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Card identifier. Maximum of 10 alphanumeric characters.";
                };
                readonly cvv2: {
                    readonly type: "string";
                    readonly description: "Card CVV2 number.";
                };
                readonly pan: {
                    readonly type: "string";
                    readonly description: "Full card PAN.";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "The creation date of the card";
                    readonly format: "date-time";
                };
                readonly externalRef: {
                    readonly type: "string";
                    readonly description: "Client reference for the newly created card.";
                };
                readonly expiry: {
                    readonly type: "string";
                    readonly description: "An ISO 8601 date with year & month components only";
                    readonly examples: readonly ["2018-12"];
                };
                readonly maxLimit: {
                    readonly type: "string";
                    readonly description: "Maximum limit which can be set on this card and is the maximum lifetime spend the card can have";
                    readonly examples: readonly ["4000.0"];
                };
                readonly managementToken: {
                    readonly type: "string";
                    readonly description: "Card Management Token required for API users for additional security when managing sensitive card data";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ResetPin: {
    readonly body: {
        readonly required: readonly ["currentPin", "newPin"];
        readonly type: "object";
        readonly properties: {
            readonly currentPin: {
                readonly pattern: "^[0-9]{4}$";
                readonly type: "string";
                readonly description: "Card's current PIN required to reset";
            };
            readonly newPin: {
                readonly pattern: "^[0-9]{4}$";
                readonly type: "string";
                readonly description: "Card's new PIN to update";
            };
        };
        readonly description: "Reset PIN";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card to reset the PIN for";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly 'X-MOD-CARD-MGMT-TOKEN': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Card Management Token required for API users for additional security when managing sensitive card data";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrieveMandates: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Account Id";
                };
            };
            readonly required: readonly ["accountId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["accountId", "mandatesList"];
            readonly type: "object";
            readonly properties: {
                readonly accountId: {
                    readonly type: "string";
                    readonly description: "Account Id";
                };
                readonly mandatesList: {
                    readonly type: "array";
                    readonly description: "List of Mandates";
                    readonly items: {
                        readonly required: readonly ["auddisIndicator", "mandateId", "mandateReference", "mandateStatus", "merchantAccountNumber", "merchantName", "merchantNumber", "merchantSortCode", "setupDate"];
                        readonly type: "object";
                        readonly properties: {
                            readonly mandateId: {
                                readonly type: "string";
                                readonly description: "Mandate Id";
                            };
                            readonly merchantNumber: {
                                readonly type: "string";
                                readonly description: "Merchant Number";
                            };
                            readonly merchantName: {
                                readonly type: "string";
                                readonly description: "Merchant Name";
                            };
                            readonly merchantAccountNumber: {
                                readonly type: "string";
                                readonly description: "Merchant Account Number";
                            };
                            readonly merchantSortCode: {
                                readonly type: "string";
                                readonly description: "Merchant Sort Code";
                            };
                            readonly mandateStatus: {
                                readonly type: "string";
                                readonly description: "Status";
                            };
                            readonly auddisIndicator: {
                                readonly type: "string";
                                readonly description: "AUDDIS Flag (AUDDIS / Non-AUDDIS)\n\n`A` `N`";
                                readonly enum: readonly ["A", "N"];
                            };
                            readonly setupDate: {
                                readonly type: "string";
                                readonly description: "Setup date";
                            };
                            readonly mandateReference: {
                                readonly type: "string";
                                readonly description: "Mandate Reference";
                            };
                        };
                        readonly description: "List of Mandates";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const RetrievePin: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card to retrieve the PIN for";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly 'X-MOD-CARD-MGMT-TOKEN': {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Card Management Token required for API users for additional security when managing sensitive card data";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly type: "object";
            readonly properties: {
                readonly pin: {
                    readonly type: "string";
                    readonly description: "Card PIN";
                    readonly examples: readonly ["0123"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '403': {
            readonly type: "object";
            readonly properties: {
                readonly pin: {
                    readonly type: "string";
                    readonly description: "Card PIN";
                    readonly examples: readonly ["0123"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const ReverseAuthorisation: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly authId: {
                    readonly type: "string";
                    readonly examples: readonly ["A00000000X"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Card authorisation id to be reversed";
                };
            };
            readonly required: readonly ["authId"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SecureResetPin: {
    readonly body: {
        readonly required: readonly ["currentPin", "newPin"];
        readonly type: "object";
        readonly properties: {
            readonly currentPin: {
                readonly pattern: "^[0-9]{4}$";
                readonly type: "string";
                readonly description: "Card's current PIN required to reset";
            };
            readonly newPin: {
                readonly pattern: "^[0-9]{4}$";
                readonly type: "string";
                readonly description: "Card's new PIN to update";
            };
        };
        readonly description: "Reset PIN";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SendPayment: {
    readonly body: {
        readonly required: readonly ["sourceAccountId"];
        readonly type: "object";
        readonly properties: {
            readonly sourceAccountId: {
                readonly type: "string";
                readonly description: "Identifier for the sending Account.";
            };
            readonly destination: {
                readonly required: readonly ["type"];
                readonly type: "object";
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Indicates the type of destination. IBAN type is required for international payments.\n\nCan be one of BENEFICIARY, ACCOUNT, SCAN, IBAN";
                        readonly enum: readonly ["BENEFICIARY", "ACCOUNT", "SCAN", "IBAN"];
                        readonly examples: readonly ["SCAN"];
                    };
                    readonly id: {
                        readonly type: "string";
                        readonly description: "Identifier for the Payment destination if using ACCOUNT or BENEFICIARY type. Can be either: a) Beneficiary id for an external Payment, b) Account id for a transfer to another Account";
                    };
                    readonly iban: {
                        readonly pattern: "^[a-zA-Z]{2}[0-9]{2}([a-zA-Z0-9]){11,30}$";
                        readonly type: "string";
                        readonly description: "International Bank Account Number (IBAN). To be used as the destination identifier when sending ‘IBAN’ type payments";
                        readonly examples: readonly ["GB20MODR00000000000001"];
                    };
                    readonly accountNumber: {
                        readonly pattern: "^[0-9]{8}$";
                        readonly type: "string";
                        readonly description: "Account Number of destination account if using SCAN type.";
                        readonly examples: readonly ["12345678"];
                    };
                    readonly sortCode: {
                        readonly pattern: "^[0-9]{6}$";
                        readonly type: "string";
                        readonly description: "Sort Code of destination account if using SCAN type.";
                        readonly examples: readonly ["000000"];
                    };
                    readonly name: {
                        readonly maxLength: 100;
                        readonly minLength: 0;
                        readonly pattern: "^([^\\p{L}0-9]*?[\\p{L}0-9]){1,}['\\.\\-\\/&\\s]*";
                        readonly type: "string";
                        readonly description: "Name to use if a new beneficiary is created, and for using as the payee name if SCAN or IBAN types are specified for the destination";
                        readonly examples: readonly ["Test"];
                    };
                    readonly address: {
                        readonly required: readonly ["addressLine1", "postTown"];
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly maxLength: 50;
                                readonly minLength: 0;
                                readonly type: "string";
                            };
                            readonly addressLine2: {
                                readonly maxLength: 50;
                                readonly minLength: 0;
                                readonly type: "string";
                            };
                            readonly postTown: {
                                readonly maxLength: 50;
                                readonly minLength: 0;
                                readonly type: "string";
                            };
                            readonly postCode: {
                                readonly maxLength: 10;
                                readonly type: "string";
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly enum: readonly
                            };
                            readonly countrySubDivision: {
                                readonly maxLength: 35;
                                readonly minLength: 0;
                                readonly type: "string";
                            };
                        };
                        readonly description: "Optional address. Mandatory for international payments.";
                    };
                    readonly birthdate: {
                        readonly type: "string";
                        readonly description: "The destination beneficiary's date of birth. Format: yyyy-MM-dd";
                        readonly format: "date";
                        readonly examples: readonly ["2000-01-01"];
                    };
                    readonly emailAddress: {
                        readonly pattern: "[^\\s@]+@[^\\s@]+\\.[^\\s@]+";
                        readonly type: "string";
                        readonly description: "The destination beneficiary's email address";
                    };
                    readonly phoneNumber: {
                        readonly type: "string";
                        readonly description: "The destination beneficiary's phone number";
                    };
                    readonly bic: {
                        readonly type: "string";
                        readonly description: "The destination beneficiary's SWIFT BIC (Bank Identifier Code). Only to be used for international payments.";
                    };
                    readonly countrySpecificDetails: {
                        readonly type: "object";
                        readonly properties: {
                            readonly bankName: {
                                readonly type: "string";
                                readonly description: "The name of the destination bank.";
                                readonly examples: readonly ["Apple Bank"];
                            };
                            readonly bankAddress: {
                                readonly type: "string";
                                readonly description: "The address of the destination bank.";
                                readonly examples: readonly ["2100 Broadway"];
                            };
                            readonly bankCity: {
                                readonly type: "string";
                                readonly description: "The city in which the destination bank resides.";
                                readonly examples: readonly ["New York City"];
                            };
                            readonly bankBranchName: {
                                readonly type: "string";
                                readonly description: "The name of the destination bank's branch.";
                                readonly examples: readonly ["New York"];
                            };
                            readonly bankBranchCode: {
                                readonly type: "string";
                                readonly description: "The code of the destination bank's branch.";
                                readonly examples: readonly ["44-04"];
                            };
                            readonly bankCode: {
                                readonly type: "string";
                                readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                            };
                            readonly chineseId: {
                                readonly type: "string";
                                readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                readonly examples: readonly ["01101201901018889"];
                            };
                            readonly province: {
                                readonly type: "string";
                                readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                readonly examples: readonly ["Zhejiang"];
                            };
                            readonly business: {
                                readonly type: "boolean";
                                readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                readonly examples: readonly [true];
                            };
                            readonly bankCodeType: {
                                readonly type: "string";
                                readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                readonly enum: readonly ["ABA", "CHIPS"];
                                readonly examples: readonly ["ABA"];
                            };
                            readonly bankCountry: {
                                readonly type: "string";
                                readonly description: "The country in which the destination bank resides. Mandatory for international payments.";
                                readonly enum: readonly
                                readonly examples: readonly ["US"];
                            };
                        };
                        readonly description: "Further details required, depending on the destination's country";
                    };
                };
                readonly description: "Destination of the Payment";
            };
            readonly currency: {
                readonly type: "string";
                readonly description: "Currency of the account in ISO 4217 format. Default is GBP";
                readonly examples: readonly ["GBP"];
            };
            readonly amount: {
                readonly maximum: 2147483647;
                readonly minimum: 0.01;
                readonly type: "number";
                readonly description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP";
                readonly examples: readonly [100];
            };
            readonly reference: {
                readonly type: "string";
                readonly description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters that are not all the same (up to 140 characters for currencies other than GBP). Can contain alphanumeric, '-', '.', '&', '/' and space.";
                readonly examples: readonly ["Salary"];
            };
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w-\\s]*";
                readonly type: "string";
                readonly description: "Your reference for this payment";
                readonly examples: readonly ["aReference_00001"];
            };
            readonly endToEndReference: {
                readonly type: "string";
                readonly description: "Optional end to end reference. For international payments, Modulr payment ID will be used as end-to-end reference.";
                readonly examples: readonly ["aReference_00001"];
            };
            readonly regulatoryReporting: {
                readonly type: "object";
                readonly properties: {
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Regulatory Reporting Type";
                        readonly enum: readonly ["CRED", "DEBT", "BOTH"];
                        readonly examples: readonly ["CRED"];
                    };
                    readonly regulatoryAuthority: {
                        readonly type: "object";
                        readonly properties: {
                            readonly authorityName: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Authority name. Maximum of 70 characters.";
                                readonly examples: readonly ["Financial Conduct Authority"];
                            };
                            readonly authorityCountry: {
                                readonly type: "string";
                                readonly description: "ISO 3166 country code of the ultimate payers address";
                                readonly enum: readonly
                                readonly examples: readonly ["GB"];
                            };
                        };
                        readonly description: "Regulatory authority";
                    };
                    readonly structuredRegulatoryReporting: {
                        readonly type: "object";
                        readonly properties: {
                            readonly code: {
                                readonly maxLength: 3;
                                readonly minLength: 0;
                                readonly type: "string";
                            };
                            readonly amount: {
                                readonly maximum: 2147483647;
                                readonly minimum: 0.01;
                                readonly type: "number";
                                readonly description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP";
                                readonly examples: readonly [100];
                            };
                            readonly currencyCode: {
                                readonly type: "string";
                                readonly description: "Currency of the account in ISO 4217 format. Default is GBP";
                                readonly examples: readonly ["GBP"];
                            };
                            readonly information: {
                                readonly maxLength: 35;
                                readonly minLength: 0;
                                readonly type: "string";
                            };
                        };
                        readonly description: "Structured regulatory reporting";
                    };
                };
                readonly description: "Regulatory reporting";
            };
            readonly paymentDate: {
                readonly type: "string";
                readonly description: "The future date on which to make the payment. Date format 'yyyy-MM-dd'.\n\nNot applicable for international payments which will be submitted on date of submission or next working day, in line with cut-offs.";
                readonly examples: readonly ["2017-01-28"];
            };
            readonly overseasPaymentDetail: {
                readonly type: "object";
                readonly properties: {
                    readonly ultimatePayer: {
                        readonly required: readonly ["address", "name"];
                        readonly type: "object";
                        readonly properties: {
                            readonly name: {
                                readonly maxLength: 70;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Name of the ultimate payer";
                            };
                            readonly address: {
                                readonly required: readonly ["country"];
                                readonly type: "object";
                                readonly properties: {
                                    readonly addressLine1: {
                                        readonly maxLength: 70;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "First line of the ultimate payers address";
                                        readonly examples: readonly ["2nd Floor"];
                                    };
                                    readonly addressLine2: {
                                        readonly maxLength: 70;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Second line of the ultimate payers address";
                                        readonly examples: readonly ["123 High Street"];
                                    };
                                    readonly postTown: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Postal town of the ultimate payers address";
                                        readonly examples: readonly ["Edinburgh"];
                                    };
                                    readonly postCode: {
                                        readonly maxLength: 16;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Post code of the ultimate payers address";
                                        readonly examples: readonly ["AB12 3XX"];
                                    };
                                    readonly country: {
                                        readonly type: "string";
                                        readonly description: "ISO 3166 country code of the ultimate payers address";
                                        readonly examples: readonly ["GB"];
                                    };
                                };
                            };
                            readonly birthDetails: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly dateOfBirth: {
                                        readonly pattern: "^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$";
                                        readonly type: "string";
                                        readonly description: "Date of birth in ISO 8601 format of the ultimate payer";
                                        readonly examples: readonly ["1978-01-01"];
                                    };
                                    readonly cityOfBirth: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "City of birth of the ultimate payer";
                                        readonly examples: readonly ["Edinburgh"];
                                    };
                                    readonly countryOfBirth: {
                                        readonly type: "string";
                                        readonly description: "ISO 3166 country code of the ultimate payers country of birth";
                                        readonly examples: readonly ["GB"];
                                    };
                                };
                                readonly description: "Birth details of a person. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory";
                            };
                            readonly officialIdentification: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly drivingLicenceNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Driving licence number";
                                        readonly examples: readonly ["JONES849339TS8AD"];
                                    };
                                    readonly customerNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Customer number";
                                        readonly examples: readonly ["23547326547632"];
                                    };
                                    readonly socialSecurityNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Social security number or equivalent";
                                        readonly examples: readonly ["1110000000022AB"];
                                    };
                                    readonly passportNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Passport number";
                                        readonly examples: readonly ["123456789"];
                                    };
                                    readonly idCardNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "National ID card number";
                                        readonly examples: readonly ["123456789"];
                                    };
                                    readonly otherIdNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Other ID number";
                                        readonly examples: readonly ["123456789"];
                                    };
                                };
                                readonly description: "Official identification for a person. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory";
                            };
                            readonly officialIdDetailOrgs: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly bankPartyIdentification: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Bank party identification";
                                        readonly examples: readonly ["12345"];
                                    };
                                    readonly centralBankIdNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Central bank identification number";
                                        readonly examples: readonly ["678910"];
                                    };
                                    readonly clearingIdNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Clearing identification Number";
                                        readonly examples: readonly ["xx15402"];
                                    };
                                    readonly certificateOfIncorporationNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Certification of the incorporation number";
                                        readonly examples: readonly ["1100010"];
                                    };
                                    readonly countryIdCode: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Country identification code";
                                        readonly examples: readonly ["111111"];
                                    };
                                    readonly customerNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Customer number";
                                        readonly examples: readonly ["00221133"];
                                    };
                                    readonly dataUniversalNumberingSystem: {
                                        readonly pattern: "^[0-9]{9,9}?$";
                                        readonly type: "string";
                                        readonly description: "Data universal numbering system";
                                        readonly examples: readonly ["002211330"];
                                    };
                                    readonly employerIdNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Employer identification number";
                                        readonly examples: readonly ["00221133"];
                                    };
                                    readonly gs1glnIdentifier: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "GS1GLN identifier";
                                        readonly examples: readonly ["00221133"];
                                    };
                                    readonly sirenCode: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "SIREN code";
                                        readonly examples: readonly ["00221133"];
                                    };
                                    readonly siretCode: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "SIRET code";
                                        readonly examples: readonly ["00221133"];
                                    };
                                    readonly taxIdNumber: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Tax identification number";
                                        readonly examples: readonly ["00221133"];
                                    };
                                    readonly bicIdentifier: {
                                        readonly pattern: "^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$";
                                        readonly type: "string";
                                        readonly description: "BICI identification";
                                        readonly examples: readonly ["MGALODJAO7A"];
                                    };
                                    readonly ibeiIdentifier: {
                                        readonly pattern: "^[A-Z]{2,2}[B-DF-HJ-NP-TV-XZ0-9]{7,7}[0-9]{1,1}?$";
                                        readonly type: "string";
                                        readonly description: "IBEI identification";
                                        readonly examples: readonly ["HIZFTMTT59"];
                                    };
                                    readonly beiIdentifier: {
                                        readonly pattern: "^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$";
                                        readonly type: "string";
                                        readonly description: "BEI identification";
                                        readonly examples: readonly ["MHIHISVZUMH"];
                                    };
                                    readonly eanglnIdentifier: {
                                        readonly pattern: "^[0-9]{13,13}?$";
                                        readonly type: "string";
                                        readonly description: "EANGLN identification";
                                        readonly examples: readonly ["7516164953429"];
                                    };
                                    readonly chipsUniversalIdentifier: {
                                        readonly pattern: "^CH[0-9]{6,6}?$";
                                        readonly type: "string";
                                        readonly description: "CHIPS universal identification";
                                        readonly examples: readonly ["CH157373"];
                                    };
                                    readonly genericIdentification3: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Generic identification 3";
                                        readonly examples: readonly ["123456788"];
                                    };
                                    readonly genericIdentificationIssr: {
                                        readonly maxLength: 35;
                                        readonly minLength: 0;
                                        readonly type: "string";
                                        readonly description: "Generic identification issr";
                                        readonly examples: readonly ["13143225"];
                                    };
                                };
                                readonly description: "Organisation's official identification. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory";
                            };
                            readonly overseasAccountIdentifier: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly iban: {
                                        readonly pattern: "^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}$";
                                        readonly type: "string";
                                        readonly description: "International Bank Account Number (IBAN)";
                                        readonly examples: readonly ["GB20MODR00000000000001"];
                                    };
                                    readonly bban: {
                                        readonly pattern: "^[a-zA-Z0-9]{1,30}$";
                                        readonly type: "string";
                                        readonly description: "Basic Bank Account Number (BBAN)";
                                        readonly examples: readonly ["NWBK60161331926819"];
                                    };
                                    readonly upic: {
                                        readonly pattern: "^\\d{8,17}$";
                                        readonly type: "string";
                                        readonly description: "Universal Payment Identification Code (UPIC)";
                                        readonly examples: readonly ["987654321"];
                                    };
                                    readonly otherAccountNumber: {
                                        readonly pattern: "^[a-zA-Z0-9]{1,34}$";
                                        readonly type: "string";
                                        readonly description: "Other Account ID";
                                        readonly examples: readonly ["987654321"];
                                    };
                                };
                            };
                            readonly bic: {
                                readonly pattern: "^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$";
                                readonly type: "string";
                                readonly description: "Destination beneficiary's BIC/Swift Code.";
                                readonly examples: readonly ["MODRDEFF123"];
                            };
                        };
                    };
                    readonly originalPaymentDetails: {
                        readonly required: readonly ["amount", "currency", "exchangeRate"];
                        readonly type: "object";
                        readonly properties: {
                            readonly amount: {
                                readonly type: "number";
                                readonly description: "Amount of currency that the payment is in";
                                readonly examples: readonly [1000.45];
                            };
                            readonly exchangeRate: {
                                readonly type: "number";
                                readonly description: "Exchange rate";
                                readonly examples: readonly [1.45];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "ISO 4217 currency code that the amount is in";
                                readonly examples: readonly ["GBP"];
                            };
                        };
                    };
                    readonly chargeDetails: {
                        readonly required: readonly ["amount", "bearer", "currency"];
                        readonly type: "object";
                        readonly properties: {
                            readonly bearer: {
                                readonly type: "string";
                                readonly description: "Information about bearer of the charges. Its can be Creditor, Debtor or shared between both";
                                readonly enum: readonly ["CRED", "DEBT", "SHAR"];
                                readonly examples: readonly ["CRED"];
                            };
                            readonly amount: {
                                readonly type: "number";
                                readonly description: "Amount of the charges. Max allowed is 999999999999.99";
                                readonly examples: readonly [100];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "Currency of charge. Should be ISO Standard currency";
                                readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                readonly examples: readonly ["GBP"];
                            };
                        };
                    };
                    readonly additionalRemittanceInformation: {
                        readonly maxLength: 140;
                        readonly minLength: 0;
                        readonly type: "string";
                    };
                };
                readonly description: "Details relating to payment originated overseas.\n\nNot applicable for international payments - all international transactions must originate from the Modulr account creating the payment request.";
            };
            readonly fxQuoteId: {
                readonly type: "string";
                readonly description: "FX quote ID related to this payment. If supplied, neither 'amount' nor 'currency' should be supplied.";
                readonly deprecated: true;
                readonly examples: readonly ["Q0000001"];
            };
        };
        readonly description: "Details of Payment request";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly required: readonly ["details", "externalReference", "id", "status"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for the Payment request. 10 characters long";
                    readonly examples: readonly ["P000001ABC"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`";
                    readonly enum: readonly ["SUBMITTED", "SCREENING_REQ", "VALIDATED", "PENDING_FOR_DATE", "PENDING_FOR_FUNDS", "EXT_PROC", "PROCESSED", "RECONCILED", "ER_INVALID", "ER_EXTCONN", "ER_EXTSYS", "ER_EXPIRED", "ER_GENERAL", "ER_BATCH", "EXT_SENT", "UNALLOCATED", "HELD", "RETURNED", "CANCELLED", "REPROCESSING", "VOID", "CLEARING", "HELD_IN_SUSPENSE"];
                    readonly examples: readonly ["VALIDATED"];
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'";
                    readonly format: "date-time";
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "external reference if provided";
                    readonly examples: readonly ["aReference_00001"];
                };
                readonly details: {
                    readonly type: "object";
                    readonly description: "All the details of the payment from the original request";
                    readonly additionalProperties: true;
                };
                readonly approvalStatus: {
                    readonly type: "string";
                    readonly description: "Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`";
                    readonly enum: readonly ["NOTNEEDED", "PENDING", "APPROVED", "REJECTED", "DELETED"];
                    readonly examples: readonly ["NOTNEEDED"];
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Information about payment (if available)";
                };
                readonly schemeInfo: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly message: {
                            readonly type: "string";
                        };
                        readonly responseCode: {
                            readonly type: "string";
                        };
                    };
                    readonly description: "Information with regards to the payment scheme";
                };
            };
            readonly description: "Full details of all payments in this batch";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SettleAuthorisation: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly authId: {
                    readonly type: "string";
                    readonly examples: readonly ["A00000000X"];
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Card authorisation id";
                };
            };
            readonly required: readonly ["authId"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const Status: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly fileId: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Payment File ID";
                };
            };
            readonly required: readonly ["fileId"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["status"];
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the uploaded file\n\n`SUBMITTED` `INVALID` `VALID` `DUPLICATE` `REJECTED` `ACCEPTED` `PROCESSED`";
                    readonly enum: readonly ["SUBMITTED", "INVALID", "VALID", "DUPLICATE", "REJECTED", "ACCEPTED", "PROCESSED"];
                    readonly examples: readonly ["INVALID"];
                };
                readonly fileName: {
                    readonly type: "string";
                    readonly description: "File name of the uploaded file";
                    readonly examples: readonly ["file1"];
                };
                readonly numTransactions: {
                    readonly type: "integer";
                    readonly description: "Total number of transactions within file";
                    readonly format: "int32";
                    readonly examples: readonly [1000];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly totalAmount: {
                    readonly type: "number";
                    readonly description: "Sum of all transaction's amount within file";
                    readonly examples: readonly [1539.81];
                };
                readonly errors: {
                    readonly type: "array";
                    readonly description: "If invalid holds the validation errors";
                    readonly items: {
                        readonly required: readonly ["errorMessage"];
                        readonly type: "object";
                        readonly properties: {
                            readonly errorMessage: {
                                readonly type: "string";
                                readonly description: "Error message indicating a certain validation error occurred";
                                readonly examples: readonly ["Processing date is required"];
                            };
                            readonly invalidAccounts: {
                                readonly type: "array";
                                readonly description: "List of a invalid account that were effected by the validation";
                                readonly items: {
                                    readonly type: "string";
                                    readonly description: "List of a invalid account that were effected by the validation";
                                };
                            };
                        };
                        readonly description: "If invalid holds the validation errors";
                        readonly examples: readonly ["Failed parsing"];
                    };
                    readonly examples: readonly ["Failed parsing"];
                };
            };
            readonly description: "File upload Status Response";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SubmitBatchPayments: {
    readonly body: {
        readonly required: readonly ["payments"];
        readonly type: "object";
        readonly properties: {
            readonly externalReference: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w-\\s]*";
                readonly type: "string";
                readonly description: "Your reference for this Batch of payments";
                readonly examples: readonly ["aReference_00001"];
            };
            readonly strictProcessing: {
                readonly type: "boolean";
                readonly description: "Flag to control if the entire batch fails for any individual payment validation failure";
            };
            readonly submissionType: {
                readonly type: "string";
                readonly description: "BATCH restricts operations to batch level.  BULK (default) allows payment level operations such as approval";
                readonly enum: readonly ["BATCH", "BULK"];
            };
            readonly payments: {
                readonly maxItems: 2147483647;
                readonly minItems: 1;
                readonly type: "array";
                readonly description: "List of payments. Need at least 1 and maximum of 10000";
                readonly items: {
                    readonly required: readonly ["sourceAccountId"];
                    readonly type: "object";
                    readonly properties: {
                        readonly sourceAccountId: {
                            readonly type: "string";
                            readonly description: "Identifier for the sending Account.";
                        };
                        readonly destination: {
                            readonly required: readonly ["type"];
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "Indicates the type of destination. IBAN type is required for international payments.\n\nCan be one of BENEFICIARY, ACCOUNT, SCAN, IBAN";
                                    readonly enum: readonly ["BENEFICIARY", "ACCOUNT", "SCAN", "IBAN"];
                                    readonly examples: readonly ["SCAN"];
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "Identifier for the Payment destination if using ACCOUNT or BENEFICIARY type. Can be either: a) Beneficiary id for an external Payment, b) Account id for a transfer to another Account";
                                };
                                readonly iban: {
                                    readonly pattern: "^[a-zA-Z]{2}[0-9]{2}([a-zA-Z0-9]){11,30}$";
                                    readonly type: "string";
                                    readonly description: "International Bank Account Number (IBAN). To be used as the destination identifier when sending ‘IBAN’ type payments";
                                    readonly examples: readonly ["GB20MODR00000000000001"];
                                };
                                readonly accountNumber: {
                                    readonly pattern: "^[0-9]{8}$";
                                    readonly type: "string";
                                    readonly description: "Account Number of destination account if using SCAN type.";
                                    readonly examples: readonly ["12345678"];
                                };
                                readonly sortCode: {
                                    readonly pattern: "^[0-9]{6}$";
                                    readonly type: "string";
                                    readonly description: "Sort Code of destination account if using SCAN type.";
                                    readonly examples: readonly ["000000"];
                                };
                                readonly name: {
                                    readonly maxLength: 100;
                                    readonly minLength: 0;
                                    readonly pattern: "^([^\\p{L}0-9]*?[\\p{L}0-9]){1,}['\\.\\-\\/&\\s]*";
                                    readonly type: "string";
                                    readonly description: "Name to use if a new beneficiary is created, and for using as the payee name if SCAN or IBAN types are specified for the destination";
                                    readonly examples: readonly ["Test"];
                                };
                                readonly address: {
                                    readonly required: readonly ["addressLine1", "postTown"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly addressLine1: {
                                            readonly maxLength: 50;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                        };
                                        readonly addressLine2: {
                                            readonly maxLength: 50;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                        };
                                        readonly postTown: {
                                            readonly maxLength: 50;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                        };
                                        readonly postCode: {
                                            readonly maxLength: 10;
                                            readonly type: "string";
                                        };
                                        readonly country: {
                                            readonly type: "string";
                                            readonly enum: readonly
                                        };
                                        readonly countrySubDivision: {
                                            readonly maxLength: 35;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                        };
                                    };
                                    readonly description: "Optional address. Mandatory for international payments.";
                                };
                                readonly birthdate: {
                                    readonly type: "string";
                                    readonly description: "The destination beneficiary's date of birth. Format: yyyy-MM-dd";
                                    readonly format: "date";
                                    readonly examples: readonly ["2000-01-01"];
                                };
                                readonly emailAddress: {
                                    readonly pattern: "[^\\s@]+@[^\\s@]+\\.[^\\s@]+";
                                    readonly type: "string";
                                    readonly description: "The destination beneficiary's email address";
                                };
                                readonly phoneNumber: {
                                    readonly type: "string";
                                    readonly description: "The destination beneficiary's phone number";
                                };
                                readonly bic: {
                                    readonly type: "string";
                                    readonly description: "The destination beneficiary's SWIFT BIC (Bank Identifier Code). Only to be used for international payments.";
                                };
                                readonly countrySpecificDetails: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly bankName: {
                                            readonly type: "string";
                                            readonly description: "The name of the destination bank.";
                                            readonly examples: readonly ["Apple Bank"];
                                        };
                                        readonly bankAddress: {
                                            readonly type: "string";
                                            readonly description: "The address of the destination bank.";
                                            readonly examples: readonly ["2100 Broadway"];
                                        };
                                        readonly bankCity: {
                                            readonly type: "string";
                                            readonly description: "The city in which the destination bank resides.";
                                            readonly examples: readonly ["New York City"];
                                        };
                                        readonly bankBranchName: {
                                            readonly type: "string";
                                            readonly description: "The name of the destination bank's branch.";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly bankBranchCode: {
                                            readonly type: "string";
                                            readonly description: "The code of the destination bank's branch.";
                                            readonly examples: readonly ["44-04"];
                                        };
                                        readonly bankCode: {
                                            readonly type: "string";
                                            readonly description: "The code identifying the target bank on its respective national network. This is not the BIC/SWIFT code. This is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                        };
                                        readonly chineseId: {
                                            readonly type: "string";
                                            readonly description: "The 18 digit identification code of the beneficiary. Applies to Chinese beneficiaries only.";
                                            readonly examples: readonly ["01101201901018889"];
                                        };
                                        readonly province: {
                                            readonly type: "string";
                                            readonly description: "The province in which the beneficiary resides. Applies only to beneficiaries residing in China.";
                                            readonly examples: readonly ["Zhejiang"];
                                        };
                                        readonly business: {
                                            readonly type: "boolean";
                                            readonly description: "The type of the beneficiary. 'true' for businesses, 'false' otherwise.";
                                            readonly examples: readonly [true];
                                        };
                                        readonly bankCodeType: {
                                            readonly type: "string";
                                            readonly description: "The code type identifying the target bank on its respective national network.\nThis is known as the 'ABA code' in the U.S., 'ISFC' in India, 'routing number' in Canada, and so on.";
                                            readonly enum: readonly ["ABA", "CHIPS"];
                                            readonly examples: readonly ["ABA"];
                                        };
                                        readonly bankCountry: {
                                            readonly type: "string";
                                            readonly description: "The country in which the destination bank resides. Mandatory for international payments.";
                                            readonly enum: readonly
                                            readonly examples: readonly ["US"];
                                        };
                                    };
                                    readonly description: "Further details required, depending on the destination's country";
                                };
                            };
                            readonly description: "Destination of the Payment";
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly description: "Currency of the account in ISO 4217 format. Default is GBP";
                            readonly examples: readonly ["GBP"];
                        };
                        readonly amount: {
                            readonly maximum: 2147483647;
                            readonly minimum: 0.01;
                            readonly type: "number";
                            readonly description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP";
                            readonly examples: readonly [100];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly description: "Reference to be used for the Payment. This will appear on the Account statement/the recipient's bank account. Min 6 to max 18 characters that are not all the same (up to 140 characters for currencies other than GBP). Can contain alphanumeric, '-', '.', '&', '/' and space.";
                            readonly examples: readonly ["Salary"];
                        };
                        readonly externalReference: {
                            readonly maxLength: 50;
                            readonly minLength: 0;
                            readonly pattern: "[\\w-\\s]*";
                            readonly type: "string";
                            readonly description: "Your reference for this payment";
                            readonly examples: readonly ["aReference_00001"];
                        };
                        readonly endToEndReference: {
                            readonly type: "string";
                            readonly description: "Optional end to end reference. For international payments, Modulr payment ID will be used as end-to-end reference.";
                            readonly examples: readonly ["aReference_00001"];
                        };
                        readonly regulatoryReporting: {
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "Regulatory Reporting Type";
                                    readonly enum: readonly ["CRED", "DEBT", "BOTH"];
                                    readonly examples: readonly ["CRED"];
                                };
                                readonly regulatoryAuthority: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly authorityName: {
                                            readonly maxLength: 70;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                            readonly description: "Authority name. Maximum of 70 characters.";
                                            readonly examples: readonly ["Financial Conduct Authority"];
                                        };
                                        readonly authorityCountry: {
                                            readonly type: "string";
                                            readonly description: "ISO 3166 country code of the ultimate payers address";
                                            readonly enum: readonly
                                            readonly examples: readonly ["GB"];
                                        };
                                    };
                                    readonly description: "Regulatory authority";
                                };
                                readonly structuredRegulatoryReporting: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly code: {
                                            readonly maxLength: 3;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                        };
                                        readonly amount: {
                                            readonly maximum: 2147483647;
                                            readonly minimum: 0.01;
                                            readonly type: "number";
                                            readonly description: "Amount of the payment in Major Current Units - '1' = 1.00 GBP";
                                            readonly examples: readonly [100];
                                        };
                                        readonly currencyCode: {
                                            readonly type: "string";
                                            readonly description: "Currency of the account in ISO 4217 format. Default is GBP";
                                            readonly examples: readonly ["GBP"];
                                        };
                                        readonly information: {
                                            readonly maxLength: 35;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                        };
                                    };
                                    readonly description: "Structured regulatory reporting";
                                };
                            };
                            readonly description: "Regulatory reporting";
                        };
                        readonly paymentDate: {
                            readonly type: "string";
                            readonly description: "The future date on which to make the payment. Date format 'yyyy-MM-dd'.\n\nNot applicable for international payments which will be submitted on date of submission or next working day, in line with cut-offs.";
                            readonly examples: readonly ["2017-01-28"];
                        };
                        readonly overseasPaymentDetail: {
                            readonly type: "object";
                            readonly properties: {
                                readonly ultimatePayer: {
                                    readonly required: readonly ["address", "name"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly name: {
                                            readonly maxLength: 70;
                                            readonly minLength: 0;
                                            readonly type: "string";
                                            readonly description: "Name of the ultimate payer";
                                        };
                                        readonly address: {
                                            readonly required: readonly ["country"];
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly addressLine1: {
                                                    readonly maxLength: 70;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "First line of the ultimate payers address";
                                                    readonly examples: readonly ["2nd Floor"];
                                                };
                                                readonly addressLine2: {
                                                    readonly maxLength: 70;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Second line of the ultimate payers address";
                                                    readonly examples: readonly ["123 High Street"];
                                                };
                                                readonly postTown: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Postal town of the ultimate payers address";
                                                    readonly examples: readonly ["Edinburgh"];
                                                };
                                                readonly postCode: {
                                                    readonly maxLength: 16;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Post code of the ultimate payers address";
                                                    readonly examples: readonly ["AB12 3XX"];
                                                };
                                                readonly country: {
                                                    readonly type: "string";
                                                    readonly description: "ISO 3166 country code of the ultimate payers address";
                                                    readonly examples: readonly ["GB"];
                                                };
                                            };
                                        };
                                        readonly birthDetails: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly dateOfBirth: {
                                                    readonly pattern: "^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$";
                                                    readonly type: "string";
                                                    readonly description: "Date of birth in ISO 8601 format of the ultimate payer";
                                                    readonly examples: readonly ["1978-01-01"];
                                                };
                                                readonly cityOfBirth: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "City of birth of the ultimate payer";
                                                    readonly examples: readonly ["Edinburgh"];
                                                };
                                                readonly countryOfBirth: {
                                                    readonly type: "string";
                                                    readonly description: "ISO 3166 country code of the ultimate payers country of birth";
                                                    readonly examples: readonly ["GB"];
                                                };
                                            };
                                            readonly description: "Birth details of a person. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory";
                                        };
                                        readonly officialIdentification: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly drivingLicenceNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Driving licence number";
                                                    readonly examples: readonly ["JONES849339TS8AD"];
                                                };
                                                readonly customerNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Customer number";
                                                    readonly examples: readonly ["23547326547632"];
                                                };
                                                readonly socialSecurityNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Social security number or equivalent";
                                                    readonly examples: readonly ["1110000000022AB"];
                                                };
                                                readonly passportNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Passport number";
                                                    readonly examples: readonly ["123456789"];
                                                };
                                                readonly idCardNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "National ID card number";
                                                    readonly examples: readonly ["123456789"];
                                                };
                                                readonly otherIdNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Other ID number";
                                                    readonly examples: readonly ["123456789"];
                                                };
                                            };
                                            readonly description: "Official identification for a person. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory";
                                        };
                                        readonly officialIdDetailOrgs: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly bankPartyIdentification: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Bank party identification";
                                                    readonly examples: readonly ["12345"];
                                                };
                                                readonly centralBankIdNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Central bank identification number";
                                                    readonly examples: readonly ["678910"];
                                                };
                                                readonly clearingIdNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Clearing identification Number";
                                                    readonly examples: readonly ["xx15402"];
                                                };
                                                readonly certificateOfIncorporationNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Certification of the incorporation number";
                                                    readonly examples: readonly ["1100010"];
                                                };
                                                readonly countryIdCode: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Country identification code";
                                                    readonly examples: readonly ["111111"];
                                                };
                                                readonly customerNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Customer number";
                                                    readonly examples: readonly ["00221133"];
                                                };
                                                readonly dataUniversalNumberingSystem: {
                                                    readonly pattern: "^[0-9]{9,9}?$";
                                                    readonly type: "string";
                                                    readonly description: "Data universal numbering system";
                                                    readonly examples: readonly ["002211330"];
                                                };
                                                readonly employerIdNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Employer identification number";
                                                    readonly examples: readonly ["00221133"];
                                                };
                                                readonly gs1glnIdentifier: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "GS1GLN identifier";
                                                    readonly examples: readonly ["00221133"];
                                                };
                                                readonly sirenCode: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "SIREN code";
                                                    readonly examples: readonly ["00221133"];
                                                };
                                                readonly siretCode: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "SIRET code";
                                                    readonly examples: readonly ["00221133"];
                                                };
                                                readonly taxIdNumber: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Tax identification number";
                                                    readonly examples: readonly ["00221133"];
                                                };
                                                readonly bicIdentifier: {
                                                    readonly pattern: "^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$";
                                                    readonly type: "string";
                                                    readonly description: "BICI identification";
                                                    readonly examples: readonly ["MGALODJAO7A"];
                                                };
                                                readonly ibeiIdentifier: {
                                                    readonly pattern: "^[A-Z]{2,2}[B-DF-HJ-NP-TV-XZ0-9]{7,7}[0-9]{1,1}?$";
                                                    readonly type: "string";
                                                    readonly description: "IBEI identification";
                                                    readonly examples: readonly ["HIZFTMTT59"];
                                                };
                                                readonly beiIdentifier: {
                                                    readonly pattern: "^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}?$";
                                                    readonly type: "string";
                                                    readonly description: "BEI identification";
                                                    readonly examples: readonly ["MHIHISVZUMH"];
                                                };
                                                readonly eanglnIdentifier: {
                                                    readonly pattern: "^[0-9]{13,13}?$";
                                                    readonly type: "string";
                                                    readonly description: "EANGLN identification";
                                                    readonly examples: readonly ["7516164953429"];
                                                };
                                                readonly chipsUniversalIdentifier: {
                                                    readonly pattern: "^CH[0-9]{6,6}?$";
                                                    readonly type: "string";
                                                    readonly description: "CHIPS universal identification";
                                                    readonly examples: readonly ["CH157373"];
                                                };
                                                readonly genericIdentification3: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Generic identification 3";
                                                    readonly examples: readonly ["123456788"];
                                                };
                                                readonly genericIdentificationIssr: {
                                                    readonly maxLength: 35;
                                                    readonly minLength: 0;
                                                    readonly type: "string";
                                                    readonly description: "Generic identification issr";
                                                    readonly examples: readonly ["13143225"];
                                                };
                                            };
                                            readonly description: "Organisation's official identification. Official identification details. Property 'birthDetails' and/or 'officialIdentification' Or 'officialIdDetailOrgs' is mandatory";
                                        };
                                        readonly overseasAccountIdentifier: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly iban: {
                                                    readonly pattern: "^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{1,30}$";
                                                    readonly type: "string";
                                                    readonly description: "International Bank Account Number (IBAN)";
                                                    readonly examples: readonly ["GB20MODR00000000000001"];
                                                };
                                                readonly bban: {
                                                    readonly pattern: "^[a-zA-Z0-9]{1,30}$";
                                                    readonly type: "string";
                                                    readonly description: "Basic Bank Account Number (BBAN)";
                                                    readonly examples: readonly ["NWBK60161331926819"];
                                                };
                                                readonly upic: {
                                                    readonly pattern: "^\\d{8,17}$";
                                                    readonly type: "string";
                                                    readonly description: "Universal Payment Identification Code (UPIC)";
                                                    readonly examples: readonly ["987654321"];
                                                };
                                                readonly otherAccountNumber: {
                                                    readonly pattern: "^[a-zA-Z0-9]{1,34}$";
                                                    readonly type: "string";
                                                    readonly description: "Other Account ID";
                                                    readonly examples: readonly ["987654321"];
                                                };
                                            };
                                        };
                                        readonly bic: {
                                            readonly pattern: "^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$";
                                            readonly type: "string";
                                            readonly description: "Destination beneficiary's BIC/Swift Code.";
                                            readonly examples: readonly ["MODRDEFF123"];
                                        };
                                    };
                                };
                                readonly originalPaymentDetails: {
                                    readonly required: readonly ["amount", "currency", "exchangeRate"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly amount: {
                                            readonly type: "number";
                                            readonly description: "Amount of currency that the payment is in";
                                            readonly examples: readonly [1000.45];
                                        };
                                        readonly exchangeRate: {
                                            readonly type: "number";
                                            readonly description: "Exchange rate";
                                            readonly examples: readonly [1.45];
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly description: "ISO 4217 currency code that the amount is in";
                                            readonly examples: readonly ["GBP"];
                                        };
                                    };
                                };
                                readonly chargeDetails: {
                                    readonly required: readonly ["amount", "bearer", "currency"];
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly bearer: {
                                            readonly type: "string";
                                            readonly description: "Information about bearer of the charges. Its can be Creditor, Debtor or shared between both";
                                            readonly enum: readonly ["CRED", "DEBT", "SHAR"];
                                            readonly examples: readonly ["CRED"];
                                        };
                                        readonly amount: {
                                            readonly type: "number";
                                            readonly description: "Amount of the charges. Max allowed is 999999999999.99";
                                            readonly examples: readonly [100];
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly description: "Currency of charge. Should be ISO Standard currency";
                                            readonly enum: readonly ["GBP", "EUR", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "SHP", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"];
                                            readonly examples: readonly ["GBP"];
                                        };
                                    };
                                };
                                readonly additionalRemittanceInformation: {
                                    readonly maxLength: 140;
                                    readonly minLength: 0;
                                    readonly type: "string";
                                };
                            };
                            readonly description: "Details relating to payment originated overseas.\n\nNot applicable for international payments - all international transactions must originate from the Modulr account creating the payment request.";
                        };
                        readonly fxQuoteId: {
                            readonly type: "string";
                            readonly description: "FX quote ID related to this payment. If supplied, neither 'amount' nor 'currency' should be supplied.";
                            readonly deprecated: true;
                            readonly examples: readonly ["Q0000001"];
                        };
                    };
                    readonly description: "Details of Payment request";
                };
            };
        };
        readonly description: "Details of Batch request";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique id for the Batch Payment. 10 characters long";
                    readonly examples: readonly ["D920000001"];
                };
                readonly externalReference: {
                    readonly type: "string";
                    readonly description: "External reference, if provided";
                    readonly examples: readonly ["aReference_00001"];
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Current status of batch.\n\n`ACCEPTED` `REJECTED` `SUBMITTED` `CANCELLED`";
                    readonly enum: readonly ["ACCEPTED", "REJECTED", "SUBMITTED", "CANCELLED"];
                    readonly examples: readonly ["ACCEPTED"];
                };
                readonly totalPayments: {
                    readonly type: "integer";
                    readonly description: "Total count of payments in this batch";
                    readonly format: "int32";
                    readonly examples: readonly [9123];
                    readonly minimum: -2147483648;
                    readonly maximum: 2147483647;
                };
                readonly currentUserCanApprove: {
                    readonly type: "boolean";
                    readonly description: "Whether the user is allowed to approve this batch, based on their approval limits, and applicable configuration";
                    readonly examples: readonly [true];
                };
                readonly paymentDetails: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "object";
                        readonly properties: {
                            readonly totalPaymentCount: {
                                readonly type: "integer";
                                readonly description: "Total count of payments";
                                readonly format: "int32";
                                readonly examples: readonly [10];
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly totalAmount: {
                                readonly type: "number";
                                readonly description: "Sum total of payment amounts";
                                readonly examples: readonly [100];
                            };
                            readonly pendingApprovalCount: {
                                readonly type: "integer";
                                readonly description: "Count of payments currently pending approval";
                                readonly format: "int32";
                                readonly examples: readonly [5];
                                readonly minimum: -2147483648;
                                readonly maximum: 2147483647;
                            };
                            readonly pendingApprovalAmount: {
                                readonly type: "number";
                                readonly description: "Sum total of payment amounts currently pending approval";
                                readonly examples: readonly [50];
                            };
                        };
                        readonly description: "Summary of payments and approvals";
                    };
                    readonly description: "Summary of payments and approvals, per currency (as a 3-alpha currency code)";
                };
                readonly approvals: {
                    readonly type: "array";
                    readonly description: "List of batch-level approvals";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly approvedBy: {
                                readonly type: "string";
                                readonly description: "ID of user who approved this batch payment request";
                                readonly examples: readonly ["U2100021"];
                            };
                            readonly approvedOn: {
                                readonly type: "string";
                                readonly description: "Date this approval was applied";
                                readonly format: "date";
                                readonly examples: readonly ["2022-06-25"];
                            };
                        };
                        readonly description: "A single approval against a batch payment request";
                    };
                };
                readonly currentUserCanCancel: {
                    readonly type: "boolean";
                    readonly description: "Whether the user is allowed and currently able to cancel at least one of the payments in this batch";
                };
                readonly createdDate: {
                    readonly type: "string";
                    readonly description: "Datetime when the batch payment was created. Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000";
                    readonly format: "date-time";
                };
                readonly processingDateFrom: {
                    readonly type: "string";
                    readonly description: "Earliest processing date in the batch file or the batch creation date if the file does not have any dates. Date format 'yyyy-MM-dd'";
                    readonly format: "date";
                    readonly examples: readonly ["2017-01-28"];
                };
                readonly processingDateTo: {
                    readonly type: "string";
                    readonly description: "Last processing date in the batch file or empty if the file does not have any dates. Date format 'Format is 'yyyy-MM-dd'T'HH:mm:ssZ' where Z is UTC offset. e.g 2017-01-28T01:01:01+0000'";
                    readonly format: "date";
                    readonly examples: readonly ["2017-01-28"];
                };
                readonly paymentResponses: {
                    readonly type: "array";
                    readonly description: "Full details of all payments in this batch";
                    readonly deprecated: true;
                    readonly items: {
                        readonly required: readonly ["details", "externalReference", "id", "status"];
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "Unique id for the Payment request. 10 characters long";
                                readonly examples: readonly ["P000001ABC"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Current status of payment. Can be one of [SUBMITTED, SCREENING_REQ, VALIDATED, PENDING_FOR_DATE, PENDING_FOR_FUNDS, EXT_PROC, PROCESSED, RECONCILED, ER_INVALID, ER_EXTCONN, ER_EXTSYS, ER_EXPIRED, ER_GENERAL, ER_BATCH, EXT_SENT, UNALLOCATED, HELD, RETURNED, CANCELLED, REPROCESSING, VOID, CLEARING]\n\n`SUBMITTED` `SCREENING_REQ` `VALIDATED` `PENDING_FOR_DATE` `PENDING_FOR_FUNDS` `EXT_PROC` `PROCESSED` `RECONCILED` `ER_INVALID` `ER_EXTCONN` `ER_EXTSYS` `ER_EXPIRED` `ER_GENERAL` `ER_BATCH` `EXT_SENT` `UNALLOCATED` `HELD` `RETURNED` `CANCELLED` `REPROCESSING` `VOID` `CLEARING` `HELD_IN_SUSPENSE`";
                                readonly enum: readonly ["SUBMITTED", "SCREENING_REQ", "VALIDATED", "PENDING_FOR_DATE", "PENDING_FOR_FUNDS", "EXT_PROC", "PROCESSED", "RECONCILED", "ER_INVALID", "ER_EXTCONN", "ER_EXTSYS", "ER_EXPIRED", "ER_GENERAL", "ER_BATCH", "EXT_SENT", "UNALLOCATED", "HELD", "RETURNED", "CANCELLED", "REPROCESSING", "VOID", "CLEARING", "HELD_IN_SUSPENSE"];
                                readonly examples: readonly ["VALIDATED"];
                            };
                            readonly createdDate: {
                                readonly type: "string";
                                readonly description: "Datetime the request was created. Format is 'yyyy-MM-dd'T'HH:mm:ss.sssZ' where Z is UTC offset. e.g '2017-01-28T01:01:01.010+0000'";
                                readonly format: "date-time";
                            };
                            readonly externalReference: {
                                readonly type: "string";
                                readonly description: "external reference if provided";
                                readonly examples: readonly ["aReference_00001"];
                            };
                            readonly details: {
                                readonly type: "object";
                                readonly description: "All the details of the payment from the original request";
                                readonly additionalProperties: true;
                            };
                            readonly approvalStatus: {
                                readonly type: "string";
                                readonly description: "Current approval status of payment. Can be one of [NOTNEEDED, PENDING, APPROVED, REJECTED, DELETED]\n\n`NOTNEEDED` `PENDING` `APPROVED` `REJECTED` `DELETED`";
                                readonly enum: readonly ["NOTNEEDED", "PENDING", "APPROVED", "REJECTED", "DELETED"];
                                readonly examples: readonly ["NOTNEEDED"];
                            };
                            readonly message: {
                                readonly type: "string";
                                readonly description: "Information about payment (if available)";
                            };
                            readonly schemeInfo: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly name: {
                                        readonly type: "string";
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                    };
                                    readonly responseCode: {
                                        readonly type: "string";
                                    };
                                };
                                readonly description: "Information with regards to the payment scheme";
                            };
                        };
                        readonly description: "Full details of all payments in this batch";
                    };
                };
                readonly summary: {
                    readonly type: "object";
                    readonly properties: {
                        readonly total: {
                            readonly type: "integer";
                            readonly description: "Total count of payment requests in this batch";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly invalid: {
                            readonly type: "integer";
                            readonly description: "Count of invalid payment requests";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly inprogress: {
                            readonly type: "integer";
                            readonly description: "Count of payment requests in progress";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly completed: {
                            readonly type: "integer";
                            readonly description: "Count of completed payments";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly errors: {
                            readonly type: "integer";
                            readonly description: "Count of failed payment requests";
                            readonly format: "int32";
                            readonly minimum: -2147483648;
                            readonly maximum: 2147483647;
                        };
                        readonly info: {
                            readonly type: "string";
                            readonly description: "Additional information or error message regarding this batch payment request";
                        };
                        readonly strict: {
                            readonly type: "boolean";
                        };
                    };
                    readonly description: "Summary of the state of payment requests in this batch";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SuspendCard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card which should be suspended";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const SuspendMandate: {
    readonly body: {
        readonly required: readonly ["reason"];
        readonly type: "object";
        readonly properties: {
            readonly cancelAllScheduledPayments: {
                readonly type: "boolean";
                readonly description: "Should cancel all collections schedules for the mandate";
            };
            readonly reason: {
                readonly maxLength: 300;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Reason to suspend the mandate";
            };
        };
        readonly description: "Details of Mandate suspension.";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Id of Mandate to suspend.";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '404': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UnblockAccount: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of account to unblock";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UnblockCard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card which should be unblocked";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UnblockPin: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card to unblock the PIN (and/or CVC2) against";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UnsuspendCard: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card which should no longer be suspended";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const Update: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly limit: {
                readonly type: "number";
                readonly description: "Total card authorisation limit.";
                readonly examples: readonly [1000];
            };
            readonly holder: {
                readonly type: "object";
                readonly properties: {
                    readonly billingAddress: {
                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly maxLength: 50;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "First line of address";
                                readonly examples: readonly ["Floor 10"];
                            };
                            readonly addressLine2: {
                                readonly maxLength: 50;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Second line of address";
                                readonly examples: readonly ["80 George Street"];
                            };
                            readonly postTown: {
                                readonly maxLength: 20;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Post town";
                                readonly examples: readonly ["EDINBURGH"];
                            };
                            readonly postCode: {
                                readonly maxLength: 10;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Postcode";
                                readonly examples: readonly ["EH2 3BU"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "Country (ISO 3166 alpha-2 country code)";
                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                readonly examples: readonly ["GB"];
                            };
                        };
                        readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                    };
                    readonly shippingAddress: {
                        readonly required: readonly ["addressLine1", "country", "postCode", "postTown"];
                        readonly type: "object";
                        readonly properties: {
                            readonly addressLine1: {
                                readonly maxLength: 50;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "First line of address";
                                readonly examples: readonly ["Floor 10"];
                            };
                            readonly addressLine2: {
                                readonly maxLength: 50;
                                readonly minLength: 0;
                                readonly type: "string";
                                readonly description: "Second line of address";
                                readonly examples: readonly ["80 George Street"];
                            };
                            readonly postTown: {
                                readonly maxLength: 20;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Post town";
                                readonly examples: readonly ["EDINBURGH"];
                            };
                            readonly postCode: {
                                readonly maxLength: 10;
                                readonly minLength: 1;
                                readonly type: "string";
                                readonly description: "Postcode";
                                readonly examples: readonly ["EH2 3BU"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly description: "Country (ISO 3166 alpha-2 country code)";
                                readonly enum: readonly ["AT", "BE", "BG", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MT", "NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "AX", "AW", "BL", "CW", "GF", "GL", "GP", "ME", "MF", "MQ", "NC", "PF", "PM", "RE", "SX", "TF", "WF", "YT", "AI", "BM", "FK", "GB", "GG", "GI", "GS", "IO", "JE", "KY", "MS", "PN", "SH", "TC", "VG"];
                                readonly examples: readonly ["GB"];
                            };
                        };
                        readonly description: "Address details for the cardholder. Optional for individual customers whose partner has verification type EXTERNAL.";
                    };
                    readonly dateOfBirth: {
                        readonly type: "string";
                        readonly description: "Cardholder date of birth. Must match date format of yyyy-mm-dd. Required for virtual consumer and physical cards. Must be NULL for individual customers.";
                        readonly format: "date";
                        readonly examples: readonly ["2001-01-01"];
                    };
                    readonly mobileNumber: {
                        readonly type: "string";
                        readonly description: "Cardholder mobile number. Must start with a '+', followed by the country code and then the mobile number. Required for virtual consumer and physical cards.";
                        readonly examples: readonly ["+447123456000"];
                    };
                    readonly email: {
                        readonly maxLength: 50;
                        readonly minLength: 0;
                        readonly type: "string";
                        readonly description: "Cardholder email";
                        readonly examples: readonly ["cardholder@example.com"];
                    };
                };
                readonly description: "CardHolder";
            };
        };
        readonly description: "Update card";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card to be updated";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateAccessGroup: {
    readonly body: {
        readonly required: readonly ["accountIds", "action", "beneficiaryIds", "name"];
        readonly type: "object";
        readonly properties: {
            readonly action: {
                readonly type: "string";
                readonly description: "Action to apply for the supplied account bid";
                readonly enum: readonly ["ADD", "REMOVE"];
            };
            readonly accountIds: {
                readonly type: "array";
                readonly description: "Bids of the accounts to be added/removed";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Bids of the accounts to be added/removed";
                };
            };
            readonly beneficiaryIds: {
                readonly type: "array";
                readonly description: "Bids of the beneficiaries to be added/removed";
                readonly items: {
                    readonly type: "string";
                    readonly description: "Bids of the beneficiaries to be added/removed";
                };
            };
            readonly name: {
                readonly maxLength: 50;
                readonly minLength: 0;
                readonly pattern: "[\\w \\-]*";
                readonly type: "string";
                readonly description: "The name of the account group to create. Must match: [\\w \\-]*";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "Access group ID";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["countOfAccounts", "id", "name", "status", "type", "typeId"];
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "Unique ID for the access group";
                    readonly examples: readonly ["G0000001"];
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Access group name";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of access group\n\n`SERVICE_PARTNER` `SERVICE_CUSTOMER` `DELEGATE` `USER_DEFINED`";
                    readonly enum: readonly ["SERVICE_PARTNER", "SERVICE_CUSTOMER", "DELEGATE", "USER_DEFINED"];
                };
                readonly typeId: {
                    readonly type: "string";
                    readonly description: "The identifier of the linked entity implied by the type, e.g. the partner ID";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "Status of the access group\n\n`ACTIVE` `DELETED`";
                    readonly enum: readonly ["ACTIVE", "DELETED"];
                };
                readonly countOfAccounts: {
                    readonly type: "integer";
                    readonly description: "The number of accounts in this group";
                    readonly format: "int64";
                    readonly deprecated: true;
                    readonly minimum: -9223372036854776000;
                    readonly maximum: 9223372036854776000;
                };
            };
            readonly description: "AccessGroup";
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateCardAuthentication: {
    readonly body: {
        readonly required: readonly ["knowledgeBase"];
        readonly type: "object";
        readonly properties: {
            readonly knowledgeBase: {
                readonly type: "array";
                readonly description: "3DS Knowledge-Based Authentication (KBA) answers";
                readonly items: {
                    readonly required: readonly ["answer", "type"];
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "3DS knowledge-based authentication answer type";
                            readonly enum: readonly ["FIRST_PET_NAME", "MATERNAL_GRANDMOTHER_MAIDEN_NAME", "FAVOURITE_CHILDHOOD_FRIEND", "FIRST_CAR", "CITY_PARENTS_MET"];
                        };
                        readonly answer: {
                            readonly maxLength: 45;
                            readonly minLength: 1;
                            readonly type: "string";
                            readonly description: "3DS knowledge-based authentication answer";
                        };
                    };
                    readonly description: "3DS Knowledge-Based Authentication (KBA) answers";
                };
            };
        };
        readonly description: "Authentication";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "The ID of the card which has authentication information to be updated";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UpdateSecuredFundingLimit: {
    readonly body: {
        readonly required: readonly ["limit"];
        readonly type: "object";
        readonly properties: {
            readonly limit: {
                readonly minimum: 0;
                readonly type: "number";
                readonly description: "Secured funding limit";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly $schema: "http://json-schema.org/draft-04/schema#";
                    readonly description: "ID of account to set the secured funding limit";
                };
            };
            readonly required: readonly ["id"];
        }];
    };
    readonly response: {
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const Upload: {
    readonly body: {
        readonly required: readonly ["content", "fileName", "group"];
        readonly type: "object";
        readonly properties: {
            readonly fileName: {
                readonly maxLength: 100;
                readonly minLength: 0;
                readonly pattern: "^[\\w,\\s-.]+\\.(\\w){3,4}$";
                readonly type: "string";
            };
            readonly content: {
                readonly type: "string";
                readonly description: "Needs to be Base64 encoded";
            };
            readonly group: {
                readonly maxLength: 100;
                readonly minLength: 0;
                readonly type: "string";
                readonly description: "Use to group documents together. Combination of group+filename should be unique else the files will be overwritten";
            };
        };
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '201': {
            readonly type: "object";
            readonly properties: {
                readonly path: {
                    readonly type: "string";
                };
                readonly fileName: {
                    readonly type: "string";
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
declare const UploadPaymentFile: {
    readonly body: {
        readonly required: readonly ["content", "fileName"];
        readonly type: "object";
        readonly properties: {
            readonly fileName: {
                readonly type: "string";
                readonly description: "Original file name";
            };
            readonly content: {
                readonly type: "string";
                readonly description: "The file content must be zipped using gzip format and then Base64 encoded";
            };
        };
        readonly description: "File upload request body";
        readonly $schema: "http://json-schema.org/draft-04/schema#";
    };
    readonly response: {
        readonly '200': {
            readonly required: readonly ["fileId"];
            readonly type: "object";
            readonly properties: {
                readonly fileId: {
                    readonly type: "string";
                    readonly description: "Unique id of the uploaded file";
                    readonly examples: readonly ["F1100001"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '400': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '405': {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly field: {
                        readonly type: "string";
                    };
                    readonly code: {
                        readonly type: "string";
                        readonly enum: readonly ["GENERAL", "BUSINESSRULE", "MFASTATUS", "MFAERROR", "MFATIMEOUT", "MFADEVICEMM", "MFAMESSAGEINVALID", "NOTFOUND", "DUPLICATE", "INVALID", "CONNECTION", "RETRY", "RATELIMIT", "PERMISSION"];
                        readonly description: "`GENERAL` `BUSINESSRULE` `MFASTATUS` `MFAERROR` `MFATIMEOUT` `MFADEVICEMM` `MFAMESSAGEINVALID` `NOTFOUND` `DUPLICATE` `INVALID` `CONNECTION` `RETRY` `RATELIMIT` `PERMISSION`";
                    };
                    readonly errorCode: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                    readonly sourceService: {
                        readonly type: "string";
                    };
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
        readonly '500': {
            readonly required: readonly ["fileId"];
            readonly type: "object";
            readonly properties: {
                readonly fileId: {
                    readonly type: "string";
                    readonly description: "Unique id of the uploaded file";
                    readonly examples: readonly ["F1100001"];
                };
            };
            readonly $schema: "http://json-schema.org/draft-04/schema#";
        };
    };
};
export { ActivateCard, AddCustomerNotification, AddPartnerNotification, BlockAccount, BlockCard, CancelBatchPayments, CancelCard, CancelCollection, CancelCollectionSchedule, CancelDdosMandate, CancelMandate, CardEnquiry, CloseAccount, CreateAccessGroup, CreateAccount, CreateAuthorisation, CreateBeneficiary, CreateCard, CreateCollectionSchedule, CreateCustomer, CreateMandate, CreateOutboundCop, CreatePaymentInitiation, CreatePayments, CreatePhysicalCard, CreateRule, CreateStandingOrderInitiation, DeleteBeneficiaries, EditAccount, EditCustomer, EditCustomerNotification, EditPartnerNotification, ExpireAuthorisation, GenerateCardHolderToken, GenerateCsv, GetAccessGroup, GetAccessGroups, GetAccount, GetAccounts, GetAccountsByCustomer, GetAllCustomerNotifications, GetAllPartnerNotifications, GetAspsProviders, GetAsyncTask, GetAsyncTasks, GetBatchPayment, GetBatchPayments, GetBeneficiaries, GetCard, GetCardActivities, GetCards, GetCardsByAccount, GetCollectionSchedules, GetCollections, GetCreatePhysicalCardAsyncTasksByAccount, GetCustomer, GetCustomerNotification, GetCustomers, GetFailedWebHooks, GetLocks, GetMandates, GetPartnerNotification, GetPaymentInitiation, GetPayments, GetRule, GetRules, GetSecureCardDetails, GetSrdAccounts, GetStandingOrderInitiation, GetTransactionsByAccount, MigrateMandate, ModifyRule, Proceed, ReinstateMandate, RejectCollection, RemoveRules, ReplaceCard, ResetPin, RetrieveMandates, RetrievePin, ReverseAuthorisation, SecureResetPin, SendPayment, SettleAuthorisation, Status, SubmitBatchPayments, SuspendCard, SuspendMandate, UnblockAccount, UnblockCard, UnblockPin, UnsuspendCard, Update, UpdateAccessGroup, UpdateCardAuthentication, UpdateSecuredFundingLimit, Upload, UploadPaymentFile, };
